# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1.15.6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IstioNetworkingV1alpha3HTTPRetry(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'attempts': 'int',
        'per_try_timeout': 'str',
        'retry_on': 'str'
    }

    attribute_map = {
        'attempts': 'attempts',
        'per_try_timeout': 'perTryTimeout',
        'retry_on': 'retryOn'
    }

    def __init__(self, attempts=None, per_try_timeout=None, retry_on=None):  # noqa: E501
        """IstioNetworkingV1alpha3HTTPRetry - a model defined in OpenAPI"""  # noqa: E501

        self._attempts = None
        self._per_try_timeout = None
        self._retry_on = None
        self.discriminator = None

        if attempts is not None:
            self.attempts = attempts
        if per_try_timeout is not None:
            self.per_try_timeout = per_try_timeout
        if retry_on is not None:
            self.retry_on = retry_on

    @property
    def attempts(self):
        """Gets the attempts of this IstioNetworkingV1alpha3HTTPRetry.  # noqa: E501

        Number of retries for a given request. The interval between retries will be determined automatically (25ms+). Actual number of retries attempted depends on the request `timeout` of the [HTTP route](https://istio.io/docs/reference/config/networking/virtual-service/#HTTPRoute).  # noqa: E501

        :return: The attempts of this IstioNetworkingV1alpha3HTTPRetry.  # noqa: E501
        :rtype: int
        """
        return self._attempts

    @attempts.setter
    def attempts(self, attempts):
        """Sets the attempts of this IstioNetworkingV1alpha3HTTPRetry.

        Number of retries for a given request. The interval between retries will be determined automatically (25ms+). Actual number of retries attempted depends on the request `timeout` of the [HTTP route](https://istio.io/docs/reference/config/networking/virtual-service/#HTTPRoute).  # noqa: E501

        :param attempts: The attempts of this IstioNetworkingV1alpha3HTTPRetry.  # noqa: E501
        :type: int
        """

        self._attempts = attempts

    @property
    def per_try_timeout(self):
        """Gets the per_try_timeout of this IstioNetworkingV1alpha3HTTPRetry.  # noqa: E501

        Timeout per retry attempt for a given request. format: 1h/1m/1s/1ms. MUST BE >=1ms.  # noqa: E501

        :return: The per_try_timeout of this IstioNetworkingV1alpha3HTTPRetry.  # noqa: E501
        :rtype: str
        """
        return self._per_try_timeout

    @per_try_timeout.setter
    def per_try_timeout(self, per_try_timeout):
        """Sets the per_try_timeout of this IstioNetworkingV1alpha3HTTPRetry.

        Timeout per retry attempt for a given request. format: 1h/1m/1s/1ms. MUST BE >=1ms.  # noqa: E501

        :param per_try_timeout: The per_try_timeout of this IstioNetworkingV1alpha3HTTPRetry.  # noqa: E501
        :type: str
        """

        self._per_try_timeout = per_try_timeout

    @property
    def retry_on(self):
        """Gets the retry_on of this IstioNetworkingV1alpha3HTTPRetry.  # noqa: E501

        Specifies the conditions under which retry takes place. One or more policies can be specified using a ‘,’ delimited list. See the [retry policies](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-on) and [gRPC retry policies](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-grpc-on) for more details.  # noqa: E501

        :return: The retry_on of this IstioNetworkingV1alpha3HTTPRetry.  # noqa: E501
        :rtype: str
        """
        return self._retry_on

    @retry_on.setter
    def retry_on(self, retry_on):
        """Sets the retry_on of this IstioNetworkingV1alpha3HTTPRetry.

        Specifies the conditions under which retry takes place. One or more policies can be specified using a ‘,’ delimited list. See the [retry policies](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-on) and [gRPC retry policies](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/router_filter#x-envoy-retry-grpc-on) for more details.  # noqa: E501

        :param retry_on: The retry_on of this IstioNetworkingV1alpha3HTTPRetry.  # noqa: E501
        :type: str
        """

        self._retry_on = retry_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IstioNetworkingV1alpha3HTTPRetry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
