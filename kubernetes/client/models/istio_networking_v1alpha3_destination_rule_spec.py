# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1.15.6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IstioNetworkingV1alpha3DestinationRuleSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'host': 'str',
        'traffic_policy': 'IstioNetworkingV1alpha3TrafficPolicy',
        'subsets': 'list[IstioNetworkingV1alpha3Subset]',
        'export_to': 'list[str]'
    }

    attribute_map = {
        'host': 'host',
        'traffic_policy': 'trafficPolicy',
        'subsets': 'subsets',
        'export_to': 'exportTo'
    }

    def __init__(self, host=None, traffic_policy=None, subsets=None, export_to=None):  # noqa: E501
        """IstioNetworkingV1alpha3DestinationRuleSpec - a model defined in OpenAPI"""  # noqa: E501

        self._host = None
        self._traffic_policy = None
        self._subsets = None
        self._export_to = None
        self.discriminator = None

        if host is not None:
            self.host = host
        if traffic_policy is not None:
            self.traffic_policy = traffic_policy
        if subsets is not None:
            self.subsets = subsets
        if export_to is not None:
            self.export_to = export_to

    @property
    def host(self):
        """Gets the host of this IstioNetworkingV1alpha3DestinationRuleSpec.  # noqa: E501

        The name of a service from the service registry. Service names are looked up from the platform's service registry (e.g., Kubernetes services, Consul services, etc.) and from the hosts declared by [ServiceEntries](https://istio.io/docs/reference/config/networking/service-entry/#ServiceEntry). Rules defined for services that do not exist in the service registry will be ignored.  # noqa: E501

        :return: The host of this IstioNetworkingV1alpha3DestinationRuleSpec.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this IstioNetworkingV1alpha3DestinationRuleSpec.

        The name of a service from the service registry. Service names are looked up from the platform's service registry (e.g., Kubernetes services, Consul services, etc.) and from the hosts declared by [ServiceEntries](https://istio.io/docs/reference/config/networking/service-entry/#ServiceEntry). Rules defined for services that do not exist in the service registry will be ignored.  # noqa: E501

        :param host: The host of this IstioNetworkingV1alpha3DestinationRuleSpec.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def traffic_policy(self):
        """Gets the traffic_policy of this IstioNetworkingV1alpha3DestinationRuleSpec.  # noqa: E501


        :return: The traffic_policy of this IstioNetworkingV1alpha3DestinationRuleSpec.  # noqa: E501
        :rtype: IstioNetworkingV1alpha3TrafficPolicy
        """
        return self._traffic_policy

    @traffic_policy.setter
    def traffic_policy(self, traffic_policy):
        """Sets the traffic_policy of this IstioNetworkingV1alpha3DestinationRuleSpec.


        :param traffic_policy: The traffic_policy of this IstioNetworkingV1alpha3DestinationRuleSpec.  # noqa: E501
        :type: IstioNetworkingV1alpha3TrafficPolicy
        """

        self._traffic_policy = traffic_policy

    @property
    def subsets(self):
        """Gets the subsets of this IstioNetworkingV1alpha3DestinationRuleSpec.  # noqa: E501

        One or more named sets that represent individual versions of a service. Traffic policies can be overridden at subset level.  # noqa: E501

        :return: The subsets of this IstioNetworkingV1alpha3DestinationRuleSpec.  # noqa: E501
        :rtype: list[IstioNetworkingV1alpha3Subset]
        """
        return self._subsets

    @subsets.setter
    def subsets(self, subsets):
        """Sets the subsets of this IstioNetworkingV1alpha3DestinationRuleSpec.

        One or more named sets that represent individual versions of a service. Traffic policies can be overridden at subset level.  # noqa: E501

        :param subsets: The subsets of this IstioNetworkingV1alpha3DestinationRuleSpec.  # noqa: E501
        :type: list[IstioNetworkingV1alpha3Subset]
        """

        self._subsets = subsets

    @property
    def export_to(self):
        """Gets the export_to of this IstioNetworkingV1alpha3DestinationRuleSpec.  # noqa: E501

        A list of namespaces to which this destination rule is exported. The resolution of a destination rule to apply to a service occurs in the context of a hierarchy of namespaces. Exporting a destination rule allows it to be included in the resolution hierarchy for services in other namespaces. This feature provides a mechanism for service owners and mesh administrators to control the visibility of destination rules across namespace boundaries.  # noqa: E501

        :return: The export_to of this IstioNetworkingV1alpha3DestinationRuleSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._export_to

    @export_to.setter
    def export_to(self, export_to):
        """Sets the export_to of this IstioNetworkingV1alpha3DestinationRuleSpec.

        A list of namespaces to which this destination rule is exported. The resolution of a destination rule to apply to a service occurs in the context of a hierarchy of namespaces. Exporting a destination rule allows it to be included in the resolution hierarchy for services in other namespaces. This feature provides a mechanism for service owners and mesh administrators to control the visibility of destination rules across namespace boundaries.  # noqa: E501

        :param export_to: The export_to of this IstioNetworkingV1alpha3DestinationRuleSpec.  # noqa: E501
        :type: list[str]
        """

        self._export_to = export_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IstioNetworkingV1alpha3DestinationRuleSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
