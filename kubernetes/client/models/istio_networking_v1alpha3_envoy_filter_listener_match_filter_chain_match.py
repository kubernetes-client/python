# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1.15.6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IstioNetworkingV1alpha3EnvoyFilterListenerMatchFilterChainMatch(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'sni': 'str',
        'transport_protocol': 'str',
        'application_protocols': 'str',
        'filter': 'IstioNetworkingV1alpha3EnvoyFilterListenerMatchFilterMatch'
    }

    attribute_map = {
        'name': 'name',
        'sni': 'sni',
        'transport_protocol': 'transportProtocol',
        'application_protocols': 'applicationProtocols',
        'filter': 'filter'
    }

    def __init__(self, name=None, sni=None, transport_protocol=None, application_protocols=None, filter=None):  # noqa: E501
        """IstioNetworkingV1alpha3EnvoyFilterListenerMatchFilterChainMatch - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._sni = None
        self._transport_protocol = None
        self._application_protocols = None
        self._filter = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if sni is not None:
            self.sni = sni
        if transport_protocol is not None:
            self.transport_protocol = transport_protocol
        if application_protocols is not None:
            self.application_protocols = application_protocols
        if filter is not None:
            self.filter = filter

    @property
    def name(self):
        """Gets the name of this IstioNetworkingV1alpha3EnvoyFilterListenerMatchFilterChainMatch.  # noqa: E501

        The name assigned to the filter chain.  # noqa: E501

        :return: The name of this IstioNetworkingV1alpha3EnvoyFilterListenerMatchFilterChainMatch.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IstioNetworkingV1alpha3EnvoyFilterListenerMatchFilterChainMatch.

        The name assigned to the filter chain.  # noqa: E501

        :param name: The name of this IstioNetworkingV1alpha3EnvoyFilterListenerMatchFilterChainMatch.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def sni(self):
        """Gets the sni of this IstioNetworkingV1alpha3EnvoyFilterListenerMatchFilterChainMatch.  # noqa: E501

        The SNI value used by a filter chain's match condition. This condition will evaluate to false if the filter chain has no sni match.  # noqa: E501

        :return: The sni of this IstioNetworkingV1alpha3EnvoyFilterListenerMatchFilterChainMatch.  # noqa: E501
        :rtype: str
        """
        return self._sni

    @sni.setter
    def sni(self, sni):
        """Sets the sni of this IstioNetworkingV1alpha3EnvoyFilterListenerMatchFilterChainMatch.

        The SNI value used by a filter chain's match condition. This condition will evaluate to false if the filter chain has no sni match.  # noqa: E501

        :param sni: The sni of this IstioNetworkingV1alpha3EnvoyFilterListenerMatchFilterChainMatch.  # noqa: E501
        :type: str
        """

        self._sni = sni

    @property
    def transport_protocol(self):
        """Gets the transport_protocol of this IstioNetworkingV1alpha3EnvoyFilterListenerMatchFilterChainMatch.  # noqa: E501

        Applies only to SIDECAR_INBOUND context. If non-empty, a transport protocol to consider when determining a filter chain match. This value will be compared against the transport protocol of a new connection, when it's detected by the tls_inspector listener filter.  # noqa: E501

        :return: The transport_protocol of this IstioNetworkingV1alpha3EnvoyFilterListenerMatchFilterChainMatch.  # noqa: E501
        :rtype: str
        """
        return self._transport_protocol

    @transport_protocol.setter
    def transport_protocol(self, transport_protocol):
        """Sets the transport_protocol of this IstioNetworkingV1alpha3EnvoyFilterListenerMatchFilterChainMatch.

        Applies only to SIDECAR_INBOUND context. If non-empty, a transport protocol to consider when determining a filter chain match. This value will be compared against the transport protocol of a new connection, when it's detected by the tls_inspector listener filter.  # noqa: E501

        :param transport_protocol: The transport_protocol of this IstioNetworkingV1alpha3EnvoyFilterListenerMatchFilterChainMatch.  # noqa: E501
        :type: str
        """

        self._transport_protocol = transport_protocol

    @property
    def application_protocols(self):
        """Gets the application_protocols of this IstioNetworkingV1alpha3EnvoyFilterListenerMatchFilterChainMatch.  # noqa: E501

        Applies only to sidecars. If non-empty, a comma separated set of application protocols to consider when determining a filter chain match. This value will be compared against the application protocols of a new connection, when it's detected by one of the listener filters such as the http_inspector.  # noqa: E501

        :return: The application_protocols of this IstioNetworkingV1alpha3EnvoyFilterListenerMatchFilterChainMatch.  # noqa: E501
        :rtype: str
        """
        return self._application_protocols

    @application_protocols.setter
    def application_protocols(self, application_protocols):
        """Sets the application_protocols of this IstioNetworkingV1alpha3EnvoyFilterListenerMatchFilterChainMatch.

        Applies only to sidecars. If non-empty, a comma separated set of application protocols to consider when determining a filter chain match. This value will be compared against the application protocols of a new connection, when it's detected by one of the listener filters such as the http_inspector.  # noqa: E501

        :param application_protocols: The application_protocols of this IstioNetworkingV1alpha3EnvoyFilterListenerMatchFilterChainMatch.  # noqa: E501
        :type: str
        """

        self._application_protocols = application_protocols

    @property
    def filter(self):
        """Gets the filter of this IstioNetworkingV1alpha3EnvoyFilterListenerMatchFilterChainMatch.  # noqa: E501


        :return: The filter of this IstioNetworkingV1alpha3EnvoyFilterListenerMatchFilterChainMatch.  # noqa: E501
        :rtype: IstioNetworkingV1alpha3EnvoyFilterListenerMatchFilterMatch
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this IstioNetworkingV1alpha3EnvoyFilterListenerMatchFilterChainMatch.


        :param filter: The filter of this IstioNetworkingV1alpha3EnvoyFilterListenerMatchFilterChainMatch.  # noqa: E501
        :type: IstioNetworkingV1alpha3EnvoyFilterListenerMatchFilterMatch
        """

        self._filter = filter

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IstioNetworkingV1alpha3EnvoyFilterListenerMatchFilterChainMatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
