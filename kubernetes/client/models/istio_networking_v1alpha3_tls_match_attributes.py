# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1.15.6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IstioNetworkingV1alpha3TLSMatchAttributes(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'port': 'int',
        'gateways': 'list[str]',
        'source_labels': 'dict(str, str)',
        'destination_subnets': 'list[str]',
        'source_subnet': 'str',
        'sni_hosts': 'list[str]'
    }

    attribute_map = {
        'port': 'port',
        'gateways': 'gateways',
        'source_labels': 'sourceLabels',
        'destination_subnets': 'destinationSubnets',
        'source_subnet': 'sourceSubnet',
        'sni_hosts': 'sniHosts'
    }

    def __init__(self, port=None, gateways=None, source_labels=None, destination_subnets=None, source_subnet=None, sni_hosts=None):  # noqa: E501
        """IstioNetworkingV1alpha3TLSMatchAttributes - a model defined in OpenAPI"""  # noqa: E501

        self._port = None
        self._gateways = None
        self._source_labels = None
        self._destination_subnets = None
        self._source_subnet = None
        self._sni_hosts = None
        self.discriminator = None

        if port is not None:
            self.port = port
        if gateways is not None:
            self.gateways = gateways
        if source_labels is not None:
            self.source_labels = source_labels
        if destination_subnets is not None:
            self.destination_subnets = destination_subnets
        if source_subnet is not None:
            self.source_subnet = source_subnet
        if sni_hosts is not None:
            self.sni_hosts = sni_hosts

    @property
    def port(self):
        """Gets the port of this IstioNetworkingV1alpha3TLSMatchAttributes.  # noqa: E501

        Specifies the port on the host that is being addressed. Many services only expose a single port or label ports with the protocols they support, in these cases it is not required to explicitly select the port.  # noqa: E501

        :return: The port of this IstioNetworkingV1alpha3TLSMatchAttributes.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this IstioNetworkingV1alpha3TLSMatchAttributes.

        Specifies the port on the host that is being addressed. Many services only expose a single port or label ports with the protocols they support, in these cases it is not required to explicitly select the port.  # noqa: E501

        :param port: The port of this IstioNetworkingV1alpha3TLSMatchAttributes.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def gateways(self):
        """Gets the gateways of this IstioNetworkingV1alpha3TLSMatchAttributes.  # noqa: E501

        Names of gateways where the rule should be applied. Gateway names in the top-level `gateways` field of the VirtualService (if any) are overridden. The gateway match is independent of sourceLabels.  # noqa: E501

        :return: The gateways of this IstioNetworkingV1alpha3TLSMatchAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._gateways

    @gateways.setter
    def gateways(self, gateways):
        """Sets the gateways of this IstioNetworkingV1alpha3TLSMatchAttributes.

        Names of gateways where the rule should be applied. Gateway names in the top-level `gateways` field of the VirtualService (if any) are overridden. The gateway match is independent of sourceLabels.  # noqa: E501

        :param gateways: The gateways of this IstioNetworkingV1alpha3TLSMatchAttributes.  # noqa: E501
        :type: list[str]
        """

        self._gateways = gateways

    @property
    def source_labels(self):
        """Gets the source_labels of this IstioNetworkingV1alpha3TLSMatchAttributes.  # noqa: E501

        One or more labels that constrain the applicability of a rule to workloads with the given labels. If the VirtualService has a list of gateways specified in the top-level `gateways` field, it should include the reserved gateway `mesh` in order for this field to be applicable.  # noqa: E501

        :return: The source_labels of this IstioNetworkingV1alpha3TLSMatchAttributes.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._source_labels

    @source_labels.setter
    def source_labels(self, source_labels):
        """Sets the source_labels of this IstioNetworkingV1alpha3TLSMatchAttributes.

        One or more labels that constrain the applicability of a rule to workloads with the given labels. If the VirtualService has a list of gateways specified in the top-level `gateways` field, it should include the reserved gateway `mesh` in order for this field to be applicable.  # noqa: E501

        :param source_labels: The source_labels of this IstioNetworkingV1alpha3TLSMatchAttributes.  # noqa: E501
        :type: dict(str, str)
        """

        self._source_labels = source_labels

    @property
    def destination_subnets(self):
        """Gets the destination_subnets of this IstioNetworkingV1alpha3TLSMatchAttributes.  # noqa: E501

        IPv4 or IPv6 ip addresses of destination with optional subnet. E.g., a.b.c.d/xx form or just a.b.c.d.  # noqa: E501

        :return: The destination_subnets of this IstioNetworkingV1alpha3TLSMatchAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._destination_subnets

    @destination_subnets.setter
    def destination_subnets(self, destination_subnets):
        """Sets the destination_subnets of this IstioNetworkingV1alpha3TLSMatchAttributes.

        IPv4 or IPv6 ip addresses of destination with optional subnet. E.g., a.b.c.d/xx form or just a.b.c.d.  # noqa: E501

        :param destination_subnets: The destination_subnets of this IstioNetworkingV1alpha3TLSMatchAttributes.  # noqa: E501
        :type: list[str]
        """

        self._destination_subnets = destination_subnets

    @property
    def source_subnet(self):
        """Gets the source_subnet of this IstioNetworkingV1alpha3TLSMatchAttributes.  # noqa: E501

        IPv4 or IPv6 ip address of source with optional subnet. E.g., a.b.c.d/xx form or just a.b.c.d $hide_from_docs  # noqa: E501

        :return: The source_subnet of this IstioNetworkingV1alpha3TLSMatchAttributes.  # noqa: E501
        :rtype: str
        """
        return self._source_subnet

    @source_subnet.setter
    def source_subnet(self, source_subnet):
        """Sets the source_subnet of this IstioNetworkingV1alpha3TLSMatchAttributes.

        IPv4 or IPv6 ip address of source with optional subnet. E.g., a.b.c.d/xx form or just a.b.c.d $hide_from_docs  # noqa: E501

        :param source_subnet: The source_subnet of this IstioNetworkingV1alpha3TLSMatchAttributes.  # noqa: E501
        :type: str
        """

        self._source_subnet = source_subnet

    @property
    def sni_hosts(self):
        """Gets the sni_hosts of this IstioNetworkingV1alpha3TLSMatchAttributes.  # noqa: E501

        SNI (server name indicator) to match on. Wildcard prefixes can be used in the SNI value, e.g., *.com will match foo.example.com as well as example.com. An SNI value must be a subset (i.e., fall within the domain) of the corresponding virtual serivce's hosts.  # noqa: E501

        :return: The sni_hosts of this IstioNetworkingV1alpha3TLSMatchAttributes.  # noqa: E501
        :rtype: list[str]
        """
        return self._sni_hosts

    @sni_hosts.setter
    def sni_hosts(self, sni_hosts):
        """Sets the sni_hosts of this IstioNetworkingV1alpha3TLSMatchAttributes.

        SNI (server name indicator) to match on. Wildcard prefixes can be used in the SNI value, e.g., *.com will match foo.example.com as well as example.com. An SNI value must be a subset (i.e., fall within the domain) of the corresponding virtual serivce's hosts.  # noqa: E501

        :param sni_hosts: The sni_hosts of this IstioNetworkingV1alpha3TLSMatchAttributes.  # noqa: E501
        :type: list[str]
        """

        self._sni_hosts = sni_hosts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IstioNetworkingV1alpha3TLSMatchAttributes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
