# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1.15.6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IstioNetworkingV1alpha3Sidecar(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'workload_selector': 'IstioNetworkingV1alpha3WorkloadSelector',
        'ingress': 'list[IstioNetworkingV1alpha3IstioIngressListener]',
        'egress': 'list[IstioNetworkingV1alpha3IstioEgressListener]',
        'outbound_traffic_policy': 'IstioNetworkingV1alpha3OutboundTrafficPolicy'
    }

    attribute_map = {
        'workload_selector': 'workloadSelector',
        'ingress': 'ingress',
        'egress': 'egress',
        'outbound_traffic_policy': 'outboundTrafficPolicy'
    }

    def __init__(self, workload_selector=None, ingress=None, egress=None, outbound_traffic_policy=None):  # noqa: E501
        """IstioNetworkingV1alpha3Sidecar - a model defined in OpenAPI"""  # noqa: E501

        self._workload_selector = None
        self._ingress = None
        self._egress = None
        self._outbound_traffic_policy = None
        self.discriminator = None

        if workload_selector is not None:
            self.workload_selector = workload_selector
        if ingress is not None:
            self.ingress = ingress
        if egress is not None:
            self.egress = egress
        if outbound_traffic_policy is not None:
            self.outbound_traffic_policy = outbound_traffic_policy

    @property
    def workload_selector(self):
        """Gets the workload_selector of this IstioNetworkingV1alpha3Sidecar.  # noqa: E501


        :return: The workload_selector of this IstioNetworkingV1alpha3Sidecar.  # noqa: E501
        :rtype: IstioNetworkingV1alpha3WorkloadSelector
        """
        return self._workload_selector

    @workload_selector.setter
    def workload_selector(self, workload_selector):
        """Sets the workload_selector of this IstioNetworkingV1alpha3Sidecar.


        :param workload_selector: The workload_selector of this IstioNetworkingV1alpha3Sidecar.  # noqa: E501
        :type: IstioNetworkingV1alpha3WorkloadSelector
        """

        self._workload_selector = workload_selector

    @property
    def ingress(self):
        """Gets the ingress of this IstioNetworkingV1alpha3Sidecar.  # noqa: E501

        Ingress specifies the configuration of the sidecar for processing inbound traffic to the attached workload instance. If omitted, Istio will automatically configure the sidecar based on the information about the workload obtained from the orchestration platform (e.g., exposed ports, services, etc.). If specified, inbound ports are configured if and only if the workload instance is associated with a service.  # noqa: E501

        :return: The ingress of this IstioNetworkingV1alpha3Sidecar.  # noqa: E501
        :rtype: list[IstioNetworkingV1alpha3IstioIngressListener]
        """
        return self._ingress

    @ingress.setter
    def ingress(self, ingress):
        """Sets the ingress of this IstioNetworkingV1alpha3Sidecar.

        Ingress specifies the configuration of the sidecar for processing inbound traffic to the attached workload instance. If omitted, Istio will automatically configure the sidecar based on the information about the workload obtained from the orchestration platform (e.g., exposed ports, services, etc.). If specified, inbound ports are configured if and only if the workload instance is associated with a service.  # noqa: E501

        :param ingress: The ingress of this IstioNetworkingV1alpha3Sidecar.  # noqa: E501
        :type: list[IstioNetworkingV1alpha3IstioIngressListener]
        """

        self._ingress = ingress

    @property
    def egress(self):
        """Gets the egress of this IstioNetworkingV1alpha3Sidecar.  # noqa: E501

        Egress specifies the configuration of the sidecar for processing outbound traffic from the attached workload instance to other services in the mesh.  # noqa: E501

        :return: The egress of this IstioNetworkingV1alpha3Sidecar.  # noqa: E501
        :rtype: list[IstioNetworkingV1alpha3IstioEgressListener]
        """
        return self._egress

    @egress.setter
    def egress(self, egress):
        """Sets the egress of this IstioNetworkingV1alpha3Sidecar.

        Egress specifies the configuration of the sidecar for processing outbound traffic from the attached workload instance to other services in the mesh.  # noqa: E501

        :param egress: The egress of this IstioNetworkingV1alpha3Sidecar.  # noqa: E501
        :type: list[IstioNetworkingV1alpha3IstioEgressListener]
        """

        self._egress = egress

    @property
    def outbound_traffic_policy(self):
        """Gets the outbound_traffic_policy of this IstioNetworkingV1alpha3Sidecar.  # noqa: E501


        :return: The outbound_traffic_policy of this IstioNetworkingV1alpha3Sidecar.  # noqa: E501
        :rtype: IstioNetworkingV1alpha3OutboundTrafficPolicy
        """
        return self._outbound_traffic_policy

    @outbound_traffic_policy.setter
    def outbound_traffic_policy(self, outbound_traffic_policy):
        """Sets the outbound_traffic_policy of this IstioNetworkingV1alpha3Sidecar.


        :param outbound_traffic_policy: The outbound_traffic_policy of this IstioNetworkingV1alpha3Sidecar.  # noqa: E501
        :type: IstioNetworkingV1alpha3OutboundTrafficPolicy
        """

        self._outbound_traffic_policy = outbound_traffic_policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IstioNetworkingV1alpha3Sidecar):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
