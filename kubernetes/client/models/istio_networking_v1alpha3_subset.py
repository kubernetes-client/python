# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1.15.6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IstioNetworkingV1alpha3Subset(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'traffic_policy': 'IstioNetworkingV1alpha3TrafficPolicy',
        'labels': 'dict(str, str)'
    }

    attribute_map = {
        'name': 'name',
        'traffic_policy': 'trafficPolicy',
        'labels': 'labels'
    }

    def __init__(self, name=None, traffic_policy=None, labels=None):  # noqa: E501
        """IstioNetworkingV1alpha3Subset - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._traffic_policy = None
        self._labels = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if traffic_policy is not None:
            self.traffic_policy = traffic_policy
        if labels is not None:
            self.labels = labels

    @property
    def name(self):
        """Gets the name of this IstioNetworkingV1alpha3Subset.  # noqa: E501

        Name of the subset. The service name and the subset name can be used for traffic splitting in a route rule.  # noqa: E501

        :return: The name of this IstioNetworkingV1alpha3Subset.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IstioNetworkingV1alpha3Subset.

        Name of the subset. The service name and the subset name can be used for traffic splitting in a route rule.  # noqa: E501

        :param name: The name of this IstioNetworkingV1alpha3Subset.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def traffic_policy(self):
        """Gets the traffic_policy of this IstioNetworkingV1alpha3Subset.  # noqa: E501


        :return: The traffic_policy of this IstioNetworkingV1alpha3Subset.  # noqa: E501
        :rtype: IstioNetworkingV1alpha3TrafficPolicy
        """
        return self._traffic_policy

    @traffic_policy.setter
    def traffic_policy(self, traffic_policy):
        """Sets the traffic_policy of this IstioNetworkingV1alpha3Subset.


        :param traffic_policy: The traffic_policy of this IstioNetworkingV1alpha3Subset.  # noqa: E501
        :type: IstioNetworkingV1alpha3TrafficPolicy
        """

        self._traffic_policy = traffic_policy

    @property
    def labels(self):
        """Gets the labels of this IstioNetworkingV1alpha3Subset.  # noqa: E501

        Labels apply a filter over the endpoints of a service in the service registry. See route rules for examples of usage.  # noqa: E501

        :return: The labels of this IstioNetworkingV1alpha3Subset.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this IstioNetworkingV1alpha3Subset.

        Labels apply a filter over the endpoints of a service in the service registry. See route rules for examples of usage.  # noqa: E501

        :param labels: The labels of this IstioNetworkingV1alpha3Subset.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IstioNetworkingV1alpha3Subset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
