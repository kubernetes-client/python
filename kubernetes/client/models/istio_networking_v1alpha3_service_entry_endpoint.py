# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1.15.6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IstioNetworkingV1alpha3ServiceEntryEndpoint(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'labels': 'dict(str, str)',
        'address': 'str',
        'ports': 'dict(str, int)',
        'network': 'str',
        'locality': 'str',
        'weight': 'int'
    }

    attribute_map = {
        'labels': 'labels',
        'address': 'address',
        'ports': 'ports',
        'network': 'network',
        'locality': 'locality',
        'weight': 'weight'
    }

    def __init__(self, labels=None, address=None, ports=None, network=None, locality=None, weight=None):  # noqa: E501
        """IstioNetworkingV1alpha3ServiceEntryEndpoint - a model defined in OpenAPI"""  # noqa: E501

        self._labels = None
        self._address = None
        self._ports = None
        self._network = None
        self._locality = None
        self._weight = None
        self.discriminator = None

        if labels is not None:
            self.labels = labels
        if address is not None:
            self.address = address
        if ports is not None:
            self.ports = ports
        if network is not None:
            self.network = network
        if locality is not None:
            self.locality = locality
        if weight is not None:
            self.weight = weight

    @property
    def labels(self):
        """Gets the labels of this IstioNetworkingV1alpha3ServiceEntryEndpoint.  # noqa: E501

        One or more labels associated with the endpoint.  # noqa: E501

        :return: The labels of this IstioNetworkingV1alpha3ServiceEntryEndpoint.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this IstioNetworkingV1alpha3ServiceEntryEndpoint.

        One or more labels associated with the endpoint.  # noqa: E501

        :param labels: The labels of this IstioNetworkingV1alpha3ServiceEntryEndpoint.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def address(self):
        """Gets the address of this IstioNetworkingV1alpha3ServiceEntryEndpoint.  # noqa: E501

        Address associated with the network endpoint without the port. Domain names can be used if and only if the resolution is set to DNS, and must be fully-qualified without wildcards. Use the form unix:///absolute/path/to/socket for Unix domain socket endpoints.  # noqa: E501

        :return: The address of this IstioNetworkingV1alpha3ServiceEntryEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this IstioNetworkingV1alpha3ServiceEntryEndpoint.

        Address associated with the network endpoint without the port. Domain names can be used if and only if the resolution is set to DNS, and must be fully-qualified without wildcards. Use the form unix:///absolute/path/to/socket for Unix domain socket endpoints.  # noqa: E501

        :param address: The address of this IstioNetworkingV1alpha3ServiceEntryEndpoint.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def ports(self):
        """Gets the ports of this IstioNetworkingV1alpha3ServiceEntryEndpoint.  # noqa: E501

        Set of ports associated with the endpoint. The ports must be associated with a port name that was declared as part of the service. Do not use for `unix://` addresses.  # noqa: E501

        :return: The ports of this IstioNetworkingV1alpha3ServiceEntryEndpoint.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this IstioNetworkingV1alpha3ServiceEntryEndpoint.

        Set of ports associated with the endpoint. The ports must be associated with a port name that was declared as part of the service. Do not use for `unix://` addresses.  # noqa: E501

        :param ports: The ports of this IstioNetworkingV1alpha3ServiceEntryEndpoint.  # noqa: E501
        :type: dict(str, int)
        """

        self._ports = ports

    @property
    def network(self):
        """Gets the network of this IstioNetworkingV1alpha3ServiceEntryEndpoint.  # noqa: E501

        Network enables Istio to group endpoints resident in the same L3 domain/network. All endpoints in the same network are assumed to be directly reachable from one another. When endpoints in different networks cannot reach each other directly, an Istio Gateway can be used to establish connectivity (usually using the `AUTO_PASSTHROUGH` mode in a Gateway Server). This is an advanced configuration used typically for spanning an Istio mesh over multiple clusters.  # noqa: E501

        :return: The network of this IstioNetworkingV1alpha3ServiceEntryEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this IstioNetworkingV1alpha3ServiceEntryEndpoint.

        Network enables Istio to group endpoints resident in the same L3 domain/network. All endpoints in the same network are assumed to be directly reachable from one another. When endpoints in different networks cannot reach each other directly, an Istio Gateway can be used to establish connectivity (usually using the `AUTO_PASSTHROUGH` mode in a Gateway Server). This is an advanced configuration used typically for spanning an Istio mesh over multiple clusters.  # noqa: E501

        :param network: The network of this IstioNetworkingV1alpha3ServiceEntryEndpoint.  # noqa: E501
        :type: str
        """

        self._network = network

    @property
    def locality(self):
        """Gets the locality of this IstioNetworkingV1alpha3ServiceEntryEndpoint.  # noqa: E501

        The locality associated with the endpoint. A locality corresponds to a failure domain (e.g., country/region/zone). Arbitrary failure domain hierarchies can be represented by separating each encapsulating failure domain by /. For example, the locality of an an endpoint in US, in US-East-1 region, within availability zone az-1, in data center rack r11 can be represented as us/us-east-1/az-1/r11. Istio will configure the sidecar to route to endpoints within the same locality as the sidecar. If none of the endpoints in the locality are available, endpoints parent locality (but within the same network ID) will be chosen. For example, if there are two endpoints in same network (networkID \"n1\"), say e1 with locality us/us-east-1/az-1/r11 and e2 with locality us/us-east-1/az-2/r12, a sidecar from us/us-east-1/az-1/r11 locality will prefer e1 from the same locality over e2 from a different locality. Endpoint e2 could be the IP associated with a gateway (that bridges networks n1 and n2), or the IP associated with a standard service endpoint.  # noqa: E501

        :return: The locality of this IstioNetworkingV1alpha3ServiceEntryEndpoint.  # noqa: E501
        :rtype: str
        """
        return self._locality

    @locality.setter
    def locality(self, locality):
        """Sets the locality of this IstioNetworkingV1alpha3ServiceEntryEndpoint.

        The locality associated with the endpoint. A locality corresponds to a failure domain (e.g., country/region/zone). Arbitrary failure domain hierarchies can be represented by separating each encapsulating failure domain by /. For example, the locality of an an endpoint in US, in US-East-1 region, within availability zone az-1, in data center rack r11 can be represented as us/us-east-1/az-1/r11. Istio will configure the sidecar to route to endpoints within the same locality as the sidecar. If none of the endpoints in the locality are available, endpoints parent locality (but within the same network ID) will be chosen. For example, if there are two endpoints in same network (networkID \"n1\"), say e1 with locality us/us-east-1/az-1/r11 and e2 with locality us/us-east-1/az-2/r12, a sidecar from us/us-east-1/az-1/r11 locality will prefer e1 from the same locality over e2 from a different locality. Endpoint e2 could be the IP associated with a gateway (that bridges networks n1 and n2), or the IP associated with a standard service endpoint.  # noqa: E501

        :param locality: The locality of this IstioNetworkingV1alpha3ServiceEntryEndpoint.  # noqa: E501
        :type: str
        """

        self._locality = locality

    @property
    def weight(self):
        """Gets the weight of this IstioNetworkingV1alpha3ServiceEntryEndpoint.  # noqa: E501

        The load balancing weight associated with the endpoint. Endpoints with higher weights will receive proportionally higher traffic.  # noqa: E501

        :return: The weight of this IstioNetworkingV1alpha3ServiceEntryEndpoint.  # noqa: E501
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this IstioNetworkingV1alpha3ServiceEntryEndpoint.

        The load balancing weight associated with the endpoint. Endpoints with higher weights will receive proportionally higher traffic.  # noqa: E501

        :param weight: The weight of this IstioNetworkingV1alpha3ServiceEntryEndpoint.  # noqa: E501
        :type: int
        """

        self._weight = weight

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IstioNetworkingV1alpha3ServiceEntryEndpoint):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
