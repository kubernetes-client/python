# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1.15.6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IstioNetworkingV1alpha3TrafficPolicyPortTrafficPolicy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'load_balancer': 'object',
        'connection_pool': 'IstioNetworkingV1alpha3ConnectionPoolSettings',
        'outlier_detection': 'IstioNetworkingV1alpha3OutlierDetection',
        'tls': 'IstioNetworkingV1alpha3TLSSettings',
        'port': 'IstioNetworkingV1alpha3PortSelector'
    }

    attribute_map = {
        'load_balancer': 'loadBalancer',
        'connection_pool': 'connectionPool',
        'outlier_detection': 'outlierDetection',
        'tls': 'tls',
        'port': 'port'
    }

    def __init__(self, load_balancer=None, connection_pool=None, outlier_detection=None, tls=None, port=None):  # noqa: E501
        """IstioNetworkingV1alpha3TrafficPolicyPortTrafficPolicy - a model defined in OpenAPI"""  # noqa: E501

        self._load_balancer = None
        self._connection_pool = None
        self._outlier_detection = None
        self._tls = None
        self._port = None
        self.discriminator = None

        if load_balancer is not None:
            self.load_balancer = load_balancer
        if connection_pool is not None:
            self.connection_pool = connection_pool
        if outlier_detection is not None:
            self.outlier_detection = outlier_detection
        if tls is not None:
            self.tls = tls
        if port is not None:
            self.port = port

    @property
    def load_balancer(self):
        """Gets the load_balancer of this IstioNetworkingV1alpha3TrafficPolicyPortTrafficPolicy.  # noqa: E501

        Load balancing policies to apply for a specific destination. See Envoy's load balancing [documentation](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/load_balancing/load_balancing) for more details.  # noqa: E501

        :return: The load_balancer of this IstioNetworkingV1alpha3TrafficPolicyPortTrafficPolicy.  # noqa: E501
        :rtype: object
        """
        return self._load_balancer

    @load_balancer.setter
    def load_balancer(self, load_balancer):
        """Sets the load_balancer of this IstioNetworkingV1alpha3TrafficPolicyPortTrafficPolicy.

        Load balancing policies to apply for a specific destination. See Envoy's load balancing [documentation](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/load_balancing/load_balancing) for more details.  # noqa: E501

        :param load_balancer: The load_balancer of this IstioNetworkingV1alpha3TrafficPolicyPortTrafficPolicy.  # noqa: E501
        :type: object
        """

        self._load_balancer = load_balancer

    @property
    def connection_pool(self):
        """Gets the connection_pool of this IstioNetworkingV1alpha3TrafficPolicyPortTrafficPolicy.  # noqa: E501


        :return: The connection_pool of this IstioNetworkingV1alpha3TrafficPolicyPortTrafficPolicy.  # noqa: E501
        :rtype: IstioNetworkingV1alpha3ConnectionPoolSettings
        """
        return self._connection_pool

    @connection_pool.setter
    def connection_pool(self, connection_pool):
        """Sets the connection_pool of this IstioNetworkingV1alpha3TrafficPolicyPortTrafficPolicy.


        :param connection_pool: The connection_pool of this IstioNetworkingV1alpha3TrafficPolicyPortTrafficPolicy.  # noqa: E501
        :type: IstioNetworkingV1alpha3ConnectionPoolSettings
        """

        self._connection_pool = connection_pool

    @property
    def outlier_detection(self):
        """Gets the outlier_detection of this IstioNetworkingV1alpha3TrafficPolicyPortTrafficPolicy.  # noqa: E501


        :return: The outlier_detection of this IstioNetworkingV1alpha3TrafficPolicyPortTrafficPolicy.  # noqa: E501
        :rtype: IstioNetworkingV1alpha3OutlierDetection
        """
        return self._outlier_detection

    @outlier_detection.setter
    def outlier_detection(self, outlier_detection):
        """Sets the outlier_detection of this IstioNetworkingV1alpha3TrafficPolicyPortTrafficPolicy.


        :param outlier_detection: The outlier_detection of this IstioNetworkingV1alpha3TrafficPolicyPortTrafficPolicy.  # noqa: E501
        :type: IstioNetworkingV1alpha3OutlierDetection
        """

        self._outlier_detection = outlier_detection

    @property
    def tls(self):
        """Gets the tls of this IstioNetworkingV1alpha3TrafficPolicyPortTrafficPolicy.  # noqa: E501


        :return: The tls of this IstioNetworkingV1alpha3TrafficPolicyPortTrafficPolicy.  # noqa: E501
        :rtype: IstioNetworkingV1alpha3TLSSettings
        """
        return self._tls

    @tls.setter
    def tls(self, tls):
        """Sets the tls of this IstioNetworkingV1alpha3TrafficPolicyPortTrafficPolicy.


        :param tls: The tls of this IstioNetworkingV1alpha3TrafficPolicyPortTrafficPolicy.  # noqa: E501
        :type: IstioNetworkingV1alpha3TLSSettings
        """

        self._tls = tls

    @property
    def port(self):
        """Gets the port of this IstioNetworkingV1alpha3TrafficPolicyPortTrafficPolicy.  # noqa: E501


        :return: The port of this IstioNetworkingV1alpha3TrafficPolicyPortTrafficPolicy.  # noqa: E501
        :rtype: IstioNetworkingV1alpha3PortSelector
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this IstioNetworkingV1alpha3TrafficPolicyPortTrafficPolicy.


        :param port: The port of this IstioNetworkingV1alpha3TrafficPolicyPortTrafficPolicy.  # noqa: E501
        :type: IstioNetworkingV1alpha3PortSelector
        """

        self._port = port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IstioNetworkingV1alpha3TrafficPolicyPortTrafficPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
