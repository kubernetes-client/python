# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1.15.6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IstioNetworkingV1alpha3EnvoyFilterEnvoyConfigObjectPatch(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'apply_to': 'str',
        'match': 'object',
        'patch': 'IstioNetworkingV1alpha3EnvoyFilterPatch'
    }

    attribute_map = {
        'apply_to': 'applyTo',
        'match': 'match',
        'patch': 'patch'
    }

    def __init__(self, apply_to=None, match=None, patch=None):  # noqa: E501
        """IstioNetworkingV1alpha3EnvoyFilterEnvoyConfigObjectPatch - a model defined in OpenAPI"""  # noqa: E501

        self._apply_to = None
        self._match = None
        self._patch = None
        self.discriminator = None

        if apply_to is not None:
            self.apply_to = apply_to
        if match is not None:
            self.match = match
        if patch is not None:
            self.patch = patch

    @property
    def apply_to(self):
        """Gets the apply_to of this IstioNetworkingV1alpha3EnvoyFilterEnvoyConfigObjectPatch.  # noqa: E501

        ApplyTo specifies where in the Envoy configuration, the given patch should be applied.  # noqa: E501

        :return: The apply_to of this IstioNetworkingV1alpha3EnvoyFilterEnvoyConfigObjectPatch.  # noqa: E501
        :rtype: str
        """
        return self._apply_to

    @apply_to.setter
    def apply_to(self, apply_to):
        """Sets the apply_to of this IstioNetworkingV1alpha3EnvoyFilterEnvoyConfigObjectPatch.

        ApplyTo specifies where in the Envoy configuration, the given patch should be applied.  # noqa: E501

        :param apply_to: The apply_to of this IstioNetworkingV1alpha3EnvoyFilterEnvoyConfigObjectPatch.  # noqa: E501
        :type: str
        """
        allowed_values = ["INVALID", "LISTENER", "FILTER_CHAIN", "NETWORK_FILTER", "HTTP_FILTER", "ROUTE_CONFIGURATION", "VIRTUAL_HOST", "HTTP_ROUTE", "CLUSTER"]  # noqa: E501
        if apply_to not in allowed_values:
            raise ValueError(
                "Invalid value for `apply_to` ({0}), must be one of {1}"  # noqa: E501
                .format(apply_to, allowed_values)
            )

        self._apply_to = apply_to

    @property
    def match(self):
        """Gets the match of this IstioNetworkingV1alpha3EnvoyFilterEnvoyConfigObjectPatch.  # noqa: E501

        One or more match conditions to be met before a patch is applied to the generated configuration for a given proxy.  # noqa: E501

        :return: The match of this IstioNetworkingV1alpha3EnvoyFilterEnvoyConfigObjectPatch.  # noqa: E501
        :rtype: object
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this IstioNetworkingV1alpha3EnvoyFilterEnvoyConfigObjectPatch.

        One or more match conditions to be met before a patch is applied to the generated configuration for a given proxy.  # noqa: E501

        :param match: The match of this IstioNetworkingV1alpha3EnvoyFilterEnvoyConfigObjectPatch.  # noqa: E501
        :type: object
        """

        self._match = match

    @property
    def patch(self):
        """Gets the patch of this IstioNetworkingV1alpha3EnvoyFilterEnvoyConfigObjectPatch.  # noqa: E501


        :return: The patch of this IstioNetworkingV1alpha3EnvoyFilterEnvoyConfigObjectPatch.  # noqa: E501
        :rtype: IstioNetworkingV1alpha3EnvoyFilterPatch
        """
        return self._patch

    @patch.setter
    def patch(self, patch):
        """Sets the patch of this IstioNetworkingV1alpha3EnvoyFilterEnvoyConfigObjectPatch.


        :param patch: The patch of this IstioNetworkingV1alpha3EnvoyFilterEnvoyConfigObjectPatch.  # noqa: E501
        :type: IstioNetworkingV1alpha3EnvoyFilterPatch
        """

        self._patch = patch

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IstioNetworkingV1alpha3EnvoyFilterEnvoyConfigObjectPatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
