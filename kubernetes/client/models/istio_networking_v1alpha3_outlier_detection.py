# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1.15.6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IstioNetworkingV1alpha3OutlierDetection(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'interval': 'str',
        'consecutive_errors': 'int',
        'consecutive_gateway_errors': 'int',
        'consecutive5xx_errors': 'int',
        'base_ejection_time': 'str',
        'max_ejection_percent': 'int',
        'min_health_percent': 'int'
    }

    attribute_map = {
        'interval': 'interval',
        'consecutive_errors': 'consecutiveErrors',
        'consecutive_gateway_errors': 'consecutiveGatewayErrors',
        'consecutive5xx_errors': 'consecutive5xxErrors',
        'base_ejection_time': 'baseEjectionTime',
        'max_ejection_percent': 'maxEjectionPercent',
        'min_health_percent': 'minHealthPercent'
    }

    def __init__(self, interval=None, consecutive_errors=None, consecutive_gateway_errors=None, consecutive5xx_errors=None, base_ejection_time=None, max_ejection_percent=None, min_health_percent=None):  # noqa: E501
        """IstioNetworkingV1alpha3OutlierDetection - a model defined in OpenAPI"""  # noqa: E501

        self._interval = None
        self._consecutive_errors = None
        self._consecutive_gateway_errors = None
        self._consecutive5xx_errors = None
        self._base_ejection_time = None
        self._max_ejection_percent = None
        self._min_health_percent = None
        self.discriminator = None

        if interval is not None:
            self.interval = interval
        if consecutive_errors is not None:
            self.consecutive_errors = consecutive_errors
        if consecutive_gateway_errors is not None:
            self.consecutive_gateway_errors = consecutive_gateway_errors
        if consecutive5xx_errors is not None:
            self.consecutive5xx_errors = consecutive5xx_errors
        if base_ejection_time is not None:
            self.base_ejection_time = base_ejection_time
        if max_ejection_percent is not None:
            self.max_ejection_percent = max_ejection_percent
        if min_health_percent is not None:
            self.min_health_percent = min_health_percent

    @property
    def interval(self):
        """Gets the interval of this IstioNetworkingV1alpha3OutlierDetection.  # noqa: E501

        Time interval between ejection sweep analysis. format: 1h/1m/1s/1ms. MUST BE >=1ms. Default is 10s.  # noqa: E501

        :return: The interval of this IstioNetworkingV1alpha3OutlierDetection.  # noqa: E501
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this IstioNetworkingV1alpha3OutlierDetection.

        Time interval between ejection sweep analysis. format: 1h/1m/1s/1ms. MUST BE >=1ms. Default is 10s.  # noqa: E501

        :param interval: The interval of this IstioNetworkingV1alpha3OutlierDetection.  # noqa: E501
        :type: str
        """

        self._interval = interval

    @property
    def consecutive_errors(self):
        """Gets the consecutive_errors of this IstioNetworkingV1alpha3OutlierDetection.  # noqa: E501

        Number of errors before a host is ejected from the connection pool. Defaults to 5. When the upstream host is accessed over HTTP, a 502, 503, or 504 return code qualifies as an error. When the upstream host is accessed over an opaque TCP connection, connect timeouts and connection error/failure events qualify as an error. $hide_from_docs  # noqa: E501

        :return: The consecutive_errors of this IstioNetworkingV1alpha3OutlierDetection.  # noqa: E501
        :rtype: int
        """
        return self._consecutive_errors

    @consecutive_errors.setter
    def consecutive_errors(self, consecutive_errors):
        """Sets the consecutive_errors of this IstioNetworkingV1alpha3OutlierDetection.

        Number of errors before a host is ejected from the connection pool. Defaults to 5. When the upstream host is accessed over HTTP, a 502, 503, or 504 return code qualifies as an error. When the upstream host is accessed over an opaque TCP connection, connect timeouts and connection error/failure events qualify as an error. $hide_from_docs  # noqa: E501

        :param consecutive_errors: The consecutive_errors of this IstioNetworkingV1alpha3OutlierDetection.  # noqa: E501
        :type: int
        """

        self._consecutive_errors = consecutive_errors

    @property
    def consecutive_gateway_errors(self):
        """Gets the consecutive_gateway_errors of this IstioNetworkingV1alpha3OutlierDetection.  # noqa: E501

        Number of gateway errors before a host is ejected from the connection pool. When the upstream host is accessed over HTTP, a 502, 503, or 504 return code qualifies as a gateway error. When the upstream host is accessed over an opaque TCP connection, connect timeouts and connection error/failure events qualify as a gateway error. This feature is disabled by default or when set to the value 0.  # noqa: E501

        :return: The consecutive_gateway_errors of this IstioNetworkingV1alpha3OutlierDetection.  # noqa: E501
        :rtype: int
        """
        return self._consecutive_gateway_errors

    @consecutive_gateway_errors.setter
    def consecutive_gateway_errors(self, consecutive_gateway_errors):
        """Sets the consecutive_gateway_errors of this IstioNetworkingV1alpha3OutlierDetection.

        Number of gateway errors before a host is ejected from the connection pool. When the upstream host is accessed over HTTP, a 502, 503, or 504 return code qualifies as a gateway error. When the upstream host is accessed over an opaque TCP connection, connect timeouts and connection error/failure events qualify as a gateway error. This feature is disabled by default or when set to the value 0.  # noqa: E501

        :param consecutive_gateway_errors: The consecutive_gateway_errors of this IstioNetworkingV1alpha3OutlierDetection.  # noqa: E501
        :type: int
        """

        self._consecutive_gateway_errors = consecutive_gateway_errors

    @property
    def consecutive5xx_errors(self):
        """Gets the consecutive5xx_errors of this IstioNetworkingV1alpha3OutlierDetection.  # noqa: E501

        Number of 5xx errors before a host is ejected from the connection pool. When the upstream host is accessed over an opaque TCP connection, connect timeouts, connection error/failure and request failure events qualify as a 5xx error. This feature defaults to 5 but can be disabled by setting the value to 0.  # noqa: E501

        :return: The consecutive5xx_errors of this IstioNetworkingV1alpha3OutlierDetection.  # noqa: E501
        :rtype: int
        """
        return self._consecutive5xx_errors

    @consecutive5xx_errors.setter
    def consecutive5xx_errors(self, consecutive5xx_errors):
        """Sets the consecutive5xx_errors of this IstioNetworkingV1alpha3OutlierDetection.

        Number of 5xx errors before a host is ejected from the connection pool. When the upstream host is accessed over an opaque TCP connection, connect timeouts, connection error/failure and request failure events qualify as a 5xx error. This feature defaults to 5 but can be disabled by setting the value to 0.  # noqa: E501

        :param consecutive5xx_errors: The consecutive5xx_errors of this IstioNetworkingV1alpha3OutlierDetection.  # noqa: E501
        :type: int
        """

        self._consecutive5xx_errors = consecutive5xx_errors

    @property
    def base_ejection_time(self):
        """Gets the base_ejection_time of this IstioNetworkingV1alpha3OutlierDetection.  # noqa: E501

        Minimum ejection duration. A host will remain ejected for a period equal to the product of minimum ejection duration and the number of times the host has been ejected. This technique allows the system to automatically increase the ejection period for unhealthy upstream servers. format: 1h/1m/1s/1ms. MUST BE >=1ms. Default is 30s.  # noqa: E501

        :return: The base_ejection_time of this IstioNetworkingV1alpha3OutlierDetection.  # noqa: E501
        :rtype: str
        """
        return self._base_ejection_time

    @base_ejection_time.setter
    def base_ejection_time(self, base_ejection_time):
        """Sets the base_ejection_time of this IstioNetworkingV1alpha3OutlierDetection.

        Minimum ejection duration. A host will remain ejected for a period equal to the product of minimum ejection duration and the number of times the host has been ejected. This technique allows the system to automatically increase the ejection period for unhealthy upstream servers. format: 1h/1m/1s/1ms. MUST BE >=1ms. Default is 30s.  # noqa: E501

        :param base_ejection_time: The base_ejection_time of this IstioNetworkingV1alpha3OutlierDetection.  # noqa: E501
        :type: str
        """

        self._base_ejection_time = base_ejection_time

    @property
    def max_ejection_percent(self):
        """Gets the max_ejection_percent of this IstioNetworkingV1alpha3OutlierDetection.  # noqa: E501

        Maximum % of hosts in the load balancing pool for the upstream service that can be ejected. Defaults to 10%.  # noqa: E501

        :return: The max_ejection_percent of this IstioNetworkingV1alpha3OutlierDetection.  # noqa: E501
        :rtype: int
        """
        return self._max_ejection_percent

    @max_ejection_percent.setter
    def max_ejection_percent(self, max_ejection_percent):
        """Sets the max_ejection_percent of this IstioNetworkingV1alpha3OutlierDetection.

        Maximum % of hosts in the load balancing pool for the upstream service that can be ejected. Defaults to 10%.  # noqa: E501

        :param max_ejection_percent: The max_ejection_percent of this IstioNetworkingV1alpha3OutlierDetection.  # noqa: E501
        :type: int
        """

        self._max_ejection_percent = max_ejection_percent

    @property
    def min_health_percent(self):
        """Gets the min_health_percent of this IstioNetworkingV1alpha3OutlierDetection.  # noqa: E501

        Outlier detection will be enabled as long as the associated load balancing pool has at least min_health_percent hosts in healthy mode. When the percentage of healthy hosts in the load balancing pool drops below this threshold, outlier detection will be disabled and the proxy will load balance across all hosts in the pool (healthy and unhealthy). The threshold can be disabled by setting it to 0%. The default is 0% as it's not typically applicable in k8s environments with few pods per service.  # noqa: E501

        :return: The min_health_percent of this IstioNetworkingV1alpha3OutlierDetection.  # noqa: E501
        :rtype: int
        """
        return self._min_health_percent

    @min_health_percent.setter
    def min_health_percent(self, min_health_percent):
        """Sets the min_health_percent of this IstioNetworkingV1alpha3OutlierDetection.

        Outlier detection will be enabled as long as the associated load balancing pool has at least min_health_percent hosts in healthy mode. When the percentage of healthy hosts in the load balancing pool drops below this threshold, outlier detection will be disabled and the proxy will load balance across all hosts in the pool (healthy and unhealthy). The threshold can be disabled by setting it to 0%. The default is 0% as it's not typically applicable in k8s environments with few pods per service.  # noqa: E501

        :param min_health_percent: The min_health_percent of this IstioNetworkingV1alpha3OutlierDetection.  # noqa: E501
        :type: int
        """

        self._min_health_percent = min_health_percent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IstioNetworkingV1alpha3OutlierDetection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
