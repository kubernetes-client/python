# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1.15.6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IstioNetworkingV1alpha3EnvoyFilterSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'workload_labels': 'dict(str, str)',
        'filters': 'list[IstioNetworkingV1alpha3EnvoyFilterFilter]',
        'workload_selector': 'IstioNetworkingV1alpha3WorkloadSelector',
        'config_patches': 'list[IstioNetworkingV1alpha3EnvoyFilterEnvoyConfigObjectPatch]'
    }

    attribute_map = {
        'workload_labels': 'workloadLabels',
        'filters': 'filters',
        'workload_selector': 'workloadSelector',
        'config_patches': 'configPatches'
    }

    def __init__(self, workload_labels=None, filters=None, workload_selector=None, config_patches=None):  # noqa: E501
        """IstioNetworkingV1alpha3EnvoyFilterSpec - a model defined in OpenAPI"""  # noqa: E501

        self._workload_labels = None
        self._filters = None
        self._workload_selector = None
        self._config_patches = None
        self.discriminator = None

        if workload_labels is not None:
            self.workload_labels = workload_labels
        if filters is not None:
            self.filters = filters
        if workload_selector is not None:
            self.workload_selector = workload_selector
        if config_patches is not None:
            self.config_patches = config_patches

    @property
    def workload_labels(self):
        """Gets the workload_labels of this IstioNetworkingV1alpha3EnvoyFilterSpec.  # noqa: E501

        Deprecated. Use workload_selector instead. $hide_from_docs  # noqa: E501

        :return: The workload_labels of this IstioNetworkingV1alpha3EnvoyFilterSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._workload_labels

    @workload_labels.setter
    def workload_labels(self, workload_labels):
        """Sets the workload_labels of this IstioNetworkingV1alpha3EnvoyFilterSpec.

        Deprecated. Use workload_selector instead. $hide_from_docs  # noqa: E501

        :param workload_labels: The workload_labels of this IstioNetworkingV1alpha3EnvoyFilterSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._workload_labels = workload_labels

    @property
    def filters(self):
        """Gets the filters of this IstioNetworkingV1alpha3EnvoyFilterSpec.  # noqa: E501


        :return: The filters of this IstioNetworkingV1alpha3EnvoyFilterSpec.  # noqa: E501
        :rtype: list[IstioNetworkingV1alpha3EnvoyFilterFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this IstioNetworkingV1alpha3EnvoyFilterSpec.


        :param filters: The filters of this IstioNetworkingV1alpha3EnvoyFilterSpec.  # noqa: E501
        :type: list[IstioNetworkingV1alpha3EnvoyFilterFilter]
        """

        self._filters = filters

    @property
    def workload_selector(self):
        """Gets the workload_selector of this IstioNetworkingV1alpha3EnvoyFilterSpec.  # noqa: E501


        :return: The workload_selector of this IstioNetworkingV1alpha3EnvoyFilterSpec.  # noqa: E501
        :rtype: IstioNetworkingV1alpha3WorkloadSelector
        """
        return self._workload_selector

    @workload_selector.setter
    def workload_selector(self, workload_selector):
        """Sets the workload_selector of this IstioNetworkingV1alpha3EnvoyFilterSpec.


        :param workload_selector: The workload_selector of this IstioNetworkingV1alpha3EnvoyFilterSpec.  # noqa: E501
        :type: IstioNetworkingV1alpha3WorkloadSelector
        """

        self._workload_selector = workload_selector

    @property
    def config_patches(self):
        """Gets the config_patches of this IstioNetworkingV1alpha3EnvoyFilterSpec.  # noqa: E501

        One or more patches with match conditions.  # noqa: E501

        :return: The config_patches of this IstioNetworkingV1alpha3EnvoyFilterSpec.  # noqa: E501
        :rtype: list[IstioNetworkingV1alpha3EnvoyFilterEnvoyConfigObjectPatch]
        """
        return self._config_patches

    @config_patches.setter
    def config_patches(self, config_patches):
        """Sets the config_patches of this IstioNetworkingV1alpha3EnvoyFilterSpec.

        One or more patches with match conditions.  # noqa: E501

        :param config_patches: The config_patches of this IstioNetworkingV1alpha3EnvoyFilterSpec.  # noqa: E501
        :type: list[IstioNetworkingV1alpha3EnvoyFilterEnvoyConfigObjectPatch]
        """

        self._config_patches = config_patches

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IstioNetworkingV1alpha3EnvoyFilterSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
