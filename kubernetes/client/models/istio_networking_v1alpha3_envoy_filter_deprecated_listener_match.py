# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1.15.6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IstioNetworkingV1alpha3EnvoyFilterDeprecatedListenerMatch(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'port_number': 'int',
        'port_name_prefix': 'str',
        'listener_type': 'str',
        'listener_protocol': 'str',
        'address': 'list[str]'
    }

    attribute_map = {
        'port_number': 'portNumber',
        'port_name_prefix': 'portNamePrefix',
        'listener_type': 'listenerType',
        'listener_protocol': 'listenerProtocol',
        'address': 'address'
    }

    def __init__(self, port_number=None, port_name_prefix=None, listener_type=None, listener_protocol=None, address=None):  # noqa: E501
        """IstioNetworkingV1alpha3EnvoyFilterDeprecatedListenerMatch - a model defined in OpenAPI"""  # noqa: E501

        self._port_number = None
        self._port_name_prefix = None
        self._listener_type = None
        self._listener_protocol = None
        self._address = None
        self.discriminator = None

        if port_number is not None:
            self.port_number = port_number
        if port_name_prefix is not None:
            self.port_name_prefix = port_name_prefix
        if listener_type is not None:
            self.listener_type = listener_type
        if listener_protocol is not None:
            self.listener_protocol = listener_protocol
        if address is not None:
            self.address = address

    @property
    def port_number(self):
        """Gets the port_number of this IstioNetworkingV1alpha3EnvoyFilterDeprecatedListenerMatch.  # noqa: E501

        The service port/gateway port to which traffic is being sent/received. If not specified, matches all listeners. Even though inbound listeners are generated for the instance/pod ports, only service ports should be used to match listeners.  # noqa: E501

        :return: The port_number of this IstioNetworkingV1alpha3EnvoyFilterDeprecatedListenerMatch.  # noqa: E501
        :rtype: int
        """
        return self._port_number

    @port_number.setter
    def port_number(self, port_number):
        """Sets the port_number of this IstioNetworkingV1alpha3EnvoyFilterDeprecatedListenerMatch.

        The service port/gateway port to which traffic is being sent/received. If not specified, matches all listeners. Even though inbound listeners are generated for the instance/pod ports, only service ports should be used to match listeners.  # noqa: E501

        :param port_number: The port_number of this IstioNetworkingV1alpha3EnvoyFilterDeprecatedListenerMatch.  # noqa: E501
        :type: int
        """

        self._port_number = port_number

    @property
    def port_name_prefix(self):
        """Gets the port_name_prefix of this IstioNetworkingV1alpha3EnvoyFilterDeprecatedListenerMatch.  # noqa: E501

        Instead of using specific port numbers, a set of ports matching a given port name prefix can be selected. E.g., \"mongo\" selects ports named mongo-port, mongo, mongoDB, MONGO, etc. Matching is case insensitive.  # noqa: E501

        :return: The port_name_prefix of this IstioNetworkingV1alpha3EnvoyFilterDeprecatedListenerMatch.  # noqa: E501
        :rtype: str
        """
        return self._port_name_prefix

    @port_name_prefix.setter
    def port_name_prefix(self, port_name_prefix):
        """Sets the port_name_prefix of this IstioNetworkingV1alpha3EnvoyFilterDeprecatedListenerMatch.

        Instead of using specific port numbers, a set of ports matching a given port name prefix can be selected. E.g., \"mongo\" selects ports named mongo-port, mongo, mongoDB, MONGO, etc. Matching is case insensitive.  # noqa: E501

        :param port_name_prefix: The port_name_prefix of this IstioNetworkingV1alpha3EnvoyFilterDeprecatedListenerMatch.  # noqa: E501
        :type: str
        """

        self._port_name_prefix = port_name_prefix

    @property
    def listener_type(self):
        """Gets the listener_type of this IstioNetworkingV1alpha3EnvoyFilterDeprecatedListenerMatch.  # noqa: E501


        :return: The listener_type of this IstioNetworkingV1alpha3EnvoyFilterDeprecatedListenerMatch.  # noqa: E501
        :rtype: str
        """
        return self._listener_type

    @listener_type.setter
    def listener_type(self, listener_type):
        """Sets the listener_type of this IstioNetworkingV1alpha3EnvoyFilterDeprecatedListenerMatch.


        :param listener_type: The listener_type of this IstioNetworkingV1alpha3EnvoyFilterDeprecatedListenerMatch.  # noqa: E501
        :type: str
        """
        allowed_values = ["ANY", "SIDECAR_INBOUND", "SIDECAR_OUTBOUND", "GATEWAY"]  # noqa: E501
        if listener_type not in allowed_values:
            raise ValueError(
                "Invalid value for `listener_type` ({0}), must be one of {1}"  # noqa: E501
                .format(listener_type, allowed_values)
            )

        self._listener_type = listener_type

    @property
    def listener_protocol(self):
        """Gets the listener_protocol of this IstioNetworkingV1alpha3EnvoyFilterDeprecatedListenerMatch.  # noqa: E501


        :return: The listener_protocol of this IstioNetworkingV1alpha3EnvoyFilterDeprecatedListenerMatch.  # noqa: E501
        :rtype: str
        """
        return self._listener_protocol

    @listener_protocol.setter
    def listener_protocol(self, listener_protocol):
        """Sets the listener_protocol of this IstioNetworkingV1alpha3EnvoyFilterDeprecatedListenerMatch.


        :param listener_protocol: The listener_protocol of this IstioNetworkingV1alpha3EnvoyFilterDeprecatedListenerMatch.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALL", "HTTP", "TCP"]  # noqa: E501
        if listener_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `listener_protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(listener_protocol, allowed_values)
            )

        self._listener_protocol = listener_protocol

    @property
    def address(self):
        """Gets the address of this IstioNetworkingV1alpha3EnvoyFilterDeprecatedListenerMatch.  # noqa: E501

        One or more IP addresses to which the listener is bound. If specified, should match at least one address in the list.  # noqa: E501

        :return: The address of this IstioNetworkingV1alpha3EnvoyFilterDeprecatedListenerMatch.  # noqa: E501
        :rtype: list[str]
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this IstioNetworkingV1alpha3EnvoyFilterDeprecatedListenerMatch.

        One or more IP addresses to which the listener is bound. If specified, should match at least one address in the list.  # noqa: E501

        :param address: The address of this IstioNetworkingV1alpha3EnvoyFilterDeprecatedListenerMatch.  # noqa: E501
        :type: list[str]
        """

        self._address = address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IstioNetworkingV1alpha3EnvoyFilterDeprecatedListenerMatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
