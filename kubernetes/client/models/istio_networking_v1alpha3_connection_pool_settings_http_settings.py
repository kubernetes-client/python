# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1.15.6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IstioNetworkingV1alpha3ConnectionPoolSettingsHTTPSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'http1_max_pending_requests': 'int',
        'http2_max_requests': 'int',
        'max_requests_per_connection': 'int',
        'max_retries': 'int',
        'idle_timeout': 'str',
        'h2_upgrade_policy': 'str'
    }

    attribute_map = {
        'http1_max_pending_requests': 'http1MaxPendingRequests',
        'http2_max_requests': 'http2MaxRequests',
        'max_requests_per_connection': 'maxRequestsPerConnection',
        'max_retries': 'maxRetries',
        'idle_timeout': 'idleTimeout',
        'h2_upgrade_policy': 'h2UpgradePolicy'
    }

    def __init__(self, http1_max_pending_requests=None, http2_max_requests=None, max_requests_per_connection=None, max_retries=None, idle_timeout=None, h2_upgrade_policy=None):  # noqa: E501
        """IstioNetworkingV1alpha3ConnectionPoolSettingsHTTPSettings - a model defined in OpenAPI"""  # noqa: E501

        self._http1_max_pending_requests = None
        self._http2_max_requests = None
        self._max_requests_per_connection = None
        self._max_retries = None
        self._idle_timeout = None
        self._h2_upgrade_policy = None
        self.discriminator = None

        if http1_max_pending_requests is not None:
            self.http1_max_pending_requests = http1_max_pending_requests
        if http2_max_requests is not None:
            self.http2_max_requests = http2_max_requests
        if max_requests_per_connection is not None:
            self.max_requests_per_connection = max_requests_per_connection
        if max_retries is not None:
            self.max_retries = max_retries
        if idle_timeout is not None:
            self.idle_timeout = idle_timeout
        if h2_upgrade_policy is not None:
            self.h2_upgrade_policy = h2_upgrade_policy

    @property
    def http1_max_pending_requests(self):
        """Gets the http1_max_pending_requests of this IstioNetworkingV1alpha3ConnectionPoolSettingsHTTPSettings.  # noqa: E501

        Maximum number of pending HTTP requests to a destination. Default 2^32-1.  # noqa: E501

        :return: The http1_max_pending_requests of this IstioNetworkingV1alpha3ConnectionPoolSettingsHTTPSettings.  # noqa: E501
        :rtype: int
        """
        return self._http1_max_pending_requests

    @http1_max_pending_requests.setter
    def http1_max_pending_requests(self, http1_max_pending_requests):
        """Sets the http1_max_pending_requests of this IstioNetworkingV1alpha3ConnectionPoolSettingsHTTPSettings.

        Maximum number of pending HTTP requests to a destination. Default 2^32-1.  # noqa: E501

        :param http1_max_pending_requests: The http1_max_pending_requests of this IstioNetworkingV1alpha3ConnectionPoolSettingsHTTPSettings.  # noqa: E501
        :type: int
        """

        self._http1_max_pending_requests = http1_max_pending_requests

    @property
    def http2_max_requests(self):
        """Gets the http2_max_requests of this IstioNetworkingV1alpha3ConnectionPoolSettingsHTTPSettings.  # noqa: E501

        Maximum number of requests to a backend. Default 2^32-1.  # noqa: E501

        :return: The http2_max_requests of this IstioNetworkingV1alpha3ConnectionPoolSettingsHTTPSettings.  # noqa: E501
        :rtype: int
        """
        return self._http2_max_requests

    @http2_max_requests.setter
    def http2_max_requests(self, http2_max_requests):
        """Sets the http2_max_requests of this IstioNetworkingV1alpha3ConnectionPoolSettingsHTTPSettings.

        Maximum number of requests to a backend. Default 2^32-1.  # noqa: E501

        :param http2_max_requests: The http2_max_requests of this IstioNetworkingV1alpha3ConnectionPoolSettingsHTTPSettings.  # noqa: E501
        :type: int
        """

        self._http2_max_requests = http2_max_requests

    @property
    def max_requests_per_connection(self):
        """Gets the max_requests_per_connection of this IstioNetworkingV1alpha3ConnectionPoolSettingsHTTPSettings.  # noqa: E501

        Maximum number of requests per connection to a backend. Setting this parameter to 1 disables keep alive. Default 0, meaning \"unlimited\", up to 2^29.  # noqa: E501

        :return: The max_requests_per_connection of this IstioNetworkingV1alpha3ConnectionPoolSettingsHTTPSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_requests_per_connection

    @max_requests_per_connection.setter
    def max_requests_per_connection(self, max_requests_per_connection):
        """Sets the max_requests_per_connection of this IstioNetworkingV1alpha3ConnectionPoolSettingsHTTPSettings.

        Maximum number of requests per connection to a backend. Setting this parameter to 1 disables keep alive. Default 0, meaning \"unlimited\", up to 2^29.  # noqa: E501

        :param max_requests_per_connection: The max_requests_per_connection of this IstioNetworkingV1alpha3ConnectionPoolSettingsHTTPSettings.  # noqa: E501
        :type: int
        """

        self._max_requests_per_connection = max_requests_per_connection

    @property
    def max_retries(self):
        """Gets the max_retries of this IstioNetworkingV1alpha3ConnectionPoolSettingsHTTPSettings.  # noqa: E501

        Maximum number of retries that can be outstanding to all hosts in a cluster at a given time. Defaults to 2^32-1.  # noqa: E501

        :return: The max_retries of this IstioNetworkingV1alpha3ConnectionPoolSettingsHTTPSettings.  # noqa: E501
        :rtype: int
        """
        return self._max_retries

    @max_retries.setter
    def max_retries(self, max_retries):
        """Sets the max_retries of this IstioNetworkingV1alpha3ConnectionPoolSettingsHTTPSettings.

        Maximum number of retries that can be outstanding to all hosts in a cluster at a given time. Defaults to 2^32-1.  # noqa: E501

        :param max_retries: The max_retries of this IstioNetworkingV1alpha3ConnectionPoolSettingsHTTPSettings.  # noqa: E501
        :type: int
        """

        self._max_retries = max_retries

    @property
    def idle_timeout(self):
        """Gets the idle_timeout of this IstioNetworkingV1alpha3ConnectionPoolSettingsHTTPSettings.  # noqa: E501

        The idle timeout for upstream connection pool connections. The idle timeout is defined as the period in which there are no active requests. If not set, the default is 1 hour. When the idle timeout is reached the connection will be closed. Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive. Applies to both HTTP1.1 and HTTP2 connections.  # noqa: E501

        :return: The idle_timeout of this IstioNetworkingV1alpha3ConnectionPoolSettingsHTTPSettings.  # noqa: E501
        :rtype: str
        """
        return self._idle_timeout

    @idle_timeout.setter
    def idle_timeout(self, idle_timeout):
        """Sets the idle_timeout of this IstioNetworkingV1alpha3ConnectionPoolSettingsHTTPSettings.

        The idle timeout for upstream connection pool connections. The idle timeout is defined as the period in which there are no active requests. If not set, the default is 1 hour. When the idle timeout is reached the connection will be closed. Note that request based timeouts mean that HTTP/2 PINGs will not keep the connection alive. Applies to both HTTP1.1 and HTTP2 connections.  # noqa: E501

        :param idle_timeout: The idle_timeout of this IstioNetworkingV1alpha3ConnectionPoolSettingsHTTPSettings.  # noqa: E501
        :type: str
        """

        self._idle_timeout = idle_timeout

    @property
    def h2_upgrade_policy(self):
        """Gets the h2_upgrade_policy of this IstioNetworkingV1alpha3ConnectionPoolSettingsHTTPSettings.  # noqa: E501

        Policy for upgrading http1.1 connections to http2.  # noqa: E501

        :return: The h2_upgrade_policy of this IstioNetworkingV1alpha3ConnectionPoolSettingsHTTPSettings.  # noqa: E501
        :rtype: str
        """
        return self._h2_upgrade_policy

    @h2_upgrade_policy.setter
    def h2_upgrade_policy(self, h2_upgrade_policy):
        """Sets the h2_upgrade_policy of this IstioNetworkingV1alpha3ConnectionPoolSettingsHTTPSettings.

        Policy for upgrading http1.1 connections to http2.  # noqa: E501

        :param h2_upgrade_policy: The h2_upgrade_policy of this IstioNetworkingV1alpha3ConnectionPoolSettingsHTTPSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEFAULT", "DO_NOT_UPGRADE", "UPGRADE"]  # noqa: E501
        if h2_upgrade_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `h2_upgrade_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(h2_upgrade_policy, allowed_values)
            )

        self._h2_upgrade_policy = h2_upgrade_policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IstioNetworkingV1alpha3ConnectionPoolSettingsHTTPSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
