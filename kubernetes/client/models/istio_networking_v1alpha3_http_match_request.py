# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1.15.6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IstioNetworkingV1alpha3HTTPMatchRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'method': 'object',
        'port': 'int',
        'gateways': 'list[str]',
        'headers': 'dict(str, dict(str, str))',
        'uri': 'dict(str, str)',
        'scheme': 'dict(str, str)',
        'authority': 'dict(str, str)',
        'source_labels': 'dict(str, str)',
        '_query_params': 'dict(str, object)',
        'ignore_uri_case': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'method': 'method',
        'port': 'port',
        'gateways': 'gateways',
        'headers': 'headers',
        'uri': 'uri',
        'scheme': 'scheme',
        'authority': 'authority',
        'source_labels': 'sourceLabels',
        '_query_params': 'queryParams',
        'ignore_uri_case': 'ignoreUriCase'
    }

    def __init__(self, name=None, method=None, port=None, gateways=None, headers=None, uri=None, scheme=None, authority=None, source_labels=None, _query_params=None, ignore_uri_case=None):  # noqa: E501
        """IstioNetworkingV1alpha3HTTPMatchRequest - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._method = None
        self._port = None
        self._gateways = None
        self._headers = None
        self._uri = None
        self._scheme = None
        self._authority = None
        self._source_labels = None
        self.__query_params = None
        self._ignore_uri_case = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if method is not None:
            self.method = method
        if port is not None:
            self.port = port
        if gateways is not None:
            self.gateways = gateways
        if headers is not None:
            self.headers = headers
        if uri is not None:
            self.uri = uri
        if scheme is not None:
            self.scheme = scheme
        if authority is not None:
            self.authority = authority
        if source_labels is not None:
            self.source_labels = source_labels
        if _query_params is not None:
            self._query_params = _query_params
        if ignore_uri_case is not None:
            self.ignore_uri_case = ignore_uri_case

    @property
    def name(self):
        """Gets the name of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501

        The name assigned to a match. The match's name will be concatenated with the parent route's name and will be logged in the access logs for requests matching this route.  # noqa: E501

        :return: The name of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IstioNetworkingV1alpha3HTTPMatchRequest.

        The name assigned to a match. The match's name will be concatenated with the parent route's name and will be logged in the access logs for requests matching this route.  # noqa: E501

        :param name: The name of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def method(self):
        """Gets the method of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501

        Describes how to match a given string in HTTP headers. Match is case-sensitive.  # noqa: E501

        :return: The method of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501
        :rtype: object
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this IstioNetworkingV1alpha3HTTPMatchRequest.

        Describes how to match a given string in HTTP headers. Match is case-sensitive.  # noqa: E501

        :param method: The method of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501
        :type: object
        """

        self._method = method

    @property
    def port(self):
        """Gets the port of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501

        Specifies the ports on the host that is being addressed. Many services only expose a single port or label ports with the protocols they support, in these cases it is not required to explicitly select the port.  # noqa: E501

        :return: The port of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this IstioNetworkingV1alpha3HTTPMatchRequest.

        Specifies the ports on the host that is being addressed. Many services only expose a single port or label ports with the protocols they support, in these cases it is not required to explicitly select the port.  # noqa: E501

        :param port: The port of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def gateways(self):
        """Gets the gateways of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501

        Names of gateways where the rule should be applied. Gateway names in the top-level `gateways` field of the VirtualService (if any) are overridden. The gateway match is independent of sourceLabels.  # noqa: E501

        :return: The gateways of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._gateways

    @gateways.setter
    def gateways(self, gateways):
        """Sets the gateways of this IstioNetworkingV1alpha3HTTPMatchRequest.

        Names of gateways where the rule should be applied. Gateway names in the top-level `gateways` field of the VirtualService (if any) are overridden. The gateway match is independent of sourceLabels.  # noqa: E501

        :param gateways: The gateways of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501
        :type: list[str]
        """

        self._gateways = gateways

    @property
    def headers(self):
        """Gets the headers of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501

        The header keys must be lowercase and use hyphen as the separator, e.g. _x-request-id_.  # noqa: E501

        :return: The headers of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501
        :rtype: dict(str, dict(str, str))
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this IstioNetworkingV1alpha3HTTPMatchRequest.

        The header keys must be lowercase and use hyphen as the separator, e.g. _x-request-id_.  # noqa: E501

        :param headers: The headers of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501
        :type: dict(str, dict(str, str))
        """

        self._headers = headers

    @property
    def uri(self):
        """Gets the uri of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501

        Avaliable key: exact, prefix, regex  # noqa: E501

        :return: The uri of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this IstioNetworkingV1alpha3HTTPMatchRequest.

        Avaliable key: exact, prefix, regex  # noqa: E501

        :param uri: The uri of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501
        :type: dict(str, str)
        """

        self._uri = uri

    @property
    def scheme(self):
        """Gets the scheme of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501

        Avaliable key: exact, prefix, regex  # noqa: E501

        :return: The scheme of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this IstioNetworkingV1alpha3HTTPMatchRequest.

        Avaliable key: exact, prefix, regex  # noqa: E501

        :param scheme: The scheme of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501
        :type: dict(str, str)
        """

        self._scheme = scheme

    @property
    def authority(self):
        """Gets the authority of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501

        Avaliable key: exact, prefix, regex  # noqa: E501

        :return: The authority of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._authority

    @authority.setter
    def authority(self, authority):
        """Sets the authority of this IstioNetworkingV1alpha3HTTPMatchRequest.

        Avaliable key: exact, prefix, regex  # noqa: E501

        :param authority: The authority of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501
        :type: dict(str, str)
        """

        self._authority = authority

    @property
    def source_labels(self):
        """Gets the source_labels of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501

        One or more labels that constrain the applicability of a rule to workloads with the given labels. If the VirtualService has a list of gateways specified in the top-level `gateways` field, it must include the reserved gateway `mesh` for this field to be applicable.  # noqa: E501

        :return: The source_labels of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._source_labels

    @source_labels.setter
    def source_labels(self, source_labels):
        """Sets the source_labels of this IstioNetworkingV1alpha3HTTPMatchRequest.

        One or more labels that constrain the applicability of a rule to workloads with the given labels. If the VirtualService has a list of gateways specified in the top-level `gateways` field, it must include the reserved gateway `mesh` for this field to be applicable.  # noqa: E501

        :param source_labels: The source_labels of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501
        :type: dict(str, str)
        """

        self._source_labels = source_labels

    @property
    def _query_params(self):
        """Gets the _query_params of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501

        Query parameters for matching.  # noqa: E501

        :return: The _query_params of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self.__query_params

    @_query_params.setter
    def _query_params(self, _query_params):
        """Sets the _query_params of this IstioNetworkingV1alpha3HTTPMatchRequest.

        Query parameters for matching.  # noqa: E501

        :param _query_params: The _query_params of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501
        :type: dict(str, object)
        """

        self.__query_params = _query_params

    @property
    def ignore_uri_case(self):
        """Gets the ignore_uri_case of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501

        Flag to specify whether the URI matching should be case-insensitive.  # noqa: E501

        :return: The ignore_uri_case of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_uri_case

    @ignore_uri_case.setter
    def ignore_uri_case(self, ignore_uri_case):
        """Sets the ignore_uri_case of this IstioNetworkingV1alpha3HTTPMatchRequest.

        Flag to specify whether the URI matching should be case-insensitive.  # noqa: E501

        :param ignore_uri_case: The ignore_uri_case of this IstioNetworkingV1alpha3HTTPMatchRequest.  # noqa: E501
        :type: bool
        """

        self._ignore_uri_case = ignore_uri_case

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IstioNetworkingV1alpha3HTTPMatchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
