# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1.15.6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IstioNetworkingV1alpha3Port(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'number': 'int',
        'protocol': 'str'
    }

    attribute_map = {
        'name': 'name',
        'number': 'number',
        'protocol': 'protocol'
    }

    def __init__(self, name=None, number=None, protocol=None):  # noqa: E501
        """IstioNetworkingV1alpha3Port - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._number = None
        self._protocol = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if number is not None:
            self.number = number
        if protocol is not None:
            self.protocol = protocol

    @property
    def name(self):
        """Gets the name of this IstioNetworkingV1alpha3Port.  # noqa: E501

        Label assigned to the port.  # noqa: E501

        :return: The name of this IstioNetworkingV1alpha3Port.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IstioNetworkingV1alpha3Port.

        Label assigned to the port.  # noqa: E501

        :param name: The name of this IstioNetworkingV1alpha3Port.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this IstioNetworkingV1alpha3Port.  # noqa: E501

        A valid non-negative integer port number.  # noqa: E501

        :return: The number of this IstioNetworkingV1alpha3Port.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this IstioNetworkingV1alpha3Port.

        A valid non-negative integer port number.  # noqa: E501

        :param number: The number of this IstioNetworkingV1alpha3Port.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def protocol(self):
        """Gets the protocol of this IstioNetworkingV1alpha3Port.  # noqa: E501

        The protocol exposed on the port. MUST BE one of HTTP|HTTPS|GRPC|HTTP2|MONGO|TCP|TLS. TLS implies the connection will be routed based on the SNI header to the destination without terminating the TLS connection.  # noqa: E501

        :return: The protocol of this IstioNetworkingV1alpha3Port.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this IstioNetworkingV1alpha3Port.

        The protocol exposed on the port. MUST BE one of HTTP|HTTPS|GRPC|HTTP2|MONGO|TCP|TLS. TLS implies the connection will be routed based on the SNI header to the destination without terminating the TLS connection.  # noqa: E501

        :param protocol: The protocol of this IstioNetworkingV1alpha3Port.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IstioNetworkingV1alpha3Port):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
