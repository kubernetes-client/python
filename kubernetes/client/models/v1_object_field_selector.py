# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1.7.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1ObjectFieldSelector(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, api_version=None, field_path=None):
        """
        V1ObjectFieldSelector - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'api_version': 'str',
            'field_path': 'str'
        }

        self.attribute_map = {
            'api_version': 'apiVersion',
            'field_path': 'fieldPath'
        }

        self._api_version = api_version
        self._field_path = field_path

    @property
    def api_version(self):
        """
        Gets the api_version of this V1ObjectFieldSelector.
        Version of the schema the FieldPath is written in terms of, defaults to \"v1\".

        :return: The api_version of this V1ObjectFieldSelector.
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """
        Sets the api_version of this V1ObjectFieldSelector.
        Version of the schema the FieldPath is written in terms of, defaults to \"v1\".

        :param api_version: The api_version of this V1ObjectFieldSelector.
        :type: str
        """

        self._api_version = api_version

    @property
    def field_path(self):
        """
        Gets the field_path of this V1ObjectFieldSelector.
        Path of the field to select in the specified API version.

        :return: The field_path of this V1ObjectFieldSelector.
        :rtype: str
        """
        return self._field_path

    @field_path.setter
    def field_path(self, field_path):
        """
        Sets the field_path of this V1ObjectFieldSelector.
        Path of the field to select in the specified API version.

        :param field_path: The field_path of this V1ObjectFieldSelector.
        :type: str
        """
        if field_path is None:
            raise ValueError("Invalid value for `field_path`, must not be `None`")

        self._field_path = field_path

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1ObjectFieldSelector):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
