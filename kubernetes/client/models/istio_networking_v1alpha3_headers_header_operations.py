# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1.15.6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IstioNetworkingV1alpha3HeadersHeaderOperations(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'set': 'dict(str, str)',
        'add': 'dict(str, str)',
        'remove': 'list[str]'
    }

    attribute_map = {
        'set': 'set',
        'add': 'add',
        'remove': 'remove'
    }

    def __init__(self, set=None, add=None, remove=None):  # noqa: E501
        """IstioNetworkingV1alpha3HeadersHeaderOperations - a model defined in OpenAPI"""  # noqa: E501

        self._set = None
        self._add = None
        self._remove = None
        self.discriminator = None

        if set is not None:
            self.set = set
        if add is not None:
            self.add = add
        if remove is not None:
            self.remove = remove

    @property
    def set(self):
        """Gets the set of this IstioNetworkingV1alpha3HeadersHeaderOperations.  # noqa: E501

        Overwrite the headers specified by key with the given values  # noqa: E501

        :return: The set of this IstioNetworkingV1alpha3HeadersHeaderOperations.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._set

    @set.setter
    def set(self, set):
        """Sets the set of this IstioNetworkingV1alpha3HeadersHeaderOperations.

        Overwrite the headers specified by key with the given values  # noqa: E501

        :param set: The set of this IstioNetworkingV1alpha3HeadersHeaderOperations.  # noqa: E501
        :type: dict(str, str)
        """

        self._set = set

    @property
    def add(self):
        """Gets the add of this IstioNetworkingV1alpha3HeadersHeaderOperations.  # noqa: E501

        Append the given values to the headers specified by keys (will create a comma-separated list of values)  # noqa: E501

        :return: The add of this IstioNetworkingV1alpha3HeadersHeaderOperations.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._add

    @add.setter
    def add(self, add):
        """Sets the add of this IstioNetworkingV1alpha3HeadersHeaderOperations.

        Append the given values to the headers specified by keys (will create a comma-separated list of values)  # noqa: E501

        :param add: The add of this IstioNetworkingV1alpha3HeadersHeaderOperations.  # noqa: E501
        :type: dict(str, str)
        """

        self._add = add

    @property
    def remove(self):
        """Gets the remove of this IstioNetworkingV1alpha3HeadersHeaderOperations.  # noqa: E501

        Remove a the specified headers  # noqa: E501

        :return: The remove of this IstioNetworkingV1alpha3HeadersHeaderOperations.  # noqa: E501
        :rtype: list[str]
        """
        return self._remove

    @remove.setter
    def remove(self, remove):
        """Sets the remove of this IstioNetworkingV1alpha3HeadersHeaderOperations.

        Remove a the specified headers  # noqa: E501

        :param remove: The remove of this IstioNetworkingV1alpha3HeadersHeaderOperations.  # noqa: E501
        :type: list[str]
        """

        self._remove = remove

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IstioNetworkingV1alpha3HeadersHeaderOperations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
