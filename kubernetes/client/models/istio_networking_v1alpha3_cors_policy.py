# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1.15.6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IstioNetworkingV1alpha3CorsPolicy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'allow_origin': 'list[str]',
        'allow_methods': 'list[str]',
        'allow_headers': 'list[str]',
        'expose_headers': 'list[str]',
        'max_age': 'str',
        'allow_credentials': 'bool'
    }

    attribute_map = {
        'allow_origin': 'allowOrigin',
        'allow_methods': 'allowMethods',
        'allow_headers': 'allowHeaders',
        'expose_headers': 'exposeHeaders',
        'max_age': 'maxAge',
        'allow_credentials': 'allowCredentials'
    }

    def __init__(self, allow_origin=None, allow_methods=None, allow_headers=None, expose_headers=None, max_age=None, allow_credentials=None):  # noqa: E501
        """IstioNetworkingV1alpha3CorsPolicy - a model defined in OpenAPI"""  # noqa: E501

        self._allow_origin = None
        self._allow_methods = None
        self._allow_headers = None
        self._expose_headers = None
        self._max_age = None
        self._allow_credentials = None
        self.discriminator = None

        if allow_origin is not None:
            self.allow_origin = allow_origin
        if allow_methods is not None:
            self.allow_methods = allow_methods
        if allow_headers is not None:
            self.allow_headers = allow_headers
        if expose_headers is not None:
            self.expose_headers = expose_headers
        if max_age is not None:
            self.max_age = max_age
        if allow_credentials is not None:
            self.allow_credentials = allow_credentials

    @property
    def allow_origin(self):
        """Gets the allow_origin of this IstioNetworkingV1alpha3CorsPolicy.  # noqa: E501

        The list of origins that are allowed to perform CORS requests. The content will be serialized into the Access-Control-Allow-Origin header. Wildcard * will allow all origins.  # noqa: E501

        :return: The allow_origin of this IstioNetworkingV1alpha3CorsPolicy.  # noqa: E501
        :rtype: list[str]
        """
        return self._allow_origin

    @allow_origin.setter
    def allow_origin(self, allow_origin):
        """Sets the allow_origin of this IstioNetworkingV1alpha3CorsPolicy.

        The list of origins that are allowed to perform CORS requests. The content will be serialized into the Access-Control-Allow-Origin header. Wildcard * will allow all origins.  # noqa: E501

        :param allow_origin: The allow_origin of this IstioNetworkingV1alpha3CorsPolicy.  # noqa: E501
        :type: list[str]
        """

        self._allow_origin = allow_origin

    @property
    def allow_methods(self):
        """Gets the allow_methods of this IstioNetworkingV1alpha3CorsPolicy.  # noqa: E501

        List of HTTP methods allowed to access the resource. The content will be serialized into the Access-Control-Allow-Methods header.  # noqa: E501

        :return: The allow_methods of this IstioNetworkingV1alpha3CorsPolicy.  # noqa: E501
        :rtype: list[str]
        """
        return self._allow_methods

    @allow_methods.setter
    def allow_methods(self, allow_methods):
        """Sets the allow_methods of this IstioNetworkingV1alpha3CorsPolicy.

        List of HTTP methods allowed to access the resource. The content will be serialized into the Access-Control-Allow-Methods header.  # noqa: E501

        :param allow_methods: The allow_methods of this IstioNetworkingV1alpha3CorsPolicy.  # noqa: E501
        :type: list[str]
        """

        self._allow_methods = allow_methods

    @property
    def allow_headers(self):
        """Gets the allow_headers of this IstioNetworkingV1alpha3CorsPolicy.  # noqa: E501

        List of HTTP headers that can be used when requesting the resource. Serialized to Access-Control-Allow-Headers header.  # noqa: E501

        :return: The allow_headers of this IstioNetworkingV1alpha3CorsPolicy.  # noqa: E501
        :rtype: list[str]
        """
        return self._allow_headers

    @allow_headers.setter
    def allow_headers(self, allow_headers):
        """Sets the allow_headers of this IstioNetworkingV1alpha3CorsPolicy.

        List of HTTP headers that can be used when requesting the resource. Serialized to Access-Control-Allow-Headers header.  # noqa: E501

        :param allow_headers: The allow_headers of this IstioNetworkingV1alpha3CorsPolicy.  # noqa: E501
        :type: list[str]
        """

        self._allow_headers = allow_headers

    @property
    def expose_headers(self):
        """Gets the expose_headers of this IstioNetworkingV1alpha3CorsPolicy.  # noqa: E501

        A white list of HTTP headers that the browsers are allowed to access. Serialized into Access-Control-Expose-Headers header.  # noqa: E501

        :return: The expose_headers of this IstioNetworkingV1alpha3CorsPolicy.  # noqa: E501
        :rtype: list[str]
        """
        return self._expose_headers

    @expose_headers.setter
    def expose_headers(self, expose_headers):
        """Sets the expose_headers of this IstioNetworkingV1alpha3CorsPolicy.

        A white list of HTTP headers that the browsers are allowed to access. Serialized into Access-Control-Expose-Headers header.  # noqa: E501

        :param expose_headers: The expose_headers of this IstioNetworkingV1alpha3CorsPolicy.  # noqa: E501
        :type: list[str]
        """

        self._expose_headers = expose_headers

    @property
    def max_age(self):
        """Gets the max_age of this IstioNetworkingV1alpha3CorsPolicy.  # noqa: E501

        Specifies how long the results of a preflight request can be cached. Translates to the `Access-Control-Max-Age` header.  # noqa: E501

        :return: The max_age of this IstioNetworkingV1alpha3CorsPolicy.  # noqa: E501
        :rtype: str
        """
        return self._max_age

    @max_age.setter
    def max_age(self, max_age):
        """Sets the max_age of this IstioNetworkingV1alpha3CorsPolicy.

        Specifies how long the results of a preflight request can be cached. Translates to the `Access-Control-Max-Age` header.  # noqa: E501

        :param max_age: The max_age of this IstioNetworkingV1alpha3CorsPolicy.  # noqa: E501
        :type: str
        """

        self._max_age = max_age

    @property
    def allow_credentials(self):
        """Gets the allow_credentials of this IstioNetworkingV1alpha3CorsPolicy.  # noqa: E501

        Indicates whether the caller is allowed to send the actual request (not the preflight) using credentials. Translates to `Access-Control-Allow-Credentials` header.  # noqa: E501

        :return: The allow_credentials of this IstioNetworkingV1alpha3CorsPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._allow_credentials

    @allow_credentials.setter
    def allow_credentials(self, allow_credentials):
        """Sets the allow_credentials of this IstioNetworkingV1alpha3CorsPolicy.

        Indicates whether the caller is allowed to send the actual request (not the preflight) using credentials. Translates to `Access-Control-Allow-Credentials` header.  # noqa: E501

        :param allow_credentials: The allow_credentials of this IstioNetworkingV1alpha3CorsPolicy.  # noqa: E501
        :type: bool
        """

        self._allow_credentials = allow_credentials

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IstioNetworkingV1alpha3CorsPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
