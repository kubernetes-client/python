# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1.14.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class V1beta1CSINodeSpec(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'drivers': 'list[V1beta1CSINodeDriver]'
    }

    attribute_map = {
        'drivers': 'drivers'
    }

    def __init__(self, drivers=None):
        """
        V1beta1CSINodeSpec - a model defined in Swagger
        """

        self._drivers = None
        self.discriminator = None

        self.drivers = drivers

    @property
    def drivers(self):
        """
        Gets the drivers of this V1beta1CSINodeSpec.
        drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.

        :return: The drivers of this V1beta1CSINodeSpec.
        :rtype: list[V1beta1CSINodeDriver]
        """
        return self._drivers

    @drivers.setter
    def drivers(self, drivers):
        """
        Sets the drivers of this V1beta1CSINodeSpec.
        drivers is a list of information of all CSI Drivers existing on a node. If all drivers in the list are uninstalled, this can become empty.

        :param drivers: The drivers of this V1beta1CSINodeSpec.
        :type: list[V1beta1CSINodeDriver]
        """
        if drivers is None:
            raise ValueError("Invalid value for `drivers`, must not be `None`")

        self._drivers = drivers

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, V1beta1CSINodeSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
