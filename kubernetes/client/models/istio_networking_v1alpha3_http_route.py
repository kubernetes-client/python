# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1.15.6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IstioNetworkingV1alpha3HTTPRoute(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'route': 'list[IstioNetworkingV1alpha3HTTPRouteDestination]',
        'match': 'list[IstioNetworkingV1alpha3HTTPMatchRequest]',
        'redirect': 'IstioNetworkingV1alpha3HTTPRedirect',
        'rewrite': 'IstioNetworkingV1alpha3HTTPRewrite',
        'websocket_upgrade': 'bool',
        'timeout': 'str',
        'retries': 'IstioNetworkingV1alpha3HTTPRetry',
        'fault': 'IstioNetworkingV1alpha3HTTPFaultInjection',
        'mirror': 'IstioNetworkingV1alpha3Destination',
        'mirror_percent': 'int',
        'mirror_percentage': 'IstioNetworkingV1alpha3Percent',
        'cors_policy': 'IstioNetworkingV1alpha3CorsPolicy',
        'append_headers': 'dict(str, str)',
        'remove_response_headers': 'list[str]',
        'append_response_headers': 'dict(str, str)',
        'remove_request_headers': 'list[str]',
        'append_request_headers': 'dict(str, str)',
        'headers': 'IstioNetworkingV1alpha3Headers'
    }

    attribute_map = {
        'name': 'name',
        'route': 'route',
        'match': 'match',
        'redirect': 'redirect',
        'rewrite': 'rewrite',
        'websocket_upgrade': 'websocketUpgrade',
        'timeout': 'timeout',
        'retries': 'retries',
        'fault': 'fault',
        'mirror': 'mirror',
        'mirror_percent': 'mirrorPercent',
        'mirror_percentage': 'mirrorPercentage',
        'cors_policy': 'corsPolicy',
        'append_headers': 'appendHeaders',
        'remove_response_headers': 'removeResponseHeaders',
        'append_response_headers': 'appendResponseHeaders',
        'remove_request_headers': 'removeRequestHeaders',
        'append_request_headers': 'appendRequestHeaders',
        'headers': 'headers'
    }

    def __init__(self, name=None, route=None, match=None, redirect=None, rewrite=None, websocket_upgrade=None, timeout=None, retries=None, fault=None, mirror=None, mirror_percent=None, mirror_percentage=None, cors_policy=None, append_headers=None, remove_response_headers=None, append_response_headers=None, remove_request_headers=None, append_request_headers=None, headers=None):  # noqa: E501
        """IstioNetworkingV1alpha3HTTPRoute - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._route = None
        self._match = None
        self._redirect = None
        self._rewrite = None
        self._websocket_upgrade = None
        self._timeout = None
        self._retries = None
        self._fault = None
        self._mirror = None
        self._mirror_percent = None
        self._mirror_percentage = None
        self._cors_policy = None
        self._append_headers = None
        self._remove_response_headers = None
        self._append_response_headers = None
        self._remove_request_headers = None
        self._append_request_headers = None
        self._headers = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if route is not None:
            self.route = route
        if match is not None:
            self.match = match
        if redirect is not None:
            self.redirect = redirect
        if rewrite is not None:
            self.rewrite = rewrite
        if websocket_upgrade is not None:
            self.websocket_upgrade = websocket_upgrade
        if timeout is not None:
            self.timeout = timeout
        if retries is not None:
            self.retries = retries
        if fault is not None:
            self.fault = fault
        if mirror is not None:
            self.mirror = mirror
        if mirror_percent is not None:
            self.mirror_percent = mirror_percent
        if mirror_percentage is not None:
            self.mirror_percentage = mirror_percentage
        if cors_policy is not None:
            self.cors_policy = cors_policy
        if append_headers is not None:
            self.append_headers = append_headers
        if remove_response_headers is not None:
            self.remove_response_headers = remove_response_headers
        if append_response_headers is not None:
            self.append_response_headers = append_response_headers
        if remove_request_headers is not None:
            self.remove_request_headers = remove_request_headers
        if append_request_headers is not None:
            self.append_request_headers = append_request_headers
        if headers is not None:
            self.headers = headers

    @property
    def name(self):
        """Gets the name of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501

        The name assigned to the route for debugging purposes. The route's name will be concatenated with the match's name and will be logged in the access logs for requests matching this route/match.  # noqa: E501

        :return: The name of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IstioNetworkingV1alpha3HTTPRoute.

        The name assigned to the route for debugging purposes. The route's name will be concatenated with the match's name and will be logged in the access logs for requests matching this route/match.  # noqa: E501

        :param name: The name of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def route(self):
        """Gets the route of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501

        A HTTP rule can either redirect or forward (default) traffic. The forwarding target can be one of several versions of a service (see glossary in beginning of document). Weights associated with the service version determine the proportion of traffic it receives.  # noqa: E501

        :return: The route of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :rtype: list[IstioNetworkingV1alpha3HTTPRouteDestination]
        """
        return self._route

    @route.setter
    def route(self, route):
        """Sets the route of this IstioNetworkingV1alpha3HTTPRoute.

        A HTTP rule can either redirect or forward (default) traffic. The forwarding target can be one of several versions of a service (see glossary in beginning of document). Weights associated with the service version determine the proportion of traffic it receives.  # noqa: E501

        :param route: The route of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :type: list[IstioNetworkingV1alpha3HTTPRouteDestination]
        """

        self._route = route

    @property
    def match(self):
        """Gets the match of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501

        Match conditions to be satisfied for the rule to be activated. All conditions inside a single match block have AND semantics, while the list of match blocks have OR semantics. The rule is matched if any one of the match blocks succeed.  # noqa: E501

        :return: The match of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :rtype: list[IstioNetworkingV1alpha3HTTPMatchRequest]
        """
        return self._match

    @match.setter
    def match(self, match):
        """Sets the match of this IstioNetworkingV1alpha3HTTPRoute.

        Match conditions to be satisfied for the rule to be activated. All conditions inside a single match block have AND semantics, while the list of match blocks have OR semantics. The rule is matched if any one of the match blocks succeed.  # noqa: E501

        :param match: The match of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :type: list[IstioNetworkingV1alpha3HTTPMatchRequest]
        """

        self._match = match

    @property
    def redirect(self):
        """Gets the redirect of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501


        :return: The redirect of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :rtype: IstioNetworkingV1alpha3HTTPRedirect
        """
        return self._redirect

    @redirect.setter
    def redirect(self, redirect):
        """Sets the redirect of this IstioNetworkingV1alpha3HTTPRoute.


        :param redirect: The redirect of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :type: IstioNetworkingV1alpha3HTTPRedirect
        """

        self._redirect = redirect

    @property
    def rewrite(self):
        """Gets the rewrite of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501


        :return: The rewrite of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :rtype: IstioNetworkingV1alpha3HTTPRewrite
        """
        return self._rewrite

    @rewrite.setter
    def rewrite(self, rewrite):
        """Sets the rewrite of this IstioNetworkingV1alpha3HTTPRoute.


        :param rewrite: The rewrite of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :type: IstioNetworkingV1alpha3HTTPRewrite
        """

        self._rewrite = rewrite

    @property
    def websocket_upgrade(self):
        """Gets the websocket_upgrade of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501

        Deprecated. Websocket upgrades are done automatically starting from Istio 1.0. $hide_from_docs  # noqa: E501

        :return: The websocket_upgrade of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :rtype: bool
        """
        return self._websocket_upgrade

    @websocket_upgrade.setter
    def websocket_upgrade(self, websocket_upgrade):
        """Sets the websocket_upgrade of this IstioNetworkingV1alpha3HTTPRoute.

        Deprecated. Websocket upgrades are done automatically starting from Istio 1.0. $hide_from_docs  # noqa: E501

        :param websocket_upgrade: The websocket_upgrade of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :type: bool
        """

        self._websocket_upgrade = websocket_upgrade

    @property
    def timeout(self):
        """Gets the timeout of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501

        Timeout for HTTP requests.  # noqa: E501

        :return: The timeout of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :rtype: str
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this IstioNetworkingV1alpha3HTTPRoute.

        Timeout for HTTP requests.  # noqa: E501

        :param timeout: The timeout of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :type: str
        """

        self._timeout = timeout

    @property
    def retries(self):
        """Gets the retries of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501


        :return: The retries of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :rtype: IstioNetworkingV1alpha3HTTPRetry
        """
        return self._retries

    @retries.setter
    def retries(self, retries):
        """Sets the retries of this IstioNetworkingV1alpha3HTTPRoute.


        :param retries: The retries of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :type: IstioNetworkingV1alpha3HTTPRetry
        """

        self._retries = retries

    @property
    def fault(self):
        """Gets the fault of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501


        :return: The fault of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :rtype: IstioNetworkingV1alpha3HTTPFaultInjection
        """
        return self._fault

    @fault.setter
    def fault(self, fault):
        """Sets the fault of this IstioNetworkingV1alpha3HTTPRoute.


        :param fault: The fault of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :type: IstioNetworkingV1alpha3HTTPFaultInjection
        """

        self._fault = fault

    @property
    def mirror(self):
        """Gets the mirror of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501


        :return: The mirror of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :rtype: IstioNetworkingV1alpha3Destination
        """
        return self._mirror

    @mirror.setter
    def mirror(self, mirror):
        """Sets the mirror of this IstioNetworkingV1alpha3HTTPRoute.


        :param mirror: The mirror of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :type: IstioNetworkingV1alpha3Destination
        """

        self._mirror = mirror

    @property
    def mirror_percent(self):
        """Gets the mirror_percent of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501

        Percentage of the traffic to be mirrored by the `mirror` field. Use of integer `mirror_percent` value is deprecated. Use the double `mirror_percentage` field instead  # noqa: E501

        :return: The mirror_percent of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :rtype: int
        """
        return self._mirror_percent

    @mirror_percent.setter
    def mirror_percent(self, mirror_percent):
        """Sets the mirror_percent of this IstioNetworkingV1alpha3HTTPRoute.

        Percentage of the traffic to be mirrored by the `mirror` field. Use of integer `mirror_percent` value is deprecated. Use the double `mirror_percentage` field instead  # noqa: E501

        :param mirror_percent: The mirror_percent of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :type: int
        """

        self._mirror_percent = mirror_percent

    @property
    def mirror_percentage(self):
        """Gets the mirror_percentage of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501


        :return: The mirror_percentage of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :rtype: IstioNetworkingV1alpha3Percent
        """
        return self._mirror_percentage

    @mirror_percentage.setter
    def mirror_percentage(self, mirror_percentage):
        """Sets the mirror_percentage of this IstioNetworkingV1alpha3HTTPRoute.


        :param mirror_percentage: The mirror_percentage of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :type: IstioNetworkingV1alpha3Percent
        """

        self._mirror_percentage = mirror_percentage

    @property
    def cors_policy(self):
        """Gets the cors_policy of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501


        :return: The cors_policy of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :rtype: IstioNetworkingV1alpha3CorsPolicy
        """
        return self._cors_policy

    @cors_policy.setter
    def cors_policy(self, cors_policy):
        """Sets the cors_policy of this IstioNetworkingV1alpha3HTTPRoute.


        :param cors_policy: The cors_policy of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :type: IstioNetworkingV1alpha3CorsPolicy
        """

        self._cors_policy = cors_policy

    @property
    def append_headers(self):
        """Gets the append_headers of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501


        :return: The append_headers of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._append_headers

    @append_headers.setter
    def append_headers(self, append_headers):
        """Sets the append_headers of this IstioNetworkingV1alpha3HTTPRoute.


        :param append_headers: The append_headers of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :type: dict(str, str)
        """

        self._append_headers = append_headers

    @property
    def remove_response_headers(self):
        """Gets the remove_response_headers of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501


        :return: The remove_response_headers of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :rtype: list[str]
        """
        return self._remove_response_headers

    @remove_response_headers.setter
    def remove_response_headers(self, remove_response_headers):
        """Sets the remove_response_headers of this IstioNetworkingV1alpha3HTTPRoute.


        :param remove_response_headers: The remove_response_headers of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :type: list[str]
        """

        self._remove_response_headers = remove_response_headers

    @property
    def append_response_headers(self):
        """Gets the append_response_headers of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501


        :return: The append_response_headers of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._append_response_headers

    @append_response_headers.setter
    def append_response_headers(self, append_response_headers):
        """Sets the append_response_headers of this IstioNetworkingV1alpha3HTTPRoute.


        :param append_response_headers: The append_response_headers of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :type: dict(str, str)
        """

        self._append_response_headers = append_response_headers

    @property
    def remove_request_headers(self):
        """Gets the remove_request_headers of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501


        :return: The remove_request_headers of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :rtype: list[str]
        """
        return self._remove_request_headers

    @remove_request_headers.setter
    def remove_request_headers(self, remove_request_headers):
        """Sets the remove_request_headers of this IstioNetworkingV1alpha3HTTPRoute.


        :param remove_request_headers: The remove_request_headers of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :type: list[str]
        """

        self._remove_request_headers = remove_request_headers

    @property
    def append_request_headers(self):
        """Gets the append_request_headers of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501


        :return: The append_request_headers of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._append_request_headers

    @append_request_headers.setter
    def append_request_headers(self, append_request_headers):
        """Sets the append_request_headers of this IstioNetworkingV1alpha3HTTPRoute.


        :param append_request_headers: The append_request_headers of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :type: dict(str, str)
        """

        self._append_request_headers = append_request_headers

    @property
    def headers(self):
        """Gets the headers of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501


        :return: The headers of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :rtype: IstioNetworkingV1alpha3Headers
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this IstioNetworkingV1alpha3HTTPRoute.


        :param headers: The headers of this IstioNetworkingV1alpha3HTTPRoute.  # noqa: E501
        :type: IstioNetworkingV1alpha3Headers
        """

        self._headers = headers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IstioNetworkingV1alpha3HTTPRoute):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
