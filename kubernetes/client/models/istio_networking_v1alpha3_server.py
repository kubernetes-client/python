# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1.15.6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IstioNetworkingV1alpha3Server(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'tls': 'IstioNetworkingV1alpha3ServerTLSOptions',
        'port': 'IstioNetworkingV1alpha3Port',
        'bind': 'str',
        'hosts': 'list[str]',
        'default_endpoint': 'str'
    }

    attribute_map = {
        'tls': 'tls',
        'port': 'port',
        'bind': 'bind',
        'hosts': 'hosts',
        'default_endpoint': 'defaultEndpoint'
    }

    def __init__(self, tls=None, port=None, bind=None, hosts=None, default_endpoint=None):  # noqa: E501
        """IstioNetworkingV1alpha3Server - a model defined in OpenAPI"""  # noqa: E501

        self._tls = None
        self._port = None
        self._bind = None
        self._hosts = None
        self._default_endpoint = None
        self.discriminator = None

        if tls is not None:
            self.tls = tls
        if port is not None:
            self.port = port
        if bind is not None:
            self.bind = bind
        if hosts is not None:
            self.hosts = hosts
        if default_endpoint is not None:
            self.default_endpoint = default_endpoint

    @property
    def tls(self):
        """Gets the tls of this IstioNetworkingV1alpha3Server.  # noqa: E501


        :return: The tls of this IstioNetworkingV1alpha3Server.  # noqa: E501
        :rtype: IstioNetworkingV1alpha3ServerTLSOptions
        """
        return self._tls

    @tls.setter
    def tls(self, tls):
        """Sets the tls of this IstioNetworkingV1alpha3Server.


        :param tls: The tls of this IstioNetworkingV1alpha3Server.  # noqa: E501
        :type: IstioNetworkingV1alpha3ServerTLSOptions
        """

        self._tls = tls

    @property
    def port(self):
        """Gets the port of this IstioNetworkingV1alpha3Server.  # noqa: E501


        :return: The port of this IstioNetworkingV1alpha3Server.  # noqa: E501
        :rtype: IstioNetworkingV1alpha3Port
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this IstioNetworkingV1alpha3Server.


        :param port: The port of this IstioNetworkingV1alpha3Server.  # noqa: E501
        :type: IstioNetworkingV1alpha3Port
        """

        self._port = port

    @property
    def bind(self):
        """Gets the bind of this IstioNetworkingV1alpha3Server.  # noqa: E501

        The ip or the Unix domain socket to which the listener should be bound to. Format: `x.x.x.x` or `unix:///path/to/uds` or `unix://@foobar` (Linux abstract namespace). When using Unix domain sockets, the port number should be 0.  # noqa: E501

        :return: The bind of this IstioNetworkingV1alpha3Server.  # noqa: E501
        :rtype: str
        """
        return self._bind

    @bind.setter
    def bind(self, bind):
        """Sets the bind of this IstioNetworkingV1alpha3Server.

        The ip or the Unix domain socket to which the listener should be bound to. Format: `x.x.x.x` or `unix:///path/to/uds` or `unix://@foobar` (Linux abstract namespace). When using Unix domain sockets, the port number should be 0.  # noqa: E501

        :param bind: The bind of this IstioNetworkingV1alpha3Server.  # noqa: E501
        :type: str
        """

        self._bind = bind

    @property
    def hosts(self):
        """Gets the hosts of this IstioNetworkingV1alpha3Server.  # noqa: E501

        One or more hosts exposed by this gateway. While typically applicable to HTTP services, it can also be used for TCP services using TLS with SNI. A host is specified as a `dnsName` with an optional `namespace/` prefix. The `dnsName` should be specified using FQDN format, optionally including a wildcard character in the left-most component (e.g., `prod/*.example.com`). Set the `dnsName` to `*` to select all `VirtualService` hosts from the specified namespace (e.g.,`prod/*`).  # noqa: E501

        :return: The hosts of this IstioNetworkingV1alpha3Server.  # noqa: E501
        :rtype: list[str]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this IstioNetworkingV1alpha3Server.

        One or more hosts exposed by this gateway. While typically applicable to HTTP services, it can also be used for TCP services using TLS with SNI. A host is specified as a `dnsName` with an optional `namespace/` prefix. The `dnsName` should be specified using FQDN format, optionally including a wildcard character in the left-most component (e.g., `prod/*.example.com`). Set the `dnsName` to `*` to select all `VirtualService` hosts from the specified namespace (e.g.,`prod/*`).  # noqa: E501

        :param hosts: The hosts of this IstioNetworkingV1alpha3Server.  # noqa: E501
        :type: list[str]
        """

        self._hosts = hosts

    @property
    def default_endpoint(self):
        """Gets the default_endpoint of this IstioNetworkingV1alpha3Server.  # noqa: E501

        The loopback IP endpoint or Unix domain socket to which traffic should be forwarded to by default. Format should be `127.0.0.1:PORT` or `unix:///path/to/socket` or `unix://@foobar` (Linux abstract namespace).  # noqa: E501

        :return: The default_endpoint of this IstioNetworkingV1alpha3Server.  # noqa: E501
        :rtype: str
        """
        return self._default_endpoint

    @default_endpoint.setter
    def default_endpoint(self, default_endpoint):
        """Sets the default_endpoint of this IstioNetworkingV1alpha3Server.

        The loopback IP endpoint or Unix domain socket to which traffic should be forwarded to by default. Format should be `127.0.0.1:PORT` or `unix:///path/to/socket` or `unix://@foobar` (Linux abstract namespace).  # noqa: E501

        :param default_endpoint: The default_endpoint of this IstioNetworkingV1alpha3Server.  # noqa: E501
        :type: str
        """

        self._default_endpoint = default_endpoint

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IstioNetworkingV1alpha3Server):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
