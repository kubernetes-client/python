# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1.15.6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IstioNetworkingV1alpha3IstioEgressListener(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'port': 'IstioNetworkingV1alpha3Port',
        'bind': 'str',
        'hosts': 'list[str]',
        'capture_mode': 'str'
    }

    attribute_map = {
        'port': 'port',
        'bind': 'bind',
        'hosts': 'hosts',
        'capture_mode': 'captureMode'
    }

    def __init__(self, port=None, bind=None, hosts=None, capture_mode=None):  # noqa: E501
        """IstioNetworkingV1alpha3IstioEgressListener - a model defined in OpenAPI"""  # noqa: E501

        self._port = None
        self._bind = None
        self._hosts = None
        self._capture_mode = None
        self.discriminator = None

        if port is not None:
            self.port = port
        if bind is not None:
            self.bind = bind
        if hosts is not None:
            self.hosts = hosts
        if capture_mode is not None:
            self.capture_mode = capture_mode

    @property
    def port(self):
        """Gets the port of this IstioNetworkingV1alpha3IstioEgressListener.  # noqa: E501


        :return: The port of this IstioNetworkingV1alpha3IstioEgressListener.  # noqa: E501
        :rtype: IstioNetworkingV1alpha3Port
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this IstioNetworkingV1alpha3IstioEgressListener.


        :param port: The port of this IstioNetworkingV1alpha3IstioEgressListener.  # noqa: E501
        :type: IstioNetworkingV1alpha3Port
        """

        self._port = port

    @property
    def bind(self):
        """Gets the bind of this IstioNetworkingV1alpha3IstioEgressListener.  # noqa: E501

        The IP or the Unix domain socket to which the listener should be bound to. Port MUST be specified if bind is not empty. Format: `x.x.x.x` or `unix:///path/to/uds` or `unix://@foobar` (Linux abstract namespace). If omitted, Istio will automatically configure the defaults based on imported services, the workload instances to which this configuration is applied to and the captureMode. If captureMode is `NONE`, bind will default to 127.0.0.1.  # noqa: E501

        :return: The bind of this IstioNetworkingV1alpha3IstioEgressListener.  # noqa: E501
        :rtype: str
        """
        return self._bind

    @bind.setter
    def bind(self, bind):
        """Sets the bind of this IstioNetworkingV1alpha3IstioEgressListener.

        The IP or the Unix domain socket to which the listener should be bound to. Port MUST be specified if bind is not empty. Format: `x.x.x.x` or `unix:///path/to/uds` or `unix://@foobar` (Linux abstract namespace). If omitted, Istio will automatically configure the defaults based on imported services, the workload instances to which this configuration is applied to and the captureMode. If captureMode is `NONE`, bind will default to 127.0.0.1.  # noqa: E501

        :param bind: The bind of this IstioNetworkingV1alpha3IstioEgressListener.  # noqa: E501
        :type: str
        """

        self._bind = bind

    @property
    def hosts(self):
        """Gets the hosts of this IstioNetworkingV1alpha3IstioEgressListener.  # noqa: E501

        One or more service hosts exposed by the listener in `namespace/dnsName` format. Services in the specified namespace matching `dnsName` will be exposed. The corresponding service can be a service in the service registry (e.g., a Kubernetes or cloud foundry service) or a service specified using a `ServiceEntry` or `VirtualService` configuration. Any associated `DestinationRule` in the same namespace will also be used.  # noqa: E501

        :return: The hosts of this IstioNetworkingV1alpha3IstioEgressListener.  # noqa: E501
        :rtype: list[str]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this IstioNetworkingV1alpha3IstioEgressListener.

        One or more service hosts exposed by the listener in `namespace/dnsName` format. Services in the specified namespace matching `dnsName` will be exposed. The corresponding service can be a service in the service registry (e.g., a Kubernetes or cloud foundry service) or a service specified using a `ServiceEntry` or `VirtualService` configuration. Any associated `DestinationRule` in the same namespace will also be used.  # noqa: E501

        :param hosts: The hosts of this IstioNetworkingV1alpha3IstioEgressListener.  # noqa: E501
        :type: list[str]
        """

        self._hosts = hosts

    @property
    def capture_mode(self):
        """Gets the capture_mode of this IstioNetworkingV1alpha3IstioEgressListener.  # noqa: E501

        `CaptureMode` describes how traffic to a listener is expected to be captured. Applicable only when the listener is bound to an IP.  # noqa: E501

        :return: The capture_mode of this IstioNetworkingV1alpha3IstioEgressListener.  # noqa: E501
        :rtype: str
        """
        return self._capture_mode

    @capture_mode.setter
    def capture_mode(self, capture_mode):
        """Sets the capture_mode of this IstioNetworkingV1alpha3IstioEgressListener.

        `CaptureMode` describes how traffic to a listener is expected to be captured. Applicable only when the listener is bound to an IP.  # noqa: E501

        :param capture_mode: The capture_mode of this IstioNetworkingV1alpha3IstioEgressListener.  # noqa: E501
        :type: str
        """
        allowed_values = ["DEFAULT", "IPTABLES", "NONE"]  # noqa: E501
        if capture_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `capture_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(capture_mode, allowed_values)
            )

        self._capture_mode = capture_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IstioNetworkingV1alpha3IstioEgressListener):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
