# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1.15.6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IstioNetworkingV1alpha3EnvoyFilterPatch(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'operation': 'str',
        'value': 'object'
    }

    attribute_map = {
        'operation': 'operation',
        'value': 'value'
    }

    def __init__(self, operation=None, value=None):  # noqa: E501
        """IstioNetworkingV1alpha3EnvoyFilterPatch - a model defined in OpenAPI"""  # noqa: E501

        self._operation = None
        self._value = None
        self.discriminator = None

        if operation is not None:
            self.operation = operation
        if value is not None:
            self.value = value

    @property
    def operation(self):
        """Gets the operation of this IstioNetworkingV1alpha3EnvoyFilterPatch.  # noqa: E501

        Operation denotes how the patch should be applied to the selected configuration.  # noqa: E501

        :return: The operation of this IstioNetworkingV1alpha3EnvoyFilterPatch.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this IstioNetworkingV1alpha3EnvoyFilterPatch.

        Operation denotes how the patch should be applied to the selected configuration.  # noqa: E501

        :param operation: The operation of this IstioNetworkingV1alpha3EnvoyFilterPatch.  # noqa: E501
        :type: str
        """
        allowed_values = ["INVALID", "MERGE", "ADD", "REMOVE", "INSERT_BEFORE", "INSERT_AFTER"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"  # noqa: E501
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def value(self):
        """Gets the value of this IstioNetworkingV1alpha3EnvoyFilterPatch.  # noqa: E501

        The JSON config of the object being patched. This will be merged using json merge semantics with the existing proto in the path.  # noqa: E501

        :return: The value of this IstioNetworkingV1alpha3EnvoyFilterPatch.  # noqa: E501
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this IstioNetworkingV1alpha3EnvoyFilterPatch.

        The JSON config of the object being patched. This will be merged using json merge semantics with the existing proto in the path.  # noqa: E501

        :param value: The value of this IstioNetworkingV1alpha3EnvoyFilterPatch.  # noqa: E501
        :type: object
        """

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IstioNetworkingV1alpha3EnvoyFilterPatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
