# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1.15.6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IstioNetworkingV1alpha3VirtualServiceSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'export_to': 'list[str]',
        'tls': 'list[IstioNetworkingV1alpha3TLSRoute]',
        'tcp': 'list[IstioNetworkingV1alpha3TCPRoute]',
        'http': 'list[IstioNetworkingV1alpha3HTTPRoute]',
        'hosts': 'list[str]',
        'gateways': 'list[str]'
    }

    attribute_map = {
        'export_to': 'exportTo',
        'tls': 'tls',
        'tcp': 'tcp',
        'http': 'http',
        'hosts': 'hosts',
        'gateways': 'gateways'
    }

    def __init__(self, export_to=None, tls=None, tcp=None, http=None, hosts=None, gateways=None):  # noqa: E501
        """IstioNetworkingV1alpha3VirtualServiceSpec - a model defined in OpenAPI"""  # noqa: E501

        self._export_to = None
        self._tls = None
        self._tcp = None
        self._http = None
        self._hosts = None
        self._gateways = None
        self.discriminator = None

        if export_to is not None:
            self.export_to = export_to
        if tls is not None:
            self.tls = tls
        if tcp is not None:
            self.tcp = tcp
        if http is not None:
            self.http = http
        if hosts is not None:
            self.hosts = hosts
        if gateways is not None:
            self.gateways = gateways

    @property
    def export_to(self):
        """Gets the export_to of this IstioNetworkingV1alpha3VirtualServiceSpec.  # noqa: E501

        A list of namespaces to which this virtual service is exported. Exporting a virtual service allows it to be used by sidecars and gateways defined in other namespaces. This feature provides a mechanism for service owners and mesh administrators to control the visibility of virtual services across namespace boundaries.  # noqa: E501

        :return: The export_to of this IstioNetworkingV1alpha3VirtualServiceSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._export_to

    @export_to.setter
    def export_to(self, export_to):
        """Sets the export_to of this IstioNetworkingV1alpha3VirtualServiceSpec.

        A list of namespaces to which this virtual service is exported. Exporting a virtual service allows it to be used by sidecars and gateways defined in other namespaces. This feature provides a mechanism for service owners and mesh administrators to control the visibility of virtual services across namespace boundaries.  # noqa: E501

        :param export_to: The export_to of this IstioNetworkingV1alpha3VirtualServiceSpec.  # noqa: E501
        :type: list[str]
        """

        self._export_to = export_to

    @property
    def tls(self):
        """Gets the tls of this IstioNetworkingV1alpha3VirtualServiceSpec.  # noqa: E501

        An ordered list of route rule for non-terminated TLS & HTTPS traffic. Routing is typically performed using the SNI value presented by the ClientHello message. TLS routes will be applied to platform service ports named 'https-*', 'tls-*', unterminated gateway ports using HTTPS/TLS protocols (i.e. with \"passthrough\" TLS mode) and service entry ports using HTTPS/TLS protocols. The first rule matching an incoming request is used. NOTE: Traffic 'https-*' or 'tls-*' ports without associated virtual service will be treated as opaque TCP traffic.  # noqa: E501

        :return: The tls of this IstioNetworkingV1alpha3VirtualServiceSpec.  # noqa: E501
        :rtype: list[IstioNetworkingV1alpha3TLSRoute]
        """
        return self._tls

    @tls.setter
    def tls(self, tls):
        """Sets the tls of this IstioNetworkingV1alpha3VirtualServiceSpec.

        An ordered list of route rule for non-terminated TLS & HTTPS traffic. Routing is typically performed using the SNI value presented by the ClientHello message. TLS routes will be applied to platform service ports named 'https-*', 'tls-*', unterminated gateway ports using HTTPS/TLS protocols (i.e. with \"passthrough\" TLS mode) and service entry ports using HTTPS/TLS protocols. The first rule matching an incoming request is used. NOTE: Traffic 'https-*' or 'tls-*' ports without associated virtual service will be treated as opaque TCP traffic.  # noqa: E501

        :param tls: The tls of this IstioNetworkingV1alpha3VirtualServiceSpec.  # noqa: E501
        :type: list[IstioNetworkingV1alpha3TLSRoute]
        """

        self._tls = tls

    @property
    def tcp(self):
        """Gets the tcp of this IstioNetworkingV1alpha3VirtualServiceSpec.  # noqa: E501

        An ordered list of route rules for opaque TCP traffic. TCP routes will be applied to any port that is not a HTTP or TLS port. The first rule matching an incoming request is used.  # noqa: E501

        :return: The tcp of this IstioNetworkingV1alpha3VirtualServiceSpec.  # noqa: E501
        :rtype: list[IstioNetworkingV1alpha3TCPRoute]
        """
        return self._tcp

    @tcp.setter
    def tcp(self, tcp):
        """Sets the tcp of this IstioNetworkingV1alpha3VirtualServiceSpec.

        An ordered list of route rules for opaque TCP traffic. TCP routes will be applied to any port that is not a HTTP or TLS port. The first rule matching an incoming request is used.  # noqa: E501

        :param tcp: The tcp of this IstioNetworkingV1alpha3VirtualServiceSpec.  # noqa: E501
        :type: list[IstioNetworkingV1alpha3TCPRoute]
        """

        self._tcp = tcp

    @property
    def http(self):
        """Gets the http of this IstioNetworkingV1alpha3VirtualServiceSpec.  # noqa: E501

        An ordered list of route rules for HTTP traffic. HTTP routes will be applied to platform service ports named 'http-*'/'http2-*'/'grpc-*', gateway ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service entry ports using HTTP/HTTP2/GRPC protocols. The first rule matching an incoming request is used.  # noqa: E501

        :return: The http of this IstioNetworkingV1alpha3VirtualServiceSpec.  # noqa: E501
        :rtype: list[IstioNetworkingV1alpha3HTTPRoute]
        """
        return self._http

    @http.setter
    def http(self, http):
        """Sets the http of this IstioNetworkingV1alpha3VirtualServiceSpec.

        An ordered list of route rules for HTTP traffic. HTTP routes will be applied to platform service ports named 'http-*'/'http2-*'/'grpc-*', gateway ports with protocol HTTP/HTTP2/GRPC/ TLS-terminated-HTTPS and service entry ports using HTTP/HTTP2/GRPC protocols. The first rule matching an incoming request is used.  # noqa: E501

        :param http: The http of this IstioNetworkingV1alpha3VirtualServiceSpec.  # noqa: E501
        :type: list[IstioNetworkingV1alpha3HTTPRoute]
        """

        self._http = http

    @property
    def hosts(self):
        """Gets the hosts of this IstioNetworkingV1alpha3VirtualServiceSpec.  # noqa: E501

        The destination hosts to which traffic is being sent. Could be a DNS name with wildcard prefix or an IP address. Depending on the platform, short-names can also be used instead of a FQDN (i.e. has no dots in the name). In such a scenario, the FQDN of the host would be derived based on the underlying platform.  # noqa: E501

        :return: The hosts of this IstioNetworkingV1alpha3VirtualServiceSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this IstioNetworkingV1alpha3VirtualServiceSpec.

        The destination hosts to which traffic is being sent. Could be a DNS name with wildcard prefix or an IP address. Depending on the platform, short-names can also be used instead of a FQDN (i.e. has no dots in the name). In such a scenario, the FQDN of the host would be derived based on the underlying platform.  # noqa: E501

        :param hosts: The hosts of this IstioNetworkingV1alpha3VirtualServiceSpec.  # noqa: E501
        :type: list[str]
        """

        self._hosts = hosts

    @property
    def gateways(self):
        """Gets the gateways of this IstioNetworkingV1alpha3VirtualServiceSpec.  # noqa: E501

        The names of gateways and sidecars that should apply these routes. Gateways in other namespaces may be referred to by `<gateway namespace>/<gateway name>`; specifying a gateway with no namespace qualifier is the same as specifying the VirtualService's namespace. A single VirtualService is used for sidecars inside the mesh as well as for one or more gateways. The selection condition imposed by this field can be overridden using the source field in the match conditions of protocol-specific routes. The reserved word `mesh` is used to imply all the sidecars in the mesh. When this field is omitted, the default gateway (`mesh`) will be used, which would apply the rule to all sidecars in the mesh. If a list of gateway names is provided, the rules will apply only to the gateways. To apply the rules to both gateways and sidecars, specify `mesh` as one of the gateway names.  # noqa: E501

        :return: The gateways of this IstioNetworkingV1alpha3VirtualServiceSpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._gateways

    @gateways.setter
    def gateways(self, gateways):
        """Sets the gateways of this IstioNetworkingV1alpha3VirtualServiceSpec.

        The names of gateways and sidecars that should apply these routes. Gateways in other namespaces may be referred to by `<gateway namespace>/<gateway name>`; specifying a gateway with no namespace qualifier is the same as specifying the VirtualService's namespace. A single VirtualService is used for sidecars inside the mesh as well as for one or more gateways. The selection condition imposed by this field can be overridden using the source field in the match conditions of protocol-specific routes. The reserved word `mesh` is used to imply all the sidecars in the mesh. When this field is omitted, the default gateway (`mesh`) will be used, which would apply the rule to all sidecars in the mesh. If a list of gateway names is provided, the rules will apply only to the gateways. To apply the rules to both gateways and sidecars, specify `mesh` as one of the gateway names.  # noqa: E501

        :param gateways: The gateways of this IstioNetworkingV1alpha3VirtualServiceSpec.  # noqa: E501
        :type: list[str]
        """

        self._gateways = gateways

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IstioNetworkingV1alpha3VirtualServiceSpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
