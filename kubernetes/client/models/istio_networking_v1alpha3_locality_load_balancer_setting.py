# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1.15.6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IstioNetworkingV1alpha3LocalityLoadBalancerSetting(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'distribute': 'list[IstioNetworkingV1alpha3LocalityLoadBalancerSettingDistribute]',
        'failover': 'list[IstioNetworkingV1alpha3LocalityLoadBalancerSettingFailover]'
    }

    attribute_map = {
        'distribute': 'distribute',
        'failover': 'failover'
    }

    def __init__(self, distribute=None, failover=None):  # noqa: E501
        """IstioNetworkingV1alpha3LocalityLoadBalancerSetting - a model defined in OpenAPI"""  # noqa: E501

        self._distribute = None
        self._failover = None
        self.discriminator = None

        if distribute is not None:
            self.distribute = distribute
        if failover is not None:
            self.failover = failover

    @property
    def distribute(self):
        """Gets the distribute of this IstioNetworkingV1alpha3LocalityLoadBalancerSetting.  # noqa: E501

        Optional: only one of distribute or failover can be set. Explicitly specify loadbalancing weight across different zones and geographical locations. Refer to [Locality weighted load balancing](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/load_balancing/locality_weight) If empty, the locality weight is set according to the endpoints number within it.  # noqa: E501

        :return: The distribute of this IstioNetworkingV1alpha3LocalityLoadBalancerSetting.  # noqa: E501
        :rtype: list[IstioNetworkingV1alpha3LocalityLoadBalancerSettingDistribute]
        """
        return self._distribute

    @distribute.setter
    def distribute(self, distribute):
        """Sets the distribute of this IstioNetworkingV1alpha3LocalityLoadBalancerSetting.

        Optional: only one of distribute or failover can be set. Explicitly specify loadbalancing weight across different zones and geographical locations. Refer to [Locality weighted load balancing](https://www.envoyproxy.io/docs/envoy/latest/intro/arch_overview/upstream/load_balancing/locality_weight) If empty, the locality weight is set according to the endpoints number within it.  # noqa: E501

        :param distribute: The distribute of this IstioNetworkingV1alpha3LocalityLoadBalancerSetting.  # noqa: E501
        :type: list[IstioNetworkingV1alpha3LocalityLoadBalancerSettingDistribute]
        """

        self._distribute = distribute

    @property
    def failover(self):
        """Gets the failover of this IstioNetworkingV1alpha3LocalityLoadBalancerSetting.  # noqa: E501

        Optional: only failover or distribute can be set. Explicitly specify the region traffic will land on when endpoints in local region becomes unhealthy. Should be used together with OutlierDetection to detect unhealthy endpoints. Note: if no OutlierDetection specified, this will not take effect.  # noqa: E501

        :return: The failover of this IstioNetworkingV1alpha3LocalityLoadBalancerSetting.  # noqa: E501
        :rtype: list[IstioNetworkingV1alpha3LocalityLoadBalancerSettingFailover]
        """
        return self._failover

    @failover.setter
    def failover(self, failover):
        """Sets the failover of this IstioNetworkingV1alpha3LocalityLoadBalancerSetting.

        Optional: only failover or distribute can be set. Explicitly specify the region traffic will land on when endpoints in local region becomes unhealthy. Should be used together with OutlierDetection to detect unhealthy endpoints. Note: if no OutlierDetection specified, this will not take effect.  # noqa: E501

        :param failover: The failover of this IstioNetworkingV1alpha3LocalityLoadBalancerSetting.  # noqa: E501
        :type: list[IstioNetworkingV1alpha3LocalityLoadBalancerSettingFailover]
        """

        self._failover = failover

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IstioNetworkingV1alpha3LocalityLoadBalancerSetting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
