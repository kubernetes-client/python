# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1.15.6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IstioNetworkingV1alpha3ServiceEntrySpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'export_to': 'list[str]',
        'subject_alt_names': 'list[str]',
        'hosts': 'list[str]',
        'addresses': 'list[str]',
        'ports': 'list[IstioNetworkingV1alpha3Port]',
        'location': 'str',
        'resolution': 'str',
        'endpoints': 'list[IstioNetworkingV1alpha3ServiceEntryEndpoint]'
    }

    attribute_map = {
        'export_to': 'exportTo',
        'subject_alt_names': 'subjectAltNames',
        'hosts': 'hosts',
        'addresses': 'addresses',
        'ports': 'ports',
        'location': 'location',
        'resolution': 'resolution',
        'endpoints': 'endpoints'
    }

    def __init__(self, export_to=None, subject_alt_names=None, hosts=None, addresses=None, ports=None, location=None, resolution=None, endpoints=None):  # noqa: E501
        """IstioNetworkingV1alpha3ServiceEntrySpec - a model defined in OpenAPI"""  # noqa: E501

        self._export_to = None
        self._subject_alt_names = None
        self._hosts = None
        self._addresses = None
        self._ports = None
        self._location = None
        self._resolution = None
        self._endpoints = None
        self.discriminator = None

        if export_to is not None:
            self.export_to = export_to
        if subject_alt_names is not None:
            self.subject_alt_names = subject_alt_names
        if hosts is not None:
            self.hosts = hosts
        if addresses is not None:
            self.addresses = addresses
        if ports is not None:
            self.ports = ports
        if location is not None:
            self.location = location
        if resolution is not None:
            self.resolution = resolution
        if endpoints is not None:
            self.endpoints = endpoints

    @property
    def export_to(self):
        """Gets the export_to of this IstioNetworkingV1alpha3ServiceEntrySpec.  # noqa: E501

        A list of namespaces to which this service is exported. Exporting a service allows it to be used by sidecars, gateways and virtual services defined in other namespaces. This feature provides a mechanism for service owners and mesh administrators to control the visibility of services across namespace boundaries.  # noqa: E501

        :return: The export_to of this IstioNetworkingV1alpha3ServiceEntrySpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._export_to

    @export_to.setter
    def export_to(self, export_to):
        """Sets the export_to of this IstioNetworkingV1alpha3ServiceEntrySpec.

        A list of namespaces to which this service is exported. Exporting a service allows it to be used by sidecars, gateways and virtual services defined in other namespaces. This feature provides a mechanism for service owners and mesh administrators to control the visibility of services across namespace boundaries.  # noqa: E501

        :param export_to: The export_to of this IstioNetworkingV1alpha3ServiceEntrySpec.  # noqa: E501
        :type: list[str]
        """

        self._export_to = export_to

    @property
    def subject_alt_names(self):
        """Gets the subject_alt_names of this IstioNetworkingV1alpha3ServiceEntrySpec.  # noqa: E501

        The list of subject alternate names allowed for workload instances that implement this service. This information is used to enforce [secure-naming](https://istio.io/docs/concepts/security/#secure-naming). If specified, the proxy will verify that the server certificate's subject alternate name matches one of the specified values.  # noqa: E501

        :return: The subject_alt_names of this IstioNetworkingV1alpha3ServiceEntrySpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._subject_alt_names

    @subject_alt_names.setter
    def subject_alt_names(self, subject_alt_names):
        """Sets the subject_alt_names of this IstioNetworkingV1alpha3ServiceEntrySpec.

        The list of subject alternate names allowed for workload instances that implement this service. This information is used to enforce [secure-naming](https://istio.io/docs/concepts/security/#secure-naming). If specified, the proxy will verify that the server certificate's subject alternate name matches one of the specified values.  # noqa: E501

        :param subject_alt_names: The subject_alt_names of this IstioNetworkingV1alpha3ServiceEntrySpec.  # noqa: E501
        :type: list[str]
        """

        self._subject_alt_names = subject_alt_names

    @property
    def hosts(self):
        """Gets the hosts of this IstioNetworkingV1alpha3ServiceEntrySpec.  # noqa: E501

        The hosts associated with the ServiceEntry. Could be a DNS name with wildcard prefix.  # noqa: E501

        :return: The hosts of this IstioNetworkingV1alpha3ServiceEntrySpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts):
        """Sets the hosts of this IstioNetworkingV1alpha3ServiceEntrySpec.

        The hosts associated with the ServiceEntry. Could be a DNS name with wildcard prefix.  # noqa: E501

        :param hosts: The hosts of this IstioNetworkingV1alpha3ServiceEntrySpec.  # noqa: E501
        :type: list[str]
        """

        self._hosts = hosts

    @property
    def addresses(self):
        """Gets the addresses of this IstioNetworkingV1alpha3ServiceEntrySpec.  # noqa: E501

        The virtual IP addresses associated with the service. Could be CIDR prefix. For HTTP traffic, generated route configurations will include http route domains for both the `addresses` and `hosts` field values and the destination will be identified based on the HTTP Host/Authority header. If one or more IP addresses are specified, the incoming traffic will be identified as belonging to this service if the destination IP matches the IP/CIDRs specified in the addresses field. If the Addresses field is empty, traffic will be identified solely based on the destination port. In such scenarios, the port on which the service is being accessed must not be shared by any other service in the mesh. In other words, the sidecar will behave as a simple TCP proxy, forwarding incoming traffic on a specified port to the specified destination endpoint IP/host. Unix domain socket addresses are not supported in this field.  # noqa: E501

        :return: The addresses of this IstioNetworkingV1alpha3ServiceEntrySpec.  # noqa: E501
        :rtype: list[str]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses):
        """Sets the addresses of this IstioNetworkingV1alpha3ServiceEntrySpec.

        The virtual IP addresses associated with the service. Could be CIDR prefix. For HTTP traffic, generated route configurations will include http route domains for both the `addresses` and `hosts` field values and the destination will be identified based on the HTTP Host/Authority header. If one or more IP addresses are specified, the incoming traffic will be identified as belonging to this service if the destination IP matches the IP/CIDRs specified in the addresses field. If the Addresses field is empty, traffic will be identified solely based on the destination port. In such scenarios, the port on which the service is being accessed must not be shared by any other service in the mesh. In other words, the sidecar will behave as a simple TCP proxy, forwarding incoming traffic on a specified port to the specified destination endpoint IP/host. Unix domain socket addresses are not supported in this field.  # noqa: E501

        :param addresses: The addresses of this IstioNetworkingV1alpha3ServiceEntrySpec.  # noqa: E501
        :type: list[str]
        """

        self._addresses = addresses

    @property
    def ports(self):
        """Gets the ports of this IstioNetworkingV1alpha3ServiceEntrySpec.  # noqa: E501

        The ports associated with the external service. If the Endpoints are Unix domain socket addresses, there must be exactly one port.  # noqa: E501

        :return: The ports of this IstioNetworkingV1alpha3ServiceEntrySpec.  # noqa: E501
        :rtype: list[IstioNetworkingV1alpha3Port]
        """
        return self._ports

    @ports.setter
    def ports(self, ports):
        """Sets the ports of this IstioNetworkingV1alpha3ServiceEntrySpec.

        The ports associated with the external service. If the Endpoints are Unix domain socket addresses, there must be exactly one port.  # noqa: E501

        :param ports: The ports of this IstioNetworkingV1alpha3ServiceEntrySpec.  # noqa: E501
        :type: list[IstioNetworkingV1alpha3Port]
        """

        self._ports = ports

    @property
    def location(self):
        """Gets the location of this IstioNetworkingV1alpha3ServiceEntrySpec.  # noqa: E501

        Location specifies whether the service is part of Istio mesh or outside the mesh. Location determines the behavior of several features, such as service-to-service mTLS authentication, policy enforcement, etc. When communicating with services outside the mesh, Istio's mTLS authentication is disabled, and policy enforcement is performed on the client-side as opposed to server-side.  # noqa: E501

        :return: The location of this IstioNetworkingV1alpha3ServiceEntrySpec.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this IstioNetworkingV1alpha3ServiceEntrySpec.

        Location specifies whether the service is part of Istio mesh or outside the mesh. Location determines the behavior of several features, such as service-to-service mTLS authentication, policy enforcement, etc. When communicating with services outside the mesh, Istio's mTLS authentication is disabled, and policy enforcement is performed on the client-side as opposed to server-side.  # noqa: E501

        :param location: The location of this IstioNetworkingV1alpha3ServiceEntrySpec.  # noqa: E501
        :type: str
        """
        allowed_values = ["MESH_EXTERNAL", "MESH_INTERNAL"]  # noqa: E501
        if location not in allowed_values:
            raise ValueError(
                "Invalid value for `location` ({0}), must be one of {1}"  # noqa: E501
                .format(location, allowed_values)
            )

        self._location = location

    @property
    def resolution(self):
        """Gets the resolution of this IstioNetworkingV1alpha3ServiceEntrySpec.  # noqa: E501

        Resolution determines how the proxy will resolve the IP addresses of the network endpoints associated with the service, so that it can route to one of them. The resolution mode specified here has no impact on how the application resolves the IP address associated with the service. The application may still have to use DNS to resolve the service to an IP so that the outbound traffic can be captured by the Proxy. Alternatively, for HTTP services, the application could directly communicate with the proxy (e.g., by setting HTTP_PROXY) to talk to these services.  # noqa: E501

        :return: The resolution of this IstioNetworkingV1alpha3ServiceEntrySpec.  # noqa: E501
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this IstioNetworkingV1alpha3ServiceEntrySpec.

        Resolution determines how the proxy will resolve the IP addresses of the network endpoints associated with the service, so that it can route to one of them. The resolution mode specified here has no impact on how the application resolves the IP address associated with the service. The application may still have to use DNS to resolve the service to an IP so that the outbound traffic can be captured by the Proxy. Alternatively, for HTTP services, the application could directly communicate with the proxy (e.g., by setting HTTP_PROXY) to talk to these services.  # noqa: E501

        :param resolution: The resolution of this IstioNetworkingV1alpha3ServiceEntrySpec.  # noqa: E501
        :type: str
        """
        allowed_values = ["NONE", "STATIC", "DNS"]  # noqa: E501
        if resolution not in allowed_values:
            raise ValueError(
                "Invalid value for `resolution` ({0}), must be one of {1}"  # noqa: E501
                .format(resolution, allowed_values)
            )

        self._resolution = resolution

    @property
    def endpoints(self):
        """Gets the endpoints of this IstioNetworkingV1alpha3ServiceEntrySpec.  # noqa: E501

        One or more endpoints associated with the service.  # noqa: E501

        :return: The endpoints of this IstioNetworkingV1alpha3ServiceEntrySpec.  # noqa: E501
        :rtype: list[IstioNetworkingV1alpha3ServiceEntryEndpoint]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this IstioNetworkingV1alpha3ServiceEntrySpec.

        One or more endpoints associated with the service.  # noqa: E501

        :param endpoints: The endpoints of this IstioNetworkingV1alpha3ServiceEntrySpec.  # noqa: E501
        :type: list[IstioNetworkingV1alpha3ServiceEntryEndpoint]
        """

        self._endpoints = endpoints

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IstioNetworkingV1alpha3ServiceEntrySpec):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
