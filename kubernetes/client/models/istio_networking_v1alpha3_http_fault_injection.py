# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1.15.6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IstioNetworkingV1alpha3HTTPFaultInjection(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'delay': 'object',
        'abort': 'object'
    }

    attribute_map = {
        'delay': 'delay',
        'abort': 'abort'
    }

    def __init__(self, delay=None, abort=None):  # noqa: E501
        """IstioNetworkingV1alpha3HTTPFaultInjection - a model defined in OpenAPI"""  # noqa: E501

        self._delay = None
        self._abort = None
        self.discriminator = None

        if delay is not None:
            self.delay = delay
        if abort is not None:
            self.abort = abort

    @property
    def delay(self):
        """Gets the delay of this IstioNetworkingV1alpha3HTTPFaultInjection.  # noqa: E501

        Delay specification is used to inject latency into the request forwarding path. The following example will introduce a 5 second delay in 1 out of every 1000 requests to the \"v1\" version of the \"reviews\" service from all pods with label env: prod  # noqa: E501

        :return: The delay of this IstioNetworkingV1alpha3HTTPFaultInjection.  # noqa: E501
        :rtype: object
        """
        return self._delay

    @delay.setter
    def delay(self, delay):
        """Sets the delay of this IstioNetworkingV1alpha3HTTPFaultInjection.

        Delay specification is used to inject latency into the request forwarding path. The following example will introduce a 5 second delay in 1 out of every 1000 requests to the \"v1\" version of the \"reviews\" service from all pods with label env: prod  # noqa: E501

        :param delay: The delay of this IstioNetworkingV1alpha3HTTPFaultInjection.  # noqa: E501
        :type: object
        """

        self._delay = delay

    @property
    def abort(self):
        """Gets the abort of this IstioNetworkingV1alpha3HTTPFaultInjection.  # noqa: E501

        Abort specification is used to prematurely abort a request with a pre-specified error code. The following example will return an HTTP 400 error code for 1 out of every 1000 requests to the \"ratings\" service \"v1\".  # noqa: E501

        :return: The abort of this IstioNetworkingV1alpha3HTTPFaultInjection.  # noqa: E501
        :rtype: object
        """
        return self._abort

    @abort.setter
    def abort(self, abort):
        """Sets the abort of this IstioNetworkingV1alpha3HTTPFaultInjection.

        Abort specification is used to prematurely abort a request with a pre-specified error code. The following example will return an HTTP 400 error code for 1 out of every 1000 requests to the \"ratings\" service \"v1\".  # noqa: E501

        :param abort: The abort of this IstioNetworkingV1alpha3HTTPFaultInjection.  # noqa: E501
        :type: object
        """

        self._abort = abort

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IstioNetworkingV1alpha3HTTPFaultInjection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
