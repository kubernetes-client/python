# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.30
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubernetes.client.configuration import Configuration


class V1alpha2ResourceSlice(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'api_version': 'str',
        'driver_name': 'str',
        'kind': 'str',
        'metadata': 'V1ObjectMeta',
        'named_resources': 'V1alpha2NamedResourcesResources',
        'node_name': 'str'
    }

    attribute_map = {
        'api_version': 'apiVersion',
        'driver_name': 'driverName',
        'kind': 'kind',
        'metadata': 'metadata',
        'named_resources': 'namedResources',
        'node_name': 'nodeName'
    }

    def __init__(self, api_version=None, driver_name=None, kind=None, metadata=None, named_resources=None, node_name=None, local_vars_configuration=None):  # noqa: E501
        """V1alpha2ResourceSlice - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._api_version = None
        self._driver_name = None
        self._kind = None
        self._metadata = None
        self._named_resources = None
        self._node_name = None
        self.discriminator = None

        if api_version is not None:
            self.api_version = api_version
        self.driver_name = driver_name
        if kind is not None:
            self.kind = kind
        if metadata is not None:
            self.metadata = metadata
        if named_resources is not None:
            self.named_resources = named_resources
        if node_name is not None:
            self.node_name = node_name

    @property
    def api_version(self):
        """Gets the api_version of this V1alpha2ResourceSlice.  # noqa: E501

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :return: The api_version of this V1alpha2ResourceSlice.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this V1alpha2ResourceSlice.

        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources  # noqa: E501

        :param api_version: The api_version of this V1alpha2ResourceSlice.  # noqa: E501
        :type: str
        """

        self._api_version = api_version

    @property
    def driver_name(self):
        """Gets the driver_name of this V1alpha2ResourceSlice.  # noqa: E501

        DriverName identifies the DRA driver providing the capacity information. A field selector can be used to list only ResourceSlice objects with a certain driver name.  # noqa: E501

        :return: The driver_name of this V1alpha2ResourceSlice.  # noqa: E501
        :rtype: str
        """
        return self._driver_name

    @driver_name.setter
    def driver_name(self, driver_name):
        """Sets the driver_name of this V1alpha2ResourceSlice.

        DriverName identifies the DRA driver providing the capacity information. A field selector can be used to list only ResourceSlice objects with a certain driver name.  # noqa: E501

        :param driver_name: The driver_name of this V1alpha2ResourceSlice.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and driver_name is None:  # noqa: E501
            raise ValueError("Invalid value for `driver_name`, must not be `None`")  # noqa: E501

        self._driver_name = driver_name

    @property
    def kind(self):
        """Gets the kind of this V1alpha2ResourceSlice.  # noqa: E501

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :return: The kind of this V1alpha2ResourceSlice.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this V1alpha2ResourceSlice.

        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds  # noqa: E501

        :param kind: The kind of this V1alpha2ResourceSlice.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def metadata(self):
        """Gets the metadata of this V1alpha2ResourceSlice.  # noqa: E501


        :return: The metadata of this V1alpha2ResourceSlice.  # noqa: E501
        :rtype: V1ObjectMeta
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this V1alpha2ResourceSlice.


        :param metadata: The metadata of this V1alpha2ResourceSlice.  # noqa: E501
        :type: V1ObjectMeta
        """

        self._metadata = metadata

    @property
    def named_resources(self):
        """Gets the named_resources of this V1alpha2ResourceSlice.  # noqa: E501


        :return: The named_resources of this V1alpha2ResourceSlice.  # noqa: E501
        :rtype: V1alpha2NamedResourcesResources
        """
        return self._named_resources

    @named_resources.setter
    def named_resources(self, named_resources):
        """Sets the named_resources of this V1alpha2ResourceSlice.


        :param named_resources: The named_resources of this V1alpha2ResourceSlice.  # noqa: E501
        :type: V1alpha2NamedResourcesResources
        """

        self._named_resources = named_resources

    @property
    def node_name(self):
        """Gets the node_name of this V1alpha2ResourceSlice.  # noqa: E501

        NodeName identifies the node which provides the resources if they are local to a node.  A field selector can be used to list only ResourceSlice objects with a certain node name.  # noqa: E501

        :return: The node_name of this V1alpha2ResourceSlice.  # noqa: E501
        :rtype: str
        """
        return self._node_name

    @node_name.setter
    def node_name(self, node_name):
        """Sets the node_name of this V1alpha2ResourceSlice.

        NodeName identifies the node which provides the resources if they are local to a node.  A field selector can be used to list only ResourceSlice objects with a certain node name.  # noqa: E501

        :param node_name: The node_name of this V1alpha2ResourceSlice.  # noqa: E501
        :type: str
        """

        self._node_name = node_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1alpha2ResourceSlice):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1alpha2ResourceSlice):
            return True

        return self.to_dict() != other.to_dict()
