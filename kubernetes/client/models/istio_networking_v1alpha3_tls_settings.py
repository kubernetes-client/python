# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    OpenAPI spec version: v1.15.6
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class IstioNetworkingV1alpha3TLSSettings(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'mode': 'str',
        'client_certificate': 'str',
        'private_key': 'str',
        'ca_certificates': 'str',
        'subject_alt_names': 'list[str]',
        'sni': 'str'
    }

    attribute_map = {
        'mode': 'mode',
        'client_certificate': 'clientCertificate',
        'private_key': 'privateKey',
        'ca_certificates': 'caCertificates',
        'subject_alt_names': 'subjectAltNames',
        'sni': 'sni'
    }

    def __init__(self, mode=None, client_certificate=None, private_key=None, ca_certificates=None, subject_alt_names=None, sni=None):  # noqa: E501
        """IstioNetworkingV1alpha3TLSSettings - a model defined in OpenAPI"""  # noqa: E501

        self._mode = None
        self._client_certificate = None
        self._private_key = None
        self._ca_certificates = None
        self._subject_alt_names = None
        self._sni = None
        self.discriminator = None

        if mode is not None:
            self.mode = mode
        if client_certificate is not None:
            self.client_certificate = client_certificate
        if private_key is not None:
            self.private_key = private_key
        if ca_certificates is not None:
            self.ca_certificates = ca_certificates
        if subject_alt_names is not None:
            self.subject_alt_names = subject_alt_names
        if sni is not None:
            self.sni = sni

    @property
    def mode(self):
        """Gets the mode of this IstioNetworkingV1alpha3TLSSettings.  # noqa: E501

        TLS connection mode  # noqa: E501

        :return: The mode of this IstioNetworkingV1alpha3TLSSettings.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this IstioNetworkingV1alpha3TLSSettings.

        TLS connection mode  # noqa: E501

        :param mode: The mode of this IstioNetworkingV1alpha3TLSSettings.  # noqa: E501
        :type: str
        """
        allowed_values = ["DISABLE", "SIMPLE", "MUTUAL", "ISTIO_MUTUAL"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def client_certificate(self):
        """Gets the client_certificate of this IstioNetworkingV1alpha3TLSSettings.  # noqa: E501

        REQUIRED if mode is `MUTUAL`. The path to the file holding the client-side TLS certificate to use. Should be empty if mode is `ISTIO_MUTUAL`.  # noqa: E501

        :return: The client_certificate of this IstioNetworkingV1alpha3TLSSettings.  # noqa: E501
        :rtype: str
        """
        return self._client_certificate

    @client_certificate.setter
    def client_certificate(self, client_certificate):
        """Sets the client_certificate of this IstioNetworkingV1alpha3TLSSettings.

        REQUIRED if mode is `MUTUAL`. The path to the file holding the client-side TLS certificate to use. Should be empty if mode is `ISTIO_MUTUAL`.  # noqa: E501

        :param client_certificate: The client_certificate of this IstioNetworkingV1alpha3TLSSettings.  # noqa: E501
        :type: str
        """

        self._client_certificate = client_certificate

    @property
    def private_key(self):
        """Gets the private_key of this IstioNetworkingV1alpha3TLSSettings.  # noqa: E501

        REQUIRED if mode is `MUTUAL`. The path to the file holding the client's private key. Should be empty if mode is `ISTIO_MUTUAL`.  # noqa: E501

        :return: The private_key of this IstioNetworkingV1alpha3TLSSettings.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this IstioNetworkingV1alpha3TLSSettings.

        REQUIRED if mode is `MUTUAL`. The path to the file holding the client's private key. Should be empty if mode is `ISTIO_MUTUAL`.  # noqa: E501

        :param private_key: The private_key of this IstioNetworkingV1alpha3TLSSettings.  # noqa: E501
        :type: str
        """

        self._private_key = private_key

    @property
    def ca_certificates(self):
        """Gets the ca_certificates of this IstioNetworkingV1alpha3TLSSettings.  # noqa: E501

        OPTIONAL: The path to the file containing certificate authority certificates to use in verifying a presented server certificate. If omitted, the proxy will not verify the server's certificate. Should be empty if mode is `ISTIO_MUTUAL`.  # noqa: E501

        :return: The ca_certificates of this IstioNetworkingV1alpha3TLSSettings.  # noqa: E501
        :rtype: str
        """
        return self._ca_certificates

    @ca_certificates.setter
    def ca_certificates(self, ca_certificates):
        """Sets the ca_certificates of this IstioNetworkingV1alpha3TLSSettings.

        OPTIONAL: The path to the file containing certificate authority certificates to use in verifying a presented server certificate. If omitted, the proxy will not verify the server's certificate. Should be empty if mode is `ISTIO_MUTUAL`.  # noqa: E501

        :param ca_certificates: The ca_certificates of this IstioNetworkingV1alpha3TLSSettings.  # noqa: E501
        :type: str
        """

        self._ca_certificates = ca_certificates

    @property
    def subject_alt_names(self):
        """Gets the subject_alt_names of this IstioNetworkingV1alpha3TLSSettings.  # noqa: E501

        A list of alternate names to verify the subject identity in the certificate. If specified, the proxy will verify that the server certificate's subject alt name matches one of the specified values. If specified, this list overrides the value of subject_alt_names from the ServiceEntry.  # noqa: E501

        :return: The subject_alt_names of this IstioNetworkingV1alpha3TLSSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._subject_alt_names

    @subject_alt_names.setter
    def subject_alt_names(self, subject_alt_names):
        """Sets the subject_alt_names of this IstioNetworkingV1alpha3TLSSettings.

        A list of alternate names to verify the subject identity in the certificate. If specified, the proxy will verify that the server certificate's subject alt name matches one of the specified values. If specified, this list overrides the value of subject_alt_names from the ServiceEntry.  # noqa: E501

        :param subject_alt_names: The subject_alt_names of this IstioNetworkingV1alpha3TLSSettings.  # noqa: E501
        :type: list[str]
        """

        self._subject_alt_names = subject_alt_names

    @property
    def sni(self):
        """Gets the sni of this IstioNetworkingV1alpha3TLSSettings.  # noqa: E501

        SNI string to present to the server during TLS handshake.  # noqa: E501

        :return: The sni of this IstioNetworkingV1alpha3TLSSettings.  # noqa: E501
        :rtype: str
        """
        return self._sni

    @sni.setter
    def sni(self, sni):
        """Sets the sni of this IstioNetworkingV1alpha3TLSSettings.

        SNI string to present to the server during TLS handshake.  # noqa: E501

        :param sni: The sni of this IstioNetworkingV1alpha3TLSSettings.  # noqa: E501
        :type: str
        """

        self._sni = sni

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IstioNetworkingV1alpha3TLSSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
