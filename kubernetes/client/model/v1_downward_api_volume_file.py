# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class V1DownwardAPIVolumeFile(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    DownwardAPIVolumeFile represents information to create the file containing the pod field
    """


    class MetaOapg:
        required = {
            "path",
        }
        
        class properties:
            path = schemas.StrSchema
        
            @staticmethod
            def fieldRef() -> typing.Type['V1ObjectFieldSelector']:
                return V1ObjectFieldSelector
            mode = schemas.Int32Schema
        
            @staticmethod
            def resourceFieldRef() -> typing.Type['V1ResourceFieldSelector']:
                return V1ResourceFieldSelector
            __annotations__ = {
                "path": path,
                "fieldRef": fieldRef,
                "mode": mode,
                "resourceFieldRef": resourceFieldRef,
            }
    
    path: MetaOapg.properties.path
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldRef"]) -> 'V1ObjectFieldSelector': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mode"]) -> MetaOapg.properties.mode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resourceFieldRef"]) -> 'V1ResourceFieldSelector': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["path", "fieldRef", "mode", "resourceFieldRef", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldRef"]) -> typing.Union['V1ObjectFieldSelector', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mode"]) -> typing.Union[MetaOapg.properties.mode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resourceFieldRef"]) -> typing.Union['V1ResourceFieldSelector', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["path", "fieldRef", "mode", "resourceFieldRef", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        path: typing.Union[MetaOapg.properties.path, str, ],
        fieldRef: typing.Union['V1ObjectFieldSelector', schemas.Unset] = schemas.unset,
        mode: typing.Union[MetaOapg.properties.mode, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        resourceFieldRef: typing.Union['V1ResourceFieldSelector', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1DownwardAPIVolumeFile':
        return super().__new__(
            cls,
            *args,
            path=path,
            fieldRef=fieldRef,
            mode=mode,
            resourceFieldRef=resourceFieldRef,
            _configuration=_configuration,
            **kwargs,
        )

from kubernetes.client.model.v1_object_field_selector import V1ObjectFieldSelector
from kubernetes.client.model.v1_resource_field_selector import V1ResourceFieldSelector
