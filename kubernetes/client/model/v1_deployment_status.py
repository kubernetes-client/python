# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class V1DeploymentStatus(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    DeploymentStatus is the most recently observed status of the Deployment.
    """


    class MetaOapg:
        
        class properties:
            availableReplicas = schemas.Int32Schema
            collisionCount = schemas.Int32Schema
            
            
            class conditions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1DeploymentCondition']:
                        return V1DeploymentCondition
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1DeploymentCondition'], typing.List['V1DeploymentCondition']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'conditions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1DeploymentCondition':
                    return super().__getitem__(i)
            observedGeneration = schemas.Int64Schema
            readyReplicas = schemas.Int32Schema
            replicas = schemas.Int32Schema
            unavailableReplicas = schemas.Int32Schema
            updatedReplicas = schemas.Int32Schema
            __annotations__ = {
                "availableReplicas": availableReplicas,
                "collisionCount": collisionCount,
                "conditions": conditions,
                "observedGeneration": observedGeneration,
                "readyReplicas": readyReplicas,
                "replicas": replicas,
                "unavailableReplicas": unavailableReplicas,
                "updatedReplicas": updatedReplicas,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["availableReplicas"]) -> MetaOapg.properties.availableReplicas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collisionCount"]) -> MetaOapg.properties.collisionCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conditions"]) -> MetaOapg.properties.conditions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["observedGeneration"]) -> MetaOapg.properties.observedGeneration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["readyReplicas"]) -> MetaOapg.properties.readyReplicas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replicas"]) -> MetaOapg.properties.replicas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unavailableReplicas"]) -> MetaOapg.properties.unavailableReplicas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedReplicas"]) -> MetaOapg.properties.updatedReplicas: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["availableReplicas", "collisionCount", "conditions", "observedGeneration", "readyReplicas", "replicas", "unavailableReplicas", "updatedReplicas", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["availableReplicas"]) -> typing.Union[MetaOapg.properties.availableReplicas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collisionCount"]) -> typing.Union[MetaOapg.properties.collisionCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conditions"]) -> typing.Union[MetaOapg.properties.conditions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["observedGeneration"]) -> typing.Union[MetaOapg.properties.observedGeneration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["readyReplicas"]) -> typing.Union[MetaOapg.properties.readyReplicas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replicas"]) -> typing.Union[MetaOapg.properties.replicas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unavailableReplicas"]) -> typing.Union[MetaOapg.properties.unavailableReplicas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedReplicas"]) -> typing.Union[MetaOapg.properties.updatedReplicas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["availableReplicas", "collisionCount", "conditions", "observedGeneration", "readyReplicas", "replicas", "unavailableReplicas", "updatedReplicas", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        availableReplicas: typing.Union[MetaOapg.properties.availableReplicas, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        collisionCount: typing.Union[MetaOapg.properties.collisionCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        conditions: typing.Union[MetaOapg.properties.conditions, list, tuple, schemas.Unset] = schemas.unset,
        observedGeneration: typing.Union[MetaOapg.properties.observedGeneration, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        readyReplicas: typing.Union[MetaOapg.properties.readyReplicas, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        replicas: typing.Union[MetaOapg.properties.replicas, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        unavailableReplicas: typing.Union[MetaOapg.properties.unavailableReplicas, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        updatedReplicas: typing.Union[MetaOapg.properties.updatedReplicas, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1DeploymentStatus':
        return super().__new__(
            cls,
            *args,
            availableReplicas=availableReplicas,
            collisionCount=collisionCount,
            conditions=conditions,
            observedGeneration=observedGeneration,
            readyReplicas=readyReplicas,
            replicas=replicas,
            unavailableReplicas=unavailableReplicas,
            updatedReplicas=updatedReplicas,
            _configuration=_configuration,
            **kwargs,
        )

from kubernetes.client.model.v1_deployment_condition import V1DeploymentCondition
