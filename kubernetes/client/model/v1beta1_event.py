"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.18
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from kubernetes.client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)

def lazy_import():
    from kubernetes.client.model.v1_event_source import V1EventSource
    from kubernetes.client.model.v1_object_meta import V1ObjectMeta
    from kubernetes.client.model.v1_object_reference import V1ObjectReference
    from kubernetes.client.model.v1beta1_event_series import V1beta1EventSeries
    globals()['V1EventSource'] = V1EventSource
    globals()['V1ObjectMeta'] = V1ObjectMeta
    globals()['V1ObjectReference'] = V1ObjectReference
    globals()['V1beta1EventSeries'] = V1beta1EventSeries


class V1beta1Event(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'event_time': (datetime,),  # noqa: E501
            'action': (str,),  # noqa: E501
            'api_version': (str,),  # noqa: E501
            'deprecated_count': (int,),  # noqa: E501
            'deprecated_first_timestamp': (datetime,),  # noqa: E501
            'deprecated_last_timestamp': (datetime,),  # noqa: E501
            'deprecated_source': (V1EventSource,),  # noqa: E501
            'kind': (str,),  # noqa: E501
            'metadata': (V1ObjectMeta,),  # noqa: E501
            'note': (str,),  # noqa: E501
            'reason': (str,),  # noqa: E501
            'regarding': (V1ObjectReference,),  # noqa: E501
            'related': (V1ObjectReference,),  # noqa: E501
            'reporting_controller': (str,),  # noqa: E501
            'reporting_instance': (str,),  # noqa: E501
            'series': (V1beta1EventSeries,),  # noqa: E501
            'type': (str,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'event_time': 'eventTime',  # noqa: E501
        'action': 'action',  # noqa: E501
        'api_version': 'apiVersion',  # noqa: E501
        'deprecated_count': 'deprecatedCount',  # noqa: E501
        'deprecated_first_timestamp': 'deprecatedFirstTimestamp',  # noqa: E501
        'deprecated_last_timestamp': 'deprecatedLastTimestamp',  # noqa: E501
        'deprecated_source': 'deprecatedSource',  # noqa: E501
        'kind': 'kind',  # noqa: E501
        'metadata': 'metadata',  # noqa: E501
        'note': 'note',  # noqa: E501
        'reason': 'reason',  # noqa: E501
        'regarding': 'regarding',  # noqa: E501
        'related': 'related',  # noqa: E501
        'reporting_controller': 'reportingController',  # noqa: E501
        'reporting_instance': 'reportingInstance',  # noqa: E501
        'series': 'series',  # noqa: E501
        'type': 'type',  # noqa: E501
    }

    _composed_schemas = {}

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, event_time, *args, **kwargs):  # noqa: E501
        """V1beta1Event - a model defined in OpenAPI

        Args:
            event_time (datetime): Required. Time when this Event was first observed.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            action (str): What action was taken/failed regarding to the regarding object.. [optional]  # noqa: E501
            api_version (str): APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources. [optional]  # noqa: E501
            deprecated_count (int): Deprecated field assuring backward compatibility with core.v1 Event type. [optional]  # noqa: E501
            deprecated_first_timestamp (datetime): Deprecated field assuring backward compatibility with core.v1 Event type. [optional]  # noqa: E501
            deprecated_last_timestamp (datetime): Deprecated field assuring backward compatibility with core.v1 Event type. [optional]  # noqa: E501
            deprecated_source (V1EventSource): [optional]  # noqa: E501
            kind (str): Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds. [optional]  # noqa: E501
            metadata (V1ObjectMeta): [optional]  # noqa: E501
            note (str): Optional. A human-readable description of the status of this operation. Maximal length of the note is 1kB, but libraries should be prepared to handle values up to 64kB.. [optional]  # noqa: E501
            reason (str): Why the action was taken.. [optional]  # noqa: E501
            regarding (V1ObjectReference): [optional]  # noqa: E501
            related (V1ObjectReference): [optional]  # noqa: E501
            reporting_controller (str): Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.. [optional]  # noqa: E501
            reporting_instance (str): ID of the controller instance, e.g. `kubelet-xyzf`.. [optional]  # noqa: E501
            series (V1beta1EventSeries): [optional]  # noqa: E501
            type (str): Type of this event (Normal, Warning), new types could be added in the future.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.event_time = event_time
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
