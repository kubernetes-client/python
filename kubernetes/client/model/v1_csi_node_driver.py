# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class V1CSINodeDriver(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    CSINodeDriver holds information about the specification of one CSI driver installed on a node
    """


    class MetaOapg:
        required = {
            "name",
            "nodeID",
        }
        
        class properties:
            name = schemas.StrSchema
            nodeID = schemas.StrSchema
        
            @staticmethod
            def allocatable() -> typing.Type['V1VolumeNodeResources']:
                return V1VolumeNodeResources
            
            
            class topologyKeys(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'topologyKeys':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "name": name,
                "nodeID": nodeID,
                "allocatable": allocatable,
                "topologyKeys": topologyKeys,
            }
    
    name: MetaOapg.properties.name
    nodeID: MetaOapg.properties.nodeID
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nodeID"]) -> MetaOapg.properties.nodeID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allocatable"]) -> 'V1VolumeNodeResources': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topologyKeys"]) -> MetaOapg.properties.topologyKeys: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "nodeID", "allocatable", "topologyKeys", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nodeID"]) -> MetaOapg.properties.nodeID: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allocatable"]) -> typing.Union['V1VolumeNodeResources', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topologyKeys"]) -> typing.Union[MetaOapg.properties.topologyKeys, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "nodeID", "allocatable", "topologyKeys", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        nodeID: typing.Union[MetaOapg.properties.nodeID, str, ],
        allocatable: typing.Union['V1VolumeNodeResources', schemas.Unset] = schemas.unset,
        topologyKeys: typing.Union[MetaOapg.properties.topologyKeys, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1CSINodeDriver':
        return super().__new__(
            cls,
            *args,
            name=name,
            nodeID=nodeID,
            allocatable=allocatable,
            topologyKeys=topologyKeys,
            _configuration=_configuration,
            **kwargs,
        )

from kubernetes.client.model.v1_volume_node_resources import V1VolumeNodeResources
