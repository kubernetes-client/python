# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class V1PodFailurePolicyRule(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    PodFailurePolicyRule describes how a pod failure is handled when the requirements are met. One of OnExitCodes and onPodConditions, but not both, can be used in each rule.
    """


    class MetaOapg:
        required = {
            "action",
            "onPodConditions",
        }
        
        class properties:
            action = schemas.StrSchema
            
            
            class onPodConditions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1PodFailurePolicyOnPodConditionsPattern']:
                        return V1PodFailurePolicyOnPodConditionsPattern
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1PodFailurePolicyOnPodConditionsPattern'], typing.List['V1PodFailurePolicyOnPodConditionsPattern']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'onPodConditions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1PodFailurePolicyOnPodConditionsPattern':
                    return super().__getitem__(i)
        
            @staticmethod
            def onExitCodes() -> typing.Type['V1PodFailurePolicyOnExitCodesRequirement']:
                return V1PodFailurePolicyOnExitCodesRequirement
            __annotations__ = {
                "action": action,
                "onPodConditions": onPodConditions,
                "onExitCodes": onExitCodes,
            }
    
    action: MetaOapg.properties.action
    onPodConditions: MetaOapg.properties.onPodConditions
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["action"]) -> MetaOapg.properties.action: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onPodConditions"]) -> MetaOapg.properties.onPodConditions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["onExitCodes"]) -> 'V1PodFailurePolicyOnExitCodesRequirement': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["action", "onPodConditions", "onExitCodes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["action"]) -> MetaOapg.properties.action: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onPodConditions"]) -> MetaOapg.properties.onPodConditions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["onExitCodes"]) -> typing.Union['V1PodFailurePolicyOnExitCodesRequirement', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["action", "onPodConditions", "onExitCodes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        action: typing.Union[MetaOapg.properties.action, str, ],
        onPodConditions: typing.Union[MetaOapg.properties.onPodConditions, list, tuple, ],
        onExitCodes: typing.Union['V1PodFailurePolicyOnExitCodesRequirement', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1PodFailurePolicyRule':
        return super().__new__(
            cls,
            *args,
            action=action,
            onPodConditions=onPodConditions,
            onExitCodes=onExitCodes,
            _configuration=_configuration,
            **kwargs,
        )

from kubernetes.client.model.v1_pod_failure_policy_on_exit_codes_requirement import V1PodFailurePolicyOnExitCodesRequirement
from kubernetes.client.model.v1_pod_failure_policy_on_pod_conditions_pattern import V1PodFailurePolicyOnPodConditionsPattern
