# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from client import schemas  # noqa: F401


class V1VolumeAttachmentSource(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    VolumeAttachmentSource represents a volume that should be attached. Right now only PersistenVolumes can be attached via external attacher, in future we may allow also inline volumes in pods. Exactly one member can be set.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def inlineVolumeSpec() -> typing.Type['V1PersistentVolumeSpec']:
                return V1PersistentVolumeSpec
            persistentVolumeName = schemas.StrSchema
            __annotations__ = {
                "inlineVolumeSpec": inlineVolumeSpec,
                "persistentVolumeName": persistentVolumeName,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["inlineVolumeSpec"]) -> 'V1PersistentVolumeSpec': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["persistentVolumeName"]) -> MetaOapg.properties.persistentVolumeName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["inlineVolumeSpec", "persistentVolumeName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["inlineVolumeSpec"]) -> typing.Union['V1PersistentVolumeSpec', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["persistentVolumeName"]) -> typing.Union[MetaOapg.properties.persistentVolumeName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["inlineVolumeSpec", "persistentVolumeName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        inlineVolumeSpec: typing.Union['V1PersistentVolumeSpec', schemas.Unset] = schemas.unset,
        persistentVolumeName: typing.Union[MetaOapg.properties.persistentVolumeName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1VolumeAttachmentSource':
        return super().__new__(
            cls,
            *args,
            inlineVolumeSpec=inlineVolumeSpec,
            persistentVolumeName=persistentVolumeName,
            _configuration=_configuration,
            **kwargs,
        )

from client.model.v1_persistent_volume_spec import V1PersistentVolumeSpec
