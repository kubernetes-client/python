# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from client import schemas  # noqa: F401


class V1NodeStatus(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    NodeStatus is information about the current status of a node.
    """


    class MetaOapg:
        
        class properties:
            
            
            class addresses(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1NodeAddress']:
                        return V1NodeAddress
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1NodeAddress'], typing.List['V1NodeAddress']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'addresses':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1NodeAddress':
                    return super().__getitem__(i)
            
            
            class allocatable(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'allocatable':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class capacity(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'capacity':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class conditions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1NodeCondition']:
                        return V1NodeCondition
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1NodeCondition'], typing.List['V1NodeCondition']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'conditions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1NodeCondition':
                    return super().__getitem__(i)
        
            @staticmethod
            def config() -> typing.Type['V1NodeConfigStatus']:
                return V1NodeConfigStatus
        
            @staticmethod
            def daemonEndpoints() -> typing.Type['V1NodeDaemonEndpoints']:
                return V1NodeDaemonEndpoints
            
            
            class images(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1ContainerImage']:
                        return V1ContainerImage
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1ContainerImage'], typing.List['V1ContainerImage']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'images':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1ContainerImage':
                    return super().__getitem__(i)
        
            @staticmethod
            def nodeInfo() -> typing.Type['V1NodeSystemInfo']:
                return V1NodeSystemInfo
            phase = schemas.StrSchema
            
            
            class volumesAttached(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1AttachedVolume']:
                        return V1AttachedVolume
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1AttachedVolume'], typing.List['V1AttachedVolume']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'volumesAttached':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1AttachedVolume':
                    return super().__getitem__(i)
            
            
            class volumesInUse(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'volumesInUse':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "addresses": addresses,
                "allocatable": allocatable,
                "capacity": capacity,
                "conditions": conditions,
                "config": config,
                "daemonEndpoints": daemonEndpoints,
                "images": images,
                "nodeInfo": nodeInfo,
                "phase": phase,
                "volumesAttached": volumesAttached,
                "volumesInUse": volumesInUse,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addresses"]) -> MetaOapg.properties.addresses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allocatable"]) -> MetaOapg.properties.allocatable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capacity"]) -> MetaOapg.properties.capacity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conditions"]) -> MetaOapg.properties.conditions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["config"]) -> 'V1NodeConfigStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["daemonEndpoints"]) -> 'V1NodeDaemonEndpoints': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["images"]) -> MetaOapg.properties.images: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nodeInfo"]) -> 'V1NodeSystemInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phase"]) -> MetaOapg.properties.phase: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volumesAttached"]) -> MetaOapg.properties.volumesAttached: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volumesInUse"]) -> MetaOapg.properties.volumesInUse: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["addresses", "allocatable", "capacity", "conditions", "config", "daemonEndpoints", "images", "nodeInfo", "phase", "volumesAttached", "volumesInUse", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addresses"]) -> typing.Union[MetaOapg.properties.addresses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allocatable"]) -> typing.Union[MetaOapg.properties.allocatable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capacity"]) -> typing.Union[MetaOapg.properties.capacity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conditions"]) -> typing.Union[MetaOapg.properties.conditions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["config"]) -> typing.Union['V1NodeConfigStatus', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["daemonEndpoints"]) -> typing.Union['V1NodeDaemonEndpoints', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["images"]) -> typing.Union[MetaOapg.properties.images, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nodeInfo"]) -> typing.Union['V1NodeSystemInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phase"]) -> typing.Union[MetaOapg.properties.phase, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volumesAttached"]) -> typing.Union[MetaOapg.properties.volumesAttached, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volumesInUse"]) -> typing.Union[MetaOapg.properties.volumesInUse, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["addresses", "allocatable", "capacity", "conditions", "config", "daemonEndpoints", "images", "nodeInfo", "phase", "volumesAttached", "volumesInUse", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        addresses: typing.Union[MetaOapg.properties.addresses, list, tuple, schemas.Unset] = schemas.unset,
        allocatable: typing.Union[MetaOapg.properties.allocatable, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        capacity: typing.Union[MetaOapg.properties.capacity, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        conditions: typing.Union[MetaOapg.properties.conditions, list, tuple, schemas.Unset] = schemas.unset,
        config: typing.Union['V1NodeConfigStatus', schemas.Unset] = schemas.unset,
        daemonEndpoints: typing.Union['V1NodeDaemonEndpoints', schemas.Unset] = schemas.unset,
        images: typing.Union[MetaOapg.properties.images, list, tuple, schemas.Unset] = schemas.unset,
        nodeInfo: typing.Union['V1NodeSystemInfo', schemas.Unset] = schemas.unset,
        phase: typing.Union[MetaOapg.properties.phase, str, schemas.Unset] = schemas.unset,
        volumesAttached: typing.Union[MetaOapg.properties.volumesAttached, list, tuple, schemas.Unset] = schemas.unset,
        volumesInUse: typing.Union[MetaOapg.properties.volumesInUse, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1NodeStatus':
        return super().__new__(
            cls,
            *args,
            addresses=addresses,
            allocatable=allocatable,
            capacity=capacity,
            conditions=conditions,
            config=config,
            daemonEndpoints=daemonEndpoints,
            images=images,
            nodeInfo=nodeInfo,
            phase=phase,
            volumesAttached=volumesAttached,
            volumesInUse=volumesInUse,
            _configuration=_configuration,
            **kwargs,
        )

from client.model.v1_attached_volume import V1AttachedVolume
from client.model.v1_container_image import V1ContainerImage
from client.model.v1_node_address import V1NodeAddress
from client.model.v1_node_condition import V1NodeCondition
from client.model.v1_node_config_status import V1NodeConfigStatus
from client.model.v1_node_daemon_endpoints import V1NodeDaemonEndpoints
from client.model.v1_node_system_info import V1NodeSystemInfo
