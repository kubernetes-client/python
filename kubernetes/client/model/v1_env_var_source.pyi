# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from client import schemas  # noqa: F401


class V1EnvVarSource(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    EnvVarSource represents a source for the value of an EnvVar.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def configMapKeyRef() -> typing.Type['V1ConfigMapKeySelector']:
                return V1ConfigMapKeySelector
        
            @staticmethod
            def fieldRef() -> typing.Type['V1ObjectFieldSelector']:
                return V1ObjectFieldSelector
        
            @staticmethod
            def resourceFieldRef() -> typing.Type['V1ResourceFieldSelector']:
                return V1ResourceFieldSelector
        
            @staticmethod
            def secretKeyRef() -> typing.Type['V1SecretKeySelector']:
                return V1SecretKeySelector
            __annotations__ = {
                "configMapKeyRef": configMapKeyRef,
                "fieldRef": fieldRef,
                "resourceFieldRef": resourceFieldRef,
                "secretKeyRef": secretKeyRef,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["configMapKeyRef"]) -> 'V1ConfigMapKeySelector': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldRef"]) -> 'V1ObjectFieldSelector': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resourceFieldRef"]) -> 'V1ResourceFieldSelector': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secretKeyRef"]) -> 'V1SecretKeySelector': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["configMapKeyRef", "fieldRef", "resourceFieldRef", "secretKeyRef", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["configMapKeyRef"]) -> typing.Union['V1ConfigMapKeySelector', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldRef"]) -> typing.Union['V1ObjectFieldSelector', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resourceFieldRef"]) -> typing.Union['V1ResourceFieldSelector', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secretKeyRef"]) -> typing.Union['V1SecretKeySelector', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["configMapKeyRef", "fieldRef", "resourceFieldRef", "secretKeyRef", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        configMapKeyRef: typing.Union['V1ConfigMapKeySelector', schemas.Unset] = schemas.unset,
        fieldRef: typing.Union['V1ObjectFieldSelector', schemas.Unset] = schemas.unset,
        resourceFieldRef: typing.Union['V1ResourceFieldSelector', schemas.Unset] = schemas.unset,
        secretKeyRef: typing.Union['V1SecretKeySelector', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1EnvVarSource':
        return super().__new__(
            cls,
            *args,
            configMapKeyRef=configMapKeyRef,
            fieldRef=fieldRef,
            resourceFieldRef=resourceFieldRef,
            secretKeyRef=secretKeyRef,
            _configuration=_configuration,
            **kwargs,
        )

from client.model.v1_config_map_key_selector import V1ConfigMapKeySelector
from client.model.v1_object_field_selector import V1ObjectFieldSelector
from client.model.v1_resource_field_selector import V1ResourceFieldSelector
from client.model.v1_secret_key_selector import V1SecretKeySelector
