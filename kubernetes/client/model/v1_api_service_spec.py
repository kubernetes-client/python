# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class V1APIServiceSpec(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.
    """


    class MetaOapg:
        required = {
            "groupPriorityMinimum",
            "versionPriority",
        }
        
        class properties:
            groupPriorityMinimum = schemas.Int32Schema
            versionPriority = schemas.Int32Schema
            
            
            class caBundle(
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    format = 'byte'
                    regex=[{
                        'pattern': r'^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$',  # noqa: E501
                    }]
            group = schemas.StrSchema
            insecureSkipTLSVerify = schemas.BoolSchema
        
            @staticmethod
            def service() -> typing.Type['ApiregistrationV1ServiceReference']:
                return ApiregistrationV1ServiceReference
            version = schemas.StrSchema
            __annotations__ = {
                "groupPriorityMinimum": groupPriorityMinimum,
                "versionPriority": versionPriority,
                "caBundle": caBundle,
                "group": group,
                "insecureSkipTLSVerify": insecureSkipTLSVerify,
                "service": service,
                "version": version,
            }
    
    groupPriorityMinimum: MetaOapg.properties.groupPriorityMinimum
    versionPriority: MetaOapg.properties.versionPriority
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupPriorityMinimum"]) -> MetaOapg.properties.groupPriorityMinimum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["versionPriority"]) -> MetaOapg.properties.versionPriority: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caBundle"]) -> MetaOapg.properties.caBundle: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group"]) -> MetaOapg.properties.group: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["insecureSkipTLSVerify"]) -> MetaOapg.properties.insecureSkipTLSVerify: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["service"]) -> 'ApiregistrationV1ServiceReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["groupPriorityMinimum", "versionPriority", "caBundle", "group", "insecureSkipTLSVerify", "service", "version", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupPriorityMinimum"]) -> MetaOapg.properties.groupPriorityMinimum: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["versionPriority"]) -> MetaOapg.properties.versionPriority: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caBundle"]) -> typing.Union[MetaOapg.properties.caBundle, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group"]) -> typing.Union[MetaOapg.properties.group, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["insecureSkipTLSVerify"]) -> typing.Union[MetaOapg.properties.insecureSkipTLSVerify, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["service"]) -> typing.Union['ApiregistrationV1ServiceReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["groupPriorityMinimum", "versionPriority", "caBundle", "group", "insecureSkipTLSVerify", "service", "version", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        groupPriorityMinimum: typing.Union[MetaOapg.properties.groupPriorityMinimum, decimal.Decimal, int, ],
        versionPriority: typing.Union[MetaOapg.properties.versionPriority, decimal.Decimal, int, ],
        caBundle: typing.Union[MetaOapg.properties.caBundle, str, schemas.Unset] = schemas.unset,
        group: typing.Union[MetaOapg.properties.group, str, schemas.Unset] = schemas.unset,
        insecureSkipTLSVerify: typing.Union[MetaOapg.properties.insecureSkipTLSVerify, bool, schemas.Unset] = schemas.unset,
        service: typing.Union['ApiregistrationV1ServiceReference', schemas.Unset] = schemas.unset,
        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1APIServiceSpec':
        return super().__new__(
            cls,
            *args,
            groupPriorityMinimum=groupPriorityMinimum,
            versionPriority=versionPriority,
            caBundle=caBundle,
            group=group,
            insecureSkipTLSVerify=insecureSkipTLSVerify,
            service=service,
            version=version,
            _configuration=_configuration,
            **kwargs,
        )

from kubernetes.client.model.apiregistration_v1_service_reference import ApiregistrationV1ServiceReference
