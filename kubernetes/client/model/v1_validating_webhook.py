# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class V1ValidatingWebhook(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ValidatingWebhook describes an admission webhook and the resources and operations it applies to.
    """


    class MetaOapg:
        required = {
            "admissionReviewVersions",
            "name",
            "clientConfig",
            "sideEffects",
        }
        
        class properties:
            
            
            class admissionReviewVersions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'admissionReviewVersions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def clientConfig() -> typing.Type['AdmissionregistrationV1WebhookClientConfig']:
                return AdmissionregistrationV1WebhookClientConfig
            name = schemas.StrSchema
            sideEffects = schemas.StrSchema
            failurePolicy = schemas.StrSchema
            matchPolicy = schemas.StrSchema
        
            @staticmethod
            def namespaceSelector() -> typing.Type['V1LabelSelector']:
                return V1LabelSelector
        
            @staticmethod
            def objectSelector() -> typing.Type['V1LabelSelector']:
                return V1LabelSelector
            
            
            class rules(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1RuleWithOperations']:
                        return V1RuleWithOperations
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1RuleWithOperations'], typing.List['V1RuleWithOperations']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'rules':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1RuleWithOperations':
                    return super().__getitem__(i)
            timeoutSeconds = schemas.Int32Schema
            __annotations__ = {
                "admissionReviewVersions": admissionReviewVersions,
                "clientConfig": clientConfig,
                "name": name,
                "sideEffects": sideEffects,
                "failurePolicy": failurePolicy,
                "matchPolicy": matchPolicy,
                "namespaceSelector": namespaceSelector,
                "objectSelector": objectSelector,
                "rules": rules,
                "timeoutSeconds": timeoutSeconds,
            }
    
    admissionReviewVersions: MetaOapg.properties.admissionReviewVersions
    name: MetaOapg.properties.name
    clientConfig: 'AdmissionregistrationV1WebhookClientConfig'
    sideEffects: MetaOapg.properties.sideEffects
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["admissionReviewVersions"]) -> MetaOapg.properties.admissionReviewVersions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientConfig"]) -> 'AdmissionregistrationV1WebhookClientConfig': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sideEffects"]) -> MetaOapg.properties.sideEffects: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["failurePolicy"]) -> MetaOapg.properties.failurePolicy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["matchPolicy"]) -> MetaOapg.properties.matchPolicy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["namespaceSelector"]) -> 'V1LabelSelector': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["objectSelector"]) -> 'V1LabelSelector': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rules"]) -> MetaOapg.properties.rules: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeoutSeconds"]) -> MetaOapg.properties.timeoutSeconds: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["admissionReviewVersions", "clientConfig", "name", "sideEffects", "failurePolicy", "matchPolicy", "namespaceSelector", "objectSelector", "rules", "timeoutSeconds", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["admissionReviewVersions"]) -> MetaOapg.properties.admissionReviewVersions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientConfig"]) -> 'AdmissionregistrationV1WebhookClientConfig': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sideEffects"]) -> MetaOapg.properties.sideEffects: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["failurePolicy"]) -> typing.Union[MetaOapg.properties.failurePolicy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["matchPolicy"]) -> typing.Union[MetaOapg.properties.matchPolicy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["namespaceSelector"]) -> typing.Union['V1LabelSelector', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["objectSelector"]) -> typing.Union['V1LabelSelector', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rules"]) -> typing.Union[MetaOapg.properties.rules, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeoutSeconds"]) -> typing.Union[MetaOapg.properties.timeoutSeconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["admissionReviewVersions", "clientConfig", "name", "sideEffects", "failurePolicy", "matchPolicy", "namespaceSelector", "objectSelector", "rules", "timeoutSeconds", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        admissionReviewVersions: typing.Union[MetaOapg.properties.admissionReviewVersions, list, tuple, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        clientConfig: 'AdmissionregistrationV1WebhookClientConfig',
        sideEffects: typing.Union[MetaOapg.properties.sideEffects, str, ],
        failurePolicy: typing.Union[MetaOapg.properties.failurePolicy, str, schemas.Unset] = schemas.unset,
        matchPolicy: typing.Union[MetaOapg.properties.matchPolicy, str, schemas.Unset] = schemas.unset,
        namespaceSelector: typing.Union['V1LabelSelector', schemas.Unset] = schemas.unset,
        objectSelector: typing.Union['V1LabelSelector', schemas.Unset] = schemas.unset,
        rules: typing.Union[MetaOapg.properties.rules, list, tuple, schemas.Unset] = schemas.unset,
        timeoutSeconds: typing.Union[MetaOapg.properties.timeoutSeconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1ValidatingWebhook':
        return super().__new__(
            cls,
            *args,
            admissionReviewVersions=admissionReviewVersions,
            name=name,
            clientConfig=clientConfig,
            sideEffects=sideEffects,
            failurePolicy=failurePolicy,
            matchPolicy=matchPolicy,
            namespaceSelector=namespaceSelector,
            objectSelector=objectSelector,
            rules=rules,
            timeoutSeconds=timeoutSeconds,
            _configuration=_configuration,
            **kwargs,
        )

from kubernetes.client.model.admissionregistration_v1_webhook_client_config import AdmissionregistrationV1WebhookClientConfig
from kubernetes.client.model.v1_label_selector import V1LabelSelector
from kubernetes.client.model.v1_rule_with_operations import V1RuleWithOperations
