# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from client import schemas  # noqa: F401


class V1PodAffinityTerm(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
    """


    class MetaOapg:
        required = {
            "topologyKey",
        }
        
        class properties:
            topologyKey = schemas.StrSchema
        
            @staticmethod
            def labelSelector() -> typing.Type['V1LabelSelector']:
                return V1LabelSelector
        
            @staticmethod
            def namespaceSelector() -> typing.Type['V1LabelSelector']:
                return V1LabelSelector
            
            
            class namespaces(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'namespaces':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "topologyKey": topologyKey,
                "labelSelector": labelSelector,
                "namespaceSelector": namespaceSelector,
                "namespaces": namespaces,
            }
    
    topologyKey: MetaOapg.properties.topologyKey
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topologyKey"]) -> MetaOapg.properties.topologyKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["labelSelector"]) -> 'V1LabelSelector': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["namespaceSelector"]) -> 'V1LabelSelector': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["namespaces"]) -> MetaOapg.properties.namespaces: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["topologyKey", "labelSelector", "namespaceSelector", "namespaces", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topologyKey"]) -> MetaOapg.properties.topologyKey: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["labelSelector"]) -> typing.Union['V1LabelSelector', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["namespaceSelector"]) -> typing.Union['V1LabelSelector', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["namespaces"]) -> typing.Union[MetaOapg.properties.namespaces, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["topologyKey", "labelSelector", "namespaceSelector", "namespaces", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        topologyKey: typing.Union[MetaOapg.properties.topologyKey, str, ],
        labelSelector: typing.Union['V1LabelSelector', schemas.Unset] = schemas.unset,
        namespaceSelector: typing.Union['V1LabelSelector', schemas.Unset] = schemas.unset,
        namespaces: typing.Union[MetaOapg.properties.namespaces, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1PodAffinityTerm':
        return super().__new__(
            cls,
            *args,
            topologyKey=topologyKey,
            labelSelector=labelSelector,
            namespaceSelector=namespaceSelector,
            namespaces=namespaces,
            _configuration=_configuration,
            **kwargs,
        )

from client.model.v1_label_selector import V1LabelSelector
