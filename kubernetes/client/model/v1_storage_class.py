# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class V1StorageClass(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    StorageClass describes the parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.

StorageClasses are non-namespaced; the name of the storage class according to etcd is in ObjectMeta.Name.
    """


    class MetaOapg:
        required = {
            "provisioner",
        }
        
        class properties:
            provisioner = schemas.StrSchema
            allowVolumeExpansion = schemas.BoolSchema
            
            
            class allowedTopologies(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1TopologySelectorTerm']:
                        return V1TopologySelectorTerm
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1TopologySelectorTerm'], typing.List['V1TopologySelectorTerm']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'allowedTopologies':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1TopologySelectorTerm':
                    return super().__getitem__(i)
            apiVersion = schemas.StrSchema
            kind = schemas.StrSchema
        
            @staticmethod
            def metadata() -> typing.Type['V1ObjectMeta']:
                return V1ObjectMeta
            
            
            class mountOptions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mountOptions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class parameters(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'parameters':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            reclaimPolicy = schemas.StrSchema
            volumeBindingMode = schemas.StrSchema
            __annotations__ = {
                "provisioner": provisioner,
                "allowVolumeExpansion": allowVolumeExpansion,
                "allowedTopologies": allowedTopologies,
                "apiVersion": apiVersion,
                "kind": kind,
                "metadata": metadata,
                "mountOptions": mountOptions,
                "parameters": parameters,
                "reclaimPolicy": reclaimPolicy,
                "volumeBindingMode": volumeBindingMode,
            }
    
    provisioner: MetaOapg.properties.provisioner
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provisioner"]) -> MetaOapg.properties.provisioner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowVolumeExpansion"]) -> MetaOapg.properties.allowVolumeExpansion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowedTopologies"]) -> MetaOapg.properties.allowedTopologies: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apiVersion"]) -> MetaOapg.properties.apiVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kind"]) -> MetaOapg.properties.kind: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'V1ObjectMeta': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mountOptions"]) -> MetaOapg.properties.mountOptions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parameters"]) -> MetaOapg.properties.parameters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reclaimPolicy"]) -> MetaOapg.properties.reclaimPolicy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volumeBindingMode"]) -> MetaOapg.properties.volumeBindingMode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["provisioner", "allowVolumeExpansion", "allowedTopologies", "apiVersion", "kind", "metadata", "mountOptions", "parameters", "reclaimPolicy", "volumeBindingMode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provisioner"]) -> MetaOapg.properties.provisioner: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowVolumeExpansion"]) -> typing.Union[MetaOapg.properties.allowVolumeExpansion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowedTopologies"]) -> typing.Union[MetaOapg.properties.allowedTopologies, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apiVersion"]) -> typing.Union[MetaOapg.properties.apiVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kind"]) -> typing.Union[MetaOapg.properties.kind, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union['V1ObjectMeta', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mountOptions"]) -> typing.Union[MetaOapg.properties.mountOptions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parameters"]) -> typing.Union[MetaOapg.properties.parameters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reclaimPolicy"]) -> typing.Union[MetaOapg.properties.reclaimPolicy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volumeBindingMode"]) -> typing.Union[MetaOapg.properties.volumeBindingMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["provisioner", "allowVolumeExpansion", "allowedTopologies", "apiVersion", "kind", "metadata", "mountOptions", "parameters", "reclaimPolicy", "volumeBindingMode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        provisioner: typing.Union[MetaOapg.properties.provisioner, str, ],
        allowVolumeExpansion: typing.Union[MetaOapg.properties.allowVolumeExpansion, bool, schemas.Unset] = schemas.unset,
        allowedTopologies: typing.Union[MetaOapg.properties.allowedTopologies, list, tuple, schemas.Unset] = schemas.unset,
        apiVersion: typing.Union[MetaOapg.properties.apiVersion, str, schemas.Unset] = schemas.unset,
        kind: typing.Union[MetaOapg.properties.kind, str, schemas.Unset] = schemas.unset,
        metadata: typing.Union['V1ObjectMeta', schemas.Unset] = schemas.unset,
        mountOptions: typing.Union[MetaOapg.properties.mountOptions, list, tuple, schemas.Unset] = schemas.unset,
        parameters: typing.Union[MetaOapg.properties.parameters, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        reclaimPolicy: typing.Union[MetaOapg.properties.reclaimPolicy, str, schemas.Unset] = schemas.unset,
        volumeBindingMode: typing.Union[MetaOapg.properties.volumeBindingMode, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1StorageClass':
        return super().__new__(
            cls,
            *args,
            provisioner=provisioner,
            allowVolumeExpansion=allowVolumeExpansion,
            allowedTopologies=allowedTopologies,
            apiVersion=apiVersion,
            kind=kind,
            metadata=metadata,
            mountOptions=mountOptions,
            parameters=parameters,
            reclaimPolicy=reclaimPolicy,
            volumeBindingMode=volumeBindingMode,
            _configuration=_configuration,
            **kwargs,
        )

from kubernetes.client.model.v1_object_meta import V1ObjectMeta
from kubernetes.client.model.v1_topology_selector_term import V1TopologySelectorTerm
