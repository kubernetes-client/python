# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class V1ObjectMeta(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
    """


    class MetaOapg:
        
        class properties:
            
            
            class annotations(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'annotations':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            creationTimestamp = schemas.DateTimeSchema
            deletionGracePeriodSeconds = schemas.Int64Schema
            deletionTimestamp = schemas.DateTimeSchema
            
            
            class finalizers(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'finalizers':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            generateName = schemas.StrSchema
            generation = schemas.Int64Schema
            
            
            class labels(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'labels':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class managedFields(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1ManagedFieldsEntry']:
                        return V1ManagedFieldsEntry
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1ManagedFieldsEntry'], typing.List['V1ManagedFieldsEntry']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'managedFields':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1ManagedFieldsEntry':
                    return super().__getitem__(i)
            name = schemas.StrSchema
            namespace = schemas.StrSchema
            
            
            class ownerReferences(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1OwnerReference']:
                        return V1OwnerReference
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1OwnerReference'], typing.List['V1OwnerReference']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ownerReferences':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1OwnerReference':
                    return super().__getitem__(i)
            resourceVersion = schemas.StrSchema
            selfLink = schemas.StrSchema
            uid = schemas.StrSchema
            __annotations__ = {
                "annotations": annotations,
                "creationTimestamp": creationTimestamp,
                "deletionGracePeriodSeconds": deletionGracePeriodSeconds,
                "deletionTimestamp": deletionTimestamp,
                "finalizers": finalizers,
                "generateName": generateName,
                "generation": generation,
                "labels": labels,
                "managedFields": managedFields,
                "name": name,
                "namespace": namespace,
                "ownerReferences": ownerReferences,
                "resourceVersion": resourceVersion,
                "selfLink": selfLink,
                "uid": uid,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["annotations"]) -> MetaOapg.properties.annotations: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creationTimestamp"]) -> MetaOapg.properties.creationTimestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deletionGracePeriodSeconds"]) -> MetaOapg.properties.deletionGracePeriodSeconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deletionTimestamp"]) -> MetaOapg.properties.deletionTimestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["finalizers"]) -> MetaOapg.properties.finalizers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["generateName"]) -> MetaOapg.properties.generateName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["generation"]) -> MetaOapg.properties.generation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["labels"]) -> MetaOapg.properties.labels: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["managedFields"]) -> MetaOapg.properties.managedFields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["namespace"]) -> MetaOapg.properties.namespace: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ownerReferences"]) -> MetaOapg.properties.ownerReferences: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resourceVersion"]) -> MetaOapg.properties.resourceVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["selfLink"]) -> MetaOapg.properties.selfLink: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uid"]) -> MetaOapg.properties.uid: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["annotations", "creationTimestamp", "deletionGracePeriodSeconds", "deletionTimestamp", "finalizers", "generateName", "generation", "labels", "managedFields", "name", "namespace", "ownerReferences", "resourceVersion", "selfLink", "uid", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["annotations"]) -> typing.Union[MetaOapg.properties.annotations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creationTimestamp"]) -> typing.Union[MetaOapg.properties.creationTimestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deletionGracePeriodSeconds"]) -> typing.Union[MetaOapg.properties.deletionGracePeriodSeconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deletionTimestamp"]) -> typing.Union[MetaOapg.properties.deletionTimestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["finalizers"]) -> typing.Union[MetaOapg.properties.finalizers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["generateName"]) -> typing.Union[MetaOapg.properties.generateName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["generation"]) -> typing.Union[MetaOapg.properties.generation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["labels"]) -> typing.Union[MetaOapg.properties.labels, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["managedFields"]) -> typing.Union[MetaOapg.properties.managedFields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["namespace"]) -> typing.Union[MetaOapg.properties.namespace, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ownerReferences"]) -> typing.Union[MetaOapg.properties.ownerReferences, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resourceVersion"]) -> typing.Union[MetaOapg.properties.resourceVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["selfLink"]) -> typing.Union[MetaOapg.properties.selfLink, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uid"]) -> typing.Union[MetaOapg.properties.uid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["annotations", "creationTimestamp", "deletionGracePeriodSeconds", "deletionTimestamp", "finalizers", "generateName", "generation", "labels", "managedFields", "name", "namespace", "ownerReferences", "resourceVersion", "selfLink", "uid", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        annotations: typing.Union[MetaOapg.properties.annotations, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        creationTimestamp: typing.Union[MetaOapg.properties.creationTimestamp, str, datetime, schemas.Unset] = schemas.unset,
        deletionGracePeriodSeconds: typing.Union[MetaOapg.properties.deletionGracePeriodSeconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        deletionTimestamp: typing.Union[MetaOapg.properties.deletionTimestamp, str, datetime, schemas.Unset] = schemas.unset,
        finalizers: typing.Union[MetaOapg.properties.finalizers, list, tuple, schemas.Unset] = schemas.unset,
        generateName: typing.Union[MetaOapg.properties.generateName, str, schemas.Unset] = schemas.unset,
        generation: typing.Union[MetaOapg.properties.generation, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        labels: typing.Union[MetaOapg.properties.labels, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        managedFields: typing.Union[MetaOapg.properties.managedFields, list, tuple, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        namespace: typing.Union[MetaOapg.properties.namespace, str, schemas.Unset] = schemas.unset,
        ownerReferences: typing.Union[MetaOapg.properties.ownerReferences, list, tuple, schemas.Unset] = schemas.unset,
        resourceVersion: typing.Union[MetaOapg.properties.resourceVersion, str, schemas.Unset] = schemas.unset,
        selfLink: typing.Union[MetaOapg.properties.selfLink, str, schemas.Unset] = schemas.unset,
        uid: typing.Union[MetaOapg.properties.uid, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1ObjectMeta':
        return super().__new__(
            cls,
            *args,
            annotations=annotations,
            creationTimestamp=creationTimestamp,
            deletionGracePeriodSeconds=deletionGracePeriodSeconds,
            deletionTimestamp=deletionTimestamp,
            finalizers=finalizers,
            generateName=generateName,
            generation=generation,
            labels=labels,
            managedFields=managedFields,
            name=name,
            namespace=namespace,
            ownerReferences=ownerReferences,
            resourceVersion=resourceVersion,
            selfLink=selfLink,
            uid=uid,
            _configuration=_configuration,
            **kwargs,
        )

from kubernetes.client.model.v1_managed_fields_entry import V1ManagedFieldsEntry
from kubernetes.client.model.v1_owner_reference import V1OwnerReference
