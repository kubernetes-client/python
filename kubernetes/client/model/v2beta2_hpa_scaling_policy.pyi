# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from client import schemas  # noqa: F401


class V2beta2HPAScalingPolicy(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    HPAScalingPolicy is a single policy which must hold true for a specified past interval.
    """


    class MetaOapg:
        required = {
            "periodSeconds",
            "type",
            "value",
        }
        
        class properties:
            periodSeconds = schemas.Int32Schema
            type = schemas.StrSchema
            value = schemas.Int32Schema
            __annotations__ = {
                "periodSeconds": periodSeconds,
                "type": type,
                "value": value,
            }
    
    periodSeconds: MetaOapg.properties.periodSeconds
    type: MetaOapg.properties.type
    value: MetaOapg.properties.value
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periodSeconds"]) -> MetaOapg.properties.periodSeconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["periodSeconds", "type", "value", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periodSeconds"]) -> MetaOapg.properties.periodSeconds: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["periodSeconds", "type", "value", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        periodSeconds: typing.Union[MetaOapg.properties.periodSeconds, decimal.Decimal, int, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        value: typing.Union[MetaOapg.properties.value, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V2beta2HPAScalingPolicy':
        return super().__new__(
            cls,
            *args,
            periodSeconds=periodSeconds,
            type=type,
            value=value,
            _configuration=_configuration,
            **kwargs,
        )
