# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from client import schemas  # noqa: F401


class V1NetworkPolicySpec(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    NetworkPolicySpec provides the specification of a NetworkPolicy
    """


    class MetaOapg:
        required = {
            "podSelector",
        }
        
        class properties:
        
            @staticmethod
            def podSelector() -> typing.Type['V1LabelSelector']:
                return V1LabelSelector
            
            
            class egress(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1NetworkPolicyEgressRule']:
                        return V1NetworkPolicyEgressRule
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1NetworkPolicyEgressRule'], typing.List['V1NetworkPolicyEgressRule']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'egress':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1NetworkPolicyEgressRule':
                    return super().__getitem__(i)
            
            
            class ingress(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1NetworkPolicyIngressRule']:
                        return V1NetworkPolicyIngressRule
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1NetworkPolicyIngressRule'], typing.List['V1NetworkPolicyIngressRule']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ingress':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1NetworkPolicyIngressRule':
                    return super().__getitem__(i)
            
            
            class policyTypes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'policyTypes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "podSelector": podSelector,
                "egress": egress,
                "ingress": ingress,
                "policyTypes": policyTypes,
            }
    
    podSelector: 'V1LabelSelector'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["podSelector"]) -> 'V1LabelSelector': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["egress"]) -> MetaOapg.properties.egress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ingress"]) -> MetaOapg.properties.ingress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["policyTypes"]) -> MetaOapg.properties.policyTypes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["podSelector", "egress", "ingress", "policyTypes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["podSelector"]) -> 'V1LabelSelector': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["egress"]) -> typing.Union[MetaOapg.properties.egress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ingress"]) -> typing.Union[MetaOapg.properties.ingress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["policyTypes"]) -> typing.Union[MetaOapg.properties.policyTypes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["podSelector", "egress", "ingress", "policyTypes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        podSelector: 'V1LabelSelector',
        egress: typing.Union[MetaOapg.properties.egress, list, tuple, schemas.Unset] = schemas.unset,
        ingress: typing.Union[MetaOapg.properties.ingress, list, tuple, schemas.Unset] = schemas.unset,
        policyTypes: typing.Union[MetaOapg.properties.policyTypes, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1NetworkPolicySpec':
        return super().__new__(
            cls,
            *args,
            podSelector=podSelector,
            egress=egress,
            ingress=ingress,
            policyTypes=policyTypes,
            _configuration=_configuration,
            **kwargs,
        )

from client.model.v1_label_selector import V1LabelSelector
from client.model.v1_network_policy_egress_rule import V1NetworkPolicyEgressRule
from client.model.v1_network_policy_ingress_rule import V1NetworkPolicyIngressRule
