# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class V1JobStatus(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    JobStatus represents the current state of a Job.
    """


    class MetaOapg:
        
        class properties:
            active = schemas.Int32Schema
            completedIndexes = schemas.StrSchema
            completionTime = schemas.DateTimeSchema
            
            
            class conditions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1JobCondition']:
                        return V1JobCondition
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1JobCondition'], typing.List['V1JobCondition']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'conditions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1JobCondition':
                    return super().__getitem__(i)
            failed = schemas.Int32Schema
            ready = schemas.Int32Schema
            startTime = schemas.DateTimeSchema
            succeeded = schemas.Int32Schema
        
            @staticmethod
            def uncountedTerminatedPods() -> typing.Type['V1UncountedTerminatedPods']:
                return V1UncountedTerminatedPods
            __annotations__ = {
                "active": active,
                "completedIndexes": completedIndexes,
                "completionTime": completionTime,
                "conditions": conditions,
                "failed": failed,
                "ready": ready,
                "startTime": startTime,
                "succeeded": succeeded,
                "uncountedTerminatedPods": uncountedTerminatedPods,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completedIndexes"]) -> MetaOapg.properties.completedIndexes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completionTime"]) -> MetaOapg.properties.completionTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conditions"]) -> MetaOapg.properties.conditions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["failed"]) -> MetaOapg.properties.failed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ready"]) -> MetaOapg.properties.ready: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startTime"]) -> MetaOapg.properties.startTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["succeeded"]) -> MetaOapg.properties.succeeded: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uncountedTerminatedPods"]) -> 'V1UncountedTerminatedPods': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["active", "completedIndexes", "completionTime", "conditions", "failed", "ready", "startTime", "succeeded", "uncountedTerminatedPods", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union[MetaOapg.properties.active, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completedIndexes"]) -> typing.Union[MetaOapg.properties.completedIndexes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completionTime"]) -> typing.Union[MetaOapg.properties.completionTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conditions"]) -> typing.Union[MetaOapg.properties.conditions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["failed"]) -> typing.Union[MetaOapg.properties.failed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ready"]) -> typing.Union[MetaOapg.properties.ready, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startTime"]) -> typing.Union[MetaOapg.properties.startTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["succeeded"]) -> typing.Union[MetaOapg.properties.succeeded, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uncountedTerminatedPods"]) -> typing.Union['V1UncountedTerminatedPods', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["active", "completedIndexes", "completionTime", "conditions", "failed", "ready", "startTime", "succeeded", "uncountedTerminatedPods", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        active: typing.Union[MetaOapg.properties.active, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        completedIndexes: typing.Union[MetaOapg.properties.completedIndexes, str, schemas.Unset] = schemas.unset,
        completionTime: typing.Union[MetaOapg.properties.completionTime, str, datetime, schemas.Unset] = schemas.unset,
        conditions: typing.Union[MetaOapg.properties.conditions, list, tuple, schemas.Unset] = schemas.unset,
        failed: typing.Union[MetaOapg.properties.failed, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        ready: typing.Union[MetaOapg.properties.ready, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        startTime: typing.Union[MetaOapg.properties.startTime, str, datetime, schemas.Unset] = schemas.unset,
        succeeded: typing.Union[MetaOapg.properties.succeeded, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        uncountedTerminatedPods: typing.Union['V1UncountedTerminatedPods', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1JobStatus':
        return super().__new__(
            cls,
            *args,
            active=active,
            completedIndexes=completedIndexes,
            completionTime=completionTime,
            conditions=conditions,
            failed=failed,
            ready=ready,
            startTime=startTime,
            succeeded=succeeded,
            uncountedTerminatedPods=uncountedTerminatedPods,
            _configuration=_configuration,
            **kwargs,
        )

from kubernetes.client.model.v1_job_condition import V1JobCondition
from kubernetes.client.model.v1_uncounted_terminated_pods import V1UncountedTerminatedPods
