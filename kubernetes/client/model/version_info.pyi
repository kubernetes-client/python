# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from client import schemas  # noqa: F401


class VersionInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Info contains versioning information. how we'll want to distribute that information.
    """


    class MetaOapg:
        required = {
            "gitVersion",
            "gitCommit",
            "major",
            "minor",
            "goVersion",
            "buildDate",
            "compiler",
            "gitTreeState",
            "platform",
        }
        
        class properties:
            buildDate = schemas.StrSchema
            compiler = schemas.StrSchema
            gitCommit = schemas.StrSchema
            gitTreeState = schemas.StrSchema
            gitVersion = schemas.StrSchema
            goVersion = schemas.StrSchema
            major = schemas.StrSchema
            minor = schemas.StrSchema
            platform = schemas.StrSchema
            __annotations__ = {
                "buildDate": buildDate,
                "compiler": compiler,
                "gitCommit": gitCommit,
                "gitTreeState": gitTreeState,
                "gitVersion": gitVersion,
                "goVersion": goVersion,
                "major": major,
                "minor": minor,
                "platform": platform,
            }
    
    gitVersion: MetaOapg.properties.gitVersion
    gitCommit: MetaOapg.properties.gitCommit
    major: MetaOapg.properties.major
    minor: MetaOapg.properties.minor
    goVersion: MetaOapg.properties.goVersion
    buildDate: MetaOapg.properties.buildDate
    compiler: MetaOapg.properties.compiler
    gitTreeState: MetaOapg.properties.gitTreeState
    platform: MetaOapg.properties.platform
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buildDate"]) -> MetaOapg.properties.buildDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["compiler"]) -> MetaOapg.properties.compiler: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gitCommit"]) -> MetaOapg.properties.gitCommit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gitTreeState"]) -> MetaOapg.properties.gitTreeState: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gitVersion"]) -> MetaOapg.properties.gitVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["goVersion"]) -> MetaOapg.properties.goVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["major"]) -> MetaOapg.properties.major: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minor"]) -> MetaOapg.properties.minor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["platform"]) -> MetaOapg.properties.platform: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["buildDate", "compiler", "gitCommit", "gitTreeState", "gitVersion", "goVersion", "major", "minor", "platform", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buildDate"]) -> MetaOapg.properties.buildDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["compiler"]) -> MetaOapg.properties.compiler: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gitCommit"]) -> MetaOapg.properties.gitCommit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gitTreeState"]) -> MetaOapg.properties.gitTreeState: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gitVersion"]) -> MetaOapg.properties.gitVersion: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["goVersion"]) -> MetaOapg.properties.goVersion: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["major"]) -> MetaOapg.properties.major: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minor"]) -> MetaOapg.properties.minor: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["platform"]) -> MetaOapg.properties.platform: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["buildDate", "compiler", "gitCommit", "gitTreeState", "gitVersion", "goVersion", "major", "minor", "platform", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        gitVersion: typing.Union[MetaOapg.properties.gitVersion, str, ],
        gitCommit: typing.Union[MetaOapg.properties.gitCommit, str, ],
        major: typing.Union[MetaOapg.properties.major, str, ],
        minor: typing.Union[MetaOapg.properties.minor, str, ],
        goVersion: typing.Union[MetaOapg.properties.goVersion, str, ],
        buildDate: typing.Union[MetaOapg.properties.buildDate, str, ],
        compiler: typing.Union[MetaOapg.properties.compiler, str, ],
        gitTreeState: typing.Union[MetaOapg.properties.gitTreeState, str, ],
        platform: typing.Union[MetaOapg.properties.platform, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VersionInfo':
        return super().__new__(
            cls,
            *args,
            gitVersion=gitVersion,
            gitCommit=gitCommit,
            major=major,
            minor=minor,
            goVersion=goVersion,
            buildDate=buildDate,
            compiler=compiler,
            gitTreeState=gitTreeState,
            platform=platform,
            _configuration=_configuration,
            **kwargs,
        )
