# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class V1JSONSchemaProps(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).
    """


    class MetaOapg:
        
        class properties:
            ref = schemas.StrSchema
            schema = schemas.StrSchema
            additionalItems = schemas.DictSchema
            additionalProperties = schemas.DictSchema
            
            
            class allOf(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1JSONSchemaProps']:
                        return V1JSONSchemaProps
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1JSONSchemaProps'], typing.List['V1JSONSchemaProps']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'allOf':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1JSONSchemaProps':
                    return super().__getitem__(i)
            
            
            class anyOf(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1JSONSchemaProps']:
                        return V1JSONSchemaProps
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1JSONSchemaProps'], typing.List['V1JSONSchemaProps']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'anyOf':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1JSONSchemaProps':
                    return super().__getitem__(i)
            default = schemas.DictSchema
            
            
            class definitions(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def additional_properties() -> typing.Type['V1JSONSchemaProps']:
                        return V1JSONSchemaProps
                
                def __getitem__(self, name: typing.Union[str, ]) -> 'V1JSONSchemaProps':
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> 'V1JSONSchemaProps':
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: 'V1JSONSchemaProps',
                ) -> 'definitions':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class dependencies(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.DictSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, ],
                ) -> 'dependencies':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            description = schemas.StrSchema
            
            
            class enum(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.DictSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'enum':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            example = schemas.DictSchema
            exclusiveMaximum = schemas.BoolSchema
            exclusiveMinimum = schemas.BoolSchema
        
            @staticmethod
            def externalDocs() -> typing.Type['V1ExternalDocumentation']:
                return V1ExternalDocumentation
            format = schemas.StrSchema
            id = schemas.StrSchema
            items = schemas.DictSchema
            maxItems = schemas.Int64Schema
            maxLength = schemas.Int64Schema
            maxProperties = schemas.Int64Schema
            maximum = schemas.Float64Schema
            minItems = schemas.Int64Schema
            minLength = schemas.Int64Schema
            minProperties = schemas.Int64Schema
            minimum = schemas.Float64Schema
            multipleOf = schemas.Float64Schema
        
            @staticmethod
            def _not() -> typing.Type['V1JSONSchemaProps']:
                return V1JSONSchemaProps
            nullable = schemas.BoolSchema
            
            
            class oneOf(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1JSONSchemaProps']:
                        return V1JSONSchemaProps
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1JSONSchemaProps'], typing.List['V1JSONSchemaProps']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'oneOf':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1JSONSchemaProps':
                    return super().__getitem__(i)
            pattern = schemas.StrSchema
            
            
            class patternProperties(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def additional_properties() -> typing.Type['V1JSONSchemaProps']:
                        return V1JSONSchemaProps
                
                def __getitem__(self, name: typing.Union[str, ]) -> 'V1JSONSchemaProps':
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> 'V1JSONSchemaProps':
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: 'V1JSONSchemaProps',
                ) -> 'patternProperties':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class properties(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def additional_properties() -> typing.Type['V1JSONSchemaProps']:
                        return V1JSONSchemaProps
                
                def __getitem__(self, name: typing.Union[str, ]) -> 'V1JSONSchemaProps':
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> 'V1JSONSchemaProps':
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: 'V1JSONSchemaProps',
                ) -> 'properties':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class required(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'required':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            title = schemas.StrSchema
            type = schemas.StrSchema
            uniqueItems = schemas.BoolSchema
            x_kubernetes_embedded_resource = schemas.BoolSchema
            x_kubernetes_int_or_string = schemas.BoolSchema
            
            
            class x_kubernetes_list_map_keys(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'x_kubernetes_list_map_keys':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            x_kubernetes_list_type = schemas.StrSchema
            x_kubernetes_map_type = schemas.StrSchema
            x_kubernetes_preserve_unknown_fields = schemas.BoolSchema
            
            
            class x_kubernetes_validations(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1ValidationRule']:
                        return V1ValidationRule
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1ValidationRule'], typing.List['V1ValidationRule']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'x_kubernetes_validations':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1ValidationRule':
                    return super().__getitem__(i)
            __annotations__ = {
                "$ref": ref,
                "$schema": schema,
                "additionalItems": additionalItems,
                "additionalProperties": additionalProperties,
                "allOf": allOf,
                "anyOf": anyOf,
                "default": default,
                "definitions": definitions,
                "dependencies": dependencies,
                "description": description,
                "enum": enum,
                "example": example,
                "exclusiveMaximum": exclusiveMaximum,
                "exclusiveMinimum": exclusiveMinimum,
                "externalDocs": externalDocs,
                "format": format,
                "id": id,
                "items": items,
                "maxItems": maxItems,
                "maxLength": maxLength,
                "maxProperties": maxProperties,
                "maximum": maximum,
                "minItems": minItems,
                "minLength": minLength,
                "minProperties": minProperties,
                "minimum": minimum,
                "multipleOf": multipleOf,
                "not": _not,
                "nullable": nullable,
                "oneOf": oneOf,
                "pattern": pattern,
                "patternProperties": patternProperties,
                "properties": properties,
                "required": required,
                "title": title,
                "type": type,
                "uniqueItems": uniqueItems,
                "x-kubernetes-embedded-resource": x_kubernetes_embedded_resource,
                "x-kubernetes-int-or-string": x_kubernetes_int_or_string,
                "x-kubernetes-list-map-keys": x_kubernetes_list_map_keys,
                "x-kubernetes-list-type": x_kubernetes_list_type,
                "x-kubernetes-map-type": x_kubernetes_map_type,
                "x-kubernetes-preserve-unknown-fields": x_kubernetes_preserve_unknown_fields,
                "x-kubernetes-validations": x_kubernetes_validations,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$ref"]) -> MetaOapg.properties.ref: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["$schema"]) -> MetaOapg.properties.schema: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalItems"]) -> MetaOapg.properties.additionalItems: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalProperties"]) -> MetaOapg.properties.additionalProperties: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allOf"]) -> MetaOapg.properties.allOf: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anyOf"]) -> MetaOapg.properties.anyOf: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["default"]) -> MetaOapg.properties.default: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["definitions"]) -> MetaOapg.properties.definitions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dependencies"]) -> MetaOapg.properties.dependencies: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enum"]) -> MetaOapg.properties.enum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["example"]) -> MetaOapg.properties.example: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exclusiveMaximum"]) -> MetaOapg.properties.exclusiveMaximum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exclusiveMinimum"]) -> MetaOapg.properties.exclusiveMinimum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalDocs"]) -> 'V1ExternalDocumentation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["format"]) -> MetaOapg.properties.format: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> MetaOapg.properties.items: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxItems"]) -> MetaOapg.properties.maxItems: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxLength"]) -> MetaOapg.properties.maxLength: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxProperties"]) -> MetaOapg.properties.maxProperties: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maximum"]) -> MetaOapg.properties.maximum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minItems"]) -> MetaOapg.properties.minItems: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minLength"]) -> MetaOapg.properties.minLength: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minProperties"]) -> MetaOapg.properties.minProperties: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minimum"]) -> MetaOapg.properties.minimum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["multipleOf"]) -> MetaOapg.properties.multipleOf: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["not"]) -> 'V1JSONSchemaProps': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nullable"]) -> MetaOapg.properties.nullable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oneOf"]) -> MetaOapg.properties.oneOf: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pattern"]) -> MetaOapg.properties.pattern: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["patternProperties"]) -> MetaOapg.properties.patternProperties: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["properties"]) -> MetaOapg.properties.properties: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["required"]) -> MetaOapg.properties.required: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uniqueItems"]) -> MetaOapg.properties.uniqueItems: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x-kubernetes-embedded-resource"]) -> MetaOapg.properties.x_kubernetes_embedded_resource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x-kubernetes-int-or-string"]) -> MetaOapg.properties.x_kubernetes_int_or_string: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x-kubernetes-list-map-keys"]) -> MetaOapg.properties.x_kubernetes_list_map_keys: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x-kubernetes-list-type"]) -> MetaOapg.properties.x_kubernetes_list_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x-kubernetes-map-type"]) -> MetaOapg.properties.x_kubernetes_map_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x-kubernetes-preserve-unknown-fields"]) -> MetaOapg.properties.x_kubernetes_preserve_unknown_fields: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["x-kubernetes-validations"]) -> MetaOapg.properties.x_kubernetes_validations: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["$ref", "$schema", "additionalItems", "additionalProperties", "allOf", "anyOf", "default", "definitions", "dependencies", "description", "enum", "example", "exclusiveMaximum", "exclusiveMinimum", "externalDocs", "format", "id", "items", "maxItems", "maxLength", "maxProperties", "maximum", "minItems", "minLength", "minProperties", "minimum", "multipleOf", "not", "nullable", "oneOf", "pattern", "patternProperties", "properties", "required", "title", "type", "uniqueItems", "x-kubernetes-embedded-resource", "x-kubernetes-int-or-string", "x-kubernetes-list-map-keys", "x-kubernetes-list-type", "x-kubernetes-map-type", "x-kubernetes-preserve-unknown-fields", "x-kubernetes-validations", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$ref"]) -> typing.Union[MetaOapg.properties.ref, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["$schema"]) -> typing.Union[MetaOapg.properties.schema, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalItems"]) -> typing.Union[MetaOapg.properties.additionalItems, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalProperties"]) -> typing.Union[MetaOapg.properties.additionalProperties, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allOf"]) -> typing.Union[MetaOapg.properties.allOf, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["anyOf"]) -> typing.Union[MetaOapg.properties.anyOf, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["default"]) -> typing.Union[MetaOapg.properties.default, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["definitions"]) -> typing.Union[MetaOapg.properties.definitions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dependencies"]) -> typing.Union[MetaOapg.properties.dependencies, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enum"]) -> typing.Union[MetaOapg.properties.enum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["example"]) -> typing.Union[MetaOapg.properties.example, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exclusiveMaximum"]) -> typing.Union[MetaOapg.properties.exclusiveMaximum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exclusiveMinimum"]) -> typing.Union[MetaOapg.properties.exclusiveMinimum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalDocs"]) -> typing.Union['V1ExternalDocumentation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["format"]) -> typing.Union[MetaOapg.properties.format, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> typing.Union[MetaOapg.properties.id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> typing.Union[MetaOapg.properties.items, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxItems"]) -> typing.Union[MetaOapg.properties.maxItems, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxLength"]) -> typing.Union[MetaOapg.properties.maxLength, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxProperties"]) -> typing.Union[MetaOapg.properties.maxProperties, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maximum"]) -> typing.Union[MetaOapg.properties.maximum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minItems"]) -> typing.Union[MetaOapg.properties.minItems, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minLength"]) -> typing.Union[MetaOapg.properties.minLength, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minProperties"]) -> typing.Union[MetaOapg.properties.minProperties, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minimum"]) -> typing.Union[MetaOapg.properties.minimum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["multipleOf"]) -> typing.Union[MetaOapg.properties.multipleOf, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["not"]) -> typing.Union['V1JSONSchemaProps', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nullable"]) -> typing.Union[MetaOapg.properties.nullable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oneOf"]) -> typing.Union[MetaOapg.properties.oneOf, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pattern"]) -> typing.Union[MetaOapg.properties.pattern, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["patternProperties"]) -> typing.Union[MetaOapg.properties.patternProperties, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["properties"]) -> typing.Union[MetaOapg.properties.properties, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["required"]) -> typing.Union[MetaOapg.properties.required, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union[MetaOapg.properties.title, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uniqueItems"]) -> typing.Union[MetaOapg.properties.uniqueItems, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x-kubernetes-embedded-resource"]) -> typing.Union[MetaOapg.properties.x_kubernetes_embedded_resource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x-kubernetes-int-or-string"]) -> typing.Union[MetaOapg.properties.x_kubernetes_int_or_string, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x-kubernetes-list-map-keys"]) -> typing.Union[MetaOapg.properties.x_kubernetes_list_map_keys, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x-kubernetes-list-type"]) -> typing.Union[MetaOapg.properties.x_kubernetes_list_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x-kubernetes-map-type"]) -> typing.Union[MetaOapg.properties.x_kubernetes_map_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x-kubernetes-preserve-unknown-fields"]) -> typing.Union[MetaOapg.properties.x_kubernetes_preserve_unknown_fields, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["x-kubernetes-validations"]) -> typing.Union[MetaOapg.properties.x_kubernetes_validations, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["$ref", "$schema", "additionalItems", "additionalProperties", "allOf", "anyOf", "default", "definitions", "dependencies", "description", "enum", "example", "exclusiveMaximum", "exclusiveMinimum", "externalDocs", "format", "id", "items", "maxItems", "maxLength", "maxProperties", "maximum", "minItems", "minLength", "minProperties", "minimum", "multipleOf", "not", "nullable", "oneOf", "pattern", "patternProperties", "properties", "required", "title", "type", "uniqueItems", "x-kubernetes-embedded-resource", "x-kubernetes-int-or-string", "x-kubernetes-list-map-keys", "x-kubernetes-list-type", "x-kubernetes-map-type", "x-kubernetes-preserve-unknown-fields", "x-kubernetes-validations", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        additionalItems: typing.Union[MetaOapg.properties.additionalItems, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        additionalProperties: typing.Union[MetaOapg.properties.additionalProperties, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        allOf: typing.Union[MetaOapg.properties.allOf, list, tuple, schemas.Unset] = schemas.unset,
        anyOf: typing.Union[MetaOapg.properties.anyOf, list, tuple, schemas.Unset] = schemas.unset,
        default: typing.Union[MetaOapg.properties.default, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        definitions: typing.Union[MetaOapg.properties.definitions, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        dependencies: typing.Union[MetaOapg.properties.dependencies, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        enum: typing.Union[MetaOapg.properties.enum, list, tuple, schemas.Unset] = schemas.unset,
        example: typing.Union[MetaOapg.properties.example, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        exclusiveMaximum: typing.Union[MetaOapg.properties.exclusiveMaximum, bool, schemas.Unset] = schemas.unset,
        exclusiveMinimum: typing.Union[MetaOapg.properties.exclusiveMinimum, bool, schemas.Unset] = schemas.unset,
        externalDocs: typing.Union['V1ExternalDocumentation', schemas.Unset] = schemas.unset,
        format: typing.Union[MetaOapg.properties.format, str, schemas.Unset] = schemas.unset,
        id: typing.Union[MetaOapg.properties.id, str, schemas.Unset] = schemas.unset,
        items: typing.Union[MetaOapg.properties.items, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        maxItems: typing.Union[MetaOapg.properties.maxItems, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        maxLength: typing.Union[MetaOapg.properties.maxLength, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        maxProperties: typing.Union[MetaOapg.properties.maxProperties, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        maximum: typing.Union[MetaOapg.properties.maximum, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        minItems: typing.Union[MetaOapg.properties.minItems, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        minLength: typing.Union[MetaOapg.properties.minLength, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        minProperties: typing.Union[MetaOapg.properties.minProperties, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        minimum: typing.Union[MetaOapg.properties.minimum, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        multipleOf: typing.Union[MetaOapg.properties.multipleOf, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        nullable: typing.Union[MetaOapg.properties.nullable, bool, schemas.Unset] = schemas.unset,
        oneOf: typing.Union[MetaOapg.properties.oneOf, list, tuple, schemas.Unset] = schemas.unset,
        pattern: typing.Union[MetaOapg.properties.pattern, str, schemas.Unset] = schemas.unset,
        patternProperties: typing.Union[MetaOapg.properties.patternProperties, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        properties: typing.Union[MetaOapg.properties.properties, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        required: typing.Union[MetaOapg.properties.required, list, tuple, schemas.Unset] = schemas.unset,
        title: typing.Union[MetaOapg.properties.title, str, schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        uniqueItems: typing.Union[MetaOapg.properties.uniqueItems, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1JSONSchemaProps':
        return super().__new__(
            cls,
            *args,
            additionalItems=additionalItems,
            additionalProperties=additionalProperties,
            allOf=allOf,
            anyOf=anyOf,
            default=default,
            definitions=definitions,
            dependencies=dependencies,
            description=description,
            enum=enum,
            example=example,
            exclusiveMaximum=exclusiveMaximum,
            exclusiveMinimum=exclusiveMinimum,
            externalDocs=externalDocs,
            format=format,
            id=id,
            items=items,
            maxItems=maxItems,
            maxLength=maxLength,
            maxProperties=maxProperties,
            maximum=maximum,
            minItems=minItems,
            minLength=minLength,
            minProperties=minProperties,
            minimum=minimum,
            multipleOf=multipleOf,
            nullable=nullable,
            oneOf=oneOf,
            pattern=pattern,
            patternProperties=patternProperties,
            properties=properties,
            required=required,
            title=title,
            type=type,
            uniqueItems=uniqueItems,
            _configuration=_configuration,
            **kwargs,
        )

from kubernetes.client.model.v1_external_documentation import V1ExternalDocumentation
from kubernetes.client.model.v1_validation_rule import V1ValidationRule
