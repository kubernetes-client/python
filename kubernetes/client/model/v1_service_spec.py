# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class V1ServiceSpec(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ServiceSpec describes the attributes that a user creates on a service.
    """


    class MetaOapg:
        
        class properties:
            allocateLoadBalancerNodePorts = schemas.BoolSchema
            clusterIP = schemas.StrSchema
            
            
            class clusterIPs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'clusterIPs':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class externalIPs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'externalIPs':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            externalName = schemas.StrSchema
            externalTrafficPolicy = schemas.StrSchema
            healthCheckNodePort = schemas.Int32Schema
            internalTrafficPolicy = schemas.StrSchema
            
            
            class ipFamilies(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ipFamilies':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            ipFamilyPolicy = schemas.StrSchema
            loadBalancerClass = schemas.StrSchema
            loadBalancerIP = schemas.StrSchema
            
            
            class loadBalancerSourceRanges(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'loadBalancerSourceRanges':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class ports(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1ServicePort']:
                        return V1ServicePort
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1ServicePort'], typing.List['V1ServicePort']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ports':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1ServicePort':
                    return super().__getitem__(i)
            publishNotReadyAddresses = schemas.BoolSchema
            
            
            class selector(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'selector':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            sessionAffinity = schemas.StrSchema
        
            @staticmethod
            def sessionAffinityConfig() -> typing.Type['V1SessionAffinityConfig']:
                return V1SessionAffinityConfig
            type = schemas.StrSchema
            __annotations__ = {
                "allocateLoadBalancerNodePorts": allocateLoadBalancerNodePorts,
                "clusterIP": clusterIP,
                "clusterIPs": clusterIPs,
                "externalIPs": externalIPs,
                "externalName": externalName,
                "externalTrafficPolicy": externalTrafficPolicy,
                "healthCheckNodePort": healthCheckNodePort,
                "internalTrafficPolicy": internalTrafficPolicy,
                "ipFamilies": ipFamilies,
                "ipFamilyPolicy": ipFamilyPolicy,
                "loadBalancerClass": loadBalancerClass,
                "loadBalancerIP": loadBalancerIP,
                "loadBalancerSourceRanges": loadBalancerSourceRanges,
                "ports": ports,
                "publishNotReadyAddresses": publishNotReadyAddresses,
                "selector": selector,
                "sessionAffinity": sessionAffinity,
                "sessionAffinityConfig": sessionAffinityConfig,
                "type": type,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allocateLoadBalancerNodePorts"]) -> MetaOapg.properties.allocateLoadBalancerNodePorts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clusterIP"]) -> MetaOapg.properties.clusterIP: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clusterIPs"]) -> MetaOapg.properties.clusterIPs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalIPs"]) -> MetaOapg.properties.externalIPs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalName"]) -> MetaOapg.properties.externalName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["externalTrafficPolicy"]) -> MetaOapg.properties.externalTrafficPolicy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["healthCheckNodePort"]) -> MetaOapg.properties.healthCheckNodePort: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["internalTrafficPolicy"]) -> MetaOapg.properties.internalTrafficPolicy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipFamilies"]) -> MetaOapg.properties.ipFamilies: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipFamilyPolicy"]) -> MetaOapg.properties.ipFamilyPolicy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loadBalancerClass"]) -> MetaOapg.properties.loadBalancerClass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loadBalancerIP"]) -> MetaOapg.properties.loadBalancerIP: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loadBalancerSourceRanges"]) -> MetaOapg.properties.loadBalancerSourceRanges: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ports"]) -> MetaOapg.properties.ports: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publishNotReadyAddresses"]) -> MetaOapg.properties.publishNotReadyAddresses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["selector"]) -> MetaOapg.properties.selector: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sessionAffinity"]) -> MetaOapg.properties.sessionAffinity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sessionAffinityConfig"]) -> 'V1SessionAffinityConfig': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["allocateLoadBalancerNodePorts", "clusterIP", "clusterIPs", "externalIPs", "externalName", "externalTrafficPolicy", "healthCheckNodePort", "internalTrafficPolicy", "ipFamilies", "ipFamilyPolicy", "loadBalancerClass", "loadBalancerIP", "loadBalancerSourceRanges", "ports", "publishNotReadyAddresses", "selector", "sessionAffinity", "sessionAffinityConfig", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allocateLoadBalancerNodePorts"]) -> typing.Union[MetaOapg.properties.allocateLoadBalancerNodePorts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clusterIP"]) -> typing.Union[MetaOapg.properties.clusterIP, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clusterIPs"]) -> typing.Union[MetaOapg.properties.clusterIPs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalIPs"]) -> typing.Union[MetaOapg.properties.externalIPs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalName"]) -> typing.Union[MetaOapg.properties.externalName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["externalTrafficPolicy"]) -> typing.Union[MetaOapg.properties.externalTrafficPolicy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["healthCheckNodePort"]) -> typing.Union[MetaOapg.properties.healthCheckNodePort, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["internalTrafficPolicy"]) -> typing.Union[MetaOapg.properties.internalTrafficPolicy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipFamilies"]) -> typing.Union[MetaOapg.properties.ipFamilies, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipFamilyPolicy"]) -> typing.Union[MetaOapg.properties.ipFamilyPolicy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loadBalancerClass"]) -> typing.Union[MetaOapg.properties.loadBalancerClass, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loadBalancerIP"]) -> typing.Union[MetaOapg.properties.loadBalancerIP, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loadBalancerSourceRanges"]) -> typing.Union[MetaOapg.properties.loadBalancerSourceRanges, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ports"]) -> typing.Union[MetaOapg.properties.ports, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publishNotReadyAddresses"]) -> typing.Union[MetaOapg.properties.publishNotReadyAddresses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["selector"]) -> typing.Union[MetaOapg.properties.selector, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sessionAffinity"]) -> typing.Union[MetaOapg.properties.sessionAffinity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sessionAffinityConfig"]) -> typing.Union['V1SessionAffinityConfig', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["allocateLoadBalancerNodePorts", "clusterIP", "clusterIPs", "externalIPs", "externalName", "externalTrafficPolicy", "healthCheckNodePort", "internalTrafficPolicy", "ipFamilies", "ipFamilyPolicy", "loadBalancerClass", "loadBalancerIP", "loadBalancerSourceRanges", "ports", "publishNotReadyAddresses", "selector", "sessionAffinity", "sessionAffinityConfig", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        allocateLoadBalancerNodePorts: typing.Union[MetaOapg.properties.allocateLoadBalancerNodePorts, bool, schemas.Unset] = schemas.unset,
        clusterIP: typing.Union[MetaOapg.properties.clusterIP, str, schemas.Unset] = schemas.unset,
        clusterIPs: typing.Union[MetaOapg.properties.clusterIPs, list, tuple, schemas.Unset] = schemas.unset,
        externalIPs: typing.Union[MetaOapg.properties.externalIPs, list, tuple, schemas.Unset] = schemas.unset,
        externalName: typing.Union[MetaOapg.properties.externalName, str, schemas.Unset] = schemas.unset,
        externalTrafficPolicy: typing.Union[MetaOapg.properties.externalTrafficPolicy, str, schemas.Unset] = schemas.unset,
        healthCheckNodePort: typing.Union[MetaOapg.properties.healthCheckNodePort, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        internalTrafficPolicy: typing.Union[MetaOapg.properties.internalTrafficPolicy, str, schemas.Unset] = schemas.unset,
        ipFamilies: typing.Union[MetaOapg.properties.ipFamilies, list, tuple, schemas.Unset] = schemas.unset,
        ipFamilyPolicy: typing.Union[MetaOapg.properties.ipFamilyPolicy, str, schemas.Unset] = schemas.unset,
        loadBalancerClass: typing.Union[MetaOapg.properties.loadBalancerClass, str, schemas.Unset] = schemas.unset,
        loadBalancerIP: typing.Union[MetaOapg.properties.loadBalancerIP, str, schemas.Unset] = schemas.unset,
        loadBalancerSourceRanges: typing.Union[MetaOapg.properties.loadBalancerSourceRanges, list, tuple, schemas.Unset] = schemas.unset,
        ports: typing.Union[MetaOapg.properties.ports, list, tuple, schemas.Unset] = schemas.unset,
        publishNotReadyAddresses: typing.Union[MetaOapg.properties.publishNotReadyAddresses, bool, schemas.Unset] = schemas.unset,
        selector: typing.Union[MetaOapg.properties.selector, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        sessionAffinity: typing.Union[MetaOapg.properties.sessionAffinity, str, schemas.Unset] = schemas.unset,
        sessionAffinityConfig: typing.Union['V1SessionAffinityConfig', schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1ServiceSpec':
        return super().__new__(
            cls,
            *args,
            allocateLoadBalancerNodePorts=allocateLoadBalancerNodePorts,
            clusterIP=clusterIP,
            clusterIPs=clusterIPs,
            externalIPs=externalIPs,
            externalName=externalName,
            externalTrafficPolicy=externalTrafficPolicy,
            healthCheckNodePort=healthCheckNodePort,
            internalTrafficPolicy=internalTrafficPolicy,
            ipFamilies=ipFamilies,
            ipFamilyPolicy=ipFamilyPolicy,
            loadBalancerClass=loadBalancerClass,
            loadBalancerIP=loadBalancerIP,
            loadBalancerSourceRanges=loadBalancerSourceRanges,
            ports=ports,
            publishNotReadyAddresses=publishNotReadyAddresses,
            selector=selector,
            sessionAffinity=sessionAffinity,
            sessionAffinityConfig=sessionAffinityConfig,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from kubernetes.client.model.v1_service_port import V1ServicePort
from kubernetes.client.model.v1_session_affinity_config import V1SessionAffinityConfig
