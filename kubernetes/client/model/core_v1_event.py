# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class CoreV1Event(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
    """


    class MetaOapg:
        required = {
            "metadata",
            "involvedObject",
        }
        
        class properties:
        
            @staticmethod
            def involvedObject() -> typing.Type['V1ObjectReference']:
                return V1ObjectReference
        
            @staticmethod
            def metadata() -> typing.Type['V1ObjectMeta']:
                return V1ObjectMeta
            action = schemas.StrSchema
            apiVersion = schemas.StrSchema
            count = schemas.Int32Schema
            eventTime = schemas.DateTimeSchema
            firstTimestamp = schemas.DateTimeSchema
            kind = schemas.StrSchema
            lastTimestamp = schemas.DateTimeSchema
            message = schemas.StrSchema
            reason = schemas.StrSchema
        
            @staticmethod
            def related() -> typing.Type['V1ObjectReference']:
                return V1ObjectReference
            reportingComponent = schemas.StrSchema
            reportingInstance = schemas.StrSchema
        
            @staticmethod
            def series() -> typing.Type['CoreV1EventSeries']:
                return CoreV1EventSeries
        
            @staticmethod
            def source() -> typing.Type['V1EventSource']:
                return V1EventSource
            type = schemas.StrSchema
            __annotations__ = {
                "involvedObject": involvedObject,
                "metadata": metadata,
                "action": action,
                "apiVersion": apiVersion,
                "count": count,
                "eventTime": eventTime,
                "firstTimestamp": firstTimestamp,
                "kind": kind,
                "lastTimestamp": lastTimestamp,
                "message": message,
                "reason": reason,
                "related": related,
                "reportingComponent": reportingComponent,
                "reportingInstance": reportingInstance,
                "series": series,
                "source": source,
                "type": type,
            }
    
    metadata: 'V1ObjectMeta'
    involvedObject: 'V1ObjectReference'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["involvedObject"]) -> 'V1ObjectReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'V1ObjectMeta': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["action"]) -> MetaOapg.properties.action: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apiVersion"]) -> MetaOapg.properties.apiVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventTime"]) -> MetaOapg.properties.eventTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstTimestamp"]) -> MetaOapg.properties.firstTimestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kind"]) -> MetaOapg.properties.kind: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastTimestamp"]) -> MetaOapg.properties.lastTimestamp: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["related"]) -> 'V1ObjectReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportingComponent"]) -> MetaOapg.properties.reportingComponent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportingInstance"]) -> MetaOapg.properties.reportingInstance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["series"]) -> 'CoreV1EventSeries': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source"]) -> 'V1EventSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["involvedObject", "metadata", "action", "apiVersion", "count", "eventTime", "firstTimestamp", "kind", "lastTimestamp", "message", "reason", "related", "reportingComponent", "reportingInstance", "series", "source", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["involvedObject"]) -> 'V1ObjectReference': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> 'V1ObjectMeta': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["action"]) -> typing.Union[MetaOapg.properties.action, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apiVersion"]) -> typing.Union[MetaOapg.properties.apiVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> typing.Union[MetaOapg.properties.count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventTime"]) -> typing.Union[MetaOapg.properties.eventTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstTimestamp"]) -> typing.Union[MetaOapg.properties.firstTimestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kind"]) -> typing.Union[MetaOapg.properties.kind, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastTimestamp"]) -> typing.Union[MetaOapg.properties.lastTimestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> typing.Union[MetaOapg.properties.message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["related"]) -> typing.Union['V1ObjectReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportingComponent"]) -> typing.Union[MetaOapg.properties.reportingComponent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportingInstance"]) -> typing.Union[MetaOapg.properties.reportingInstance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["series"]) -> typing.Union['CoreV1EventSeries', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source"]) -> typing.Union['V1EventSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["involvedObject", "metadata", "action", "apiVersion", "count", "eventTime", "firstTimestamp", "kind", "lastTimestamp", "message", "reason", "related", "reportingComponent", "reportingInstance", "series", "source", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        metadata: 'V1ObjectMeta',
        involvedObject: 'V1ObjectReference',
        action: typing.Union[MetaOapg.properties.action, str, schemas.Unset] = schemas.unset,
        apiVersion: typing.Union[MetaOapg.properties.apiVersion, str, schemas.Unset] = schemas.unset,
        count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        eventTime: typing.Union[MetaOapg.properties.eventTime, str, datetime, schemas.Unset] = schemas.unset,
        firstTimestamp: typing.Union[MetaOapg.properties.firstTimestamp, str, datetime, schemas.Unset] = schemas.unset,
        kind: typing.Union[MetaOapg.properties.kind, str, schemas.Unset] = schemas.unset,
        lastTimestamp: typing.Union[MetaOapg.properties.lastTimestamp, str, datetime, schemas.Unset] = schemas.unset,
        message: typing.Union[MetaOapg.properties.message, str, schemas.Unset] = schemas.unset,
        reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
        related: typing.Union['V1ObjectReference', schemas.Unset] = schemas.unset,
        reportingComponent: typing.Union[MetaOapg.properties.reportingComponent, str, schemas.Unset] = schemas.unset,
        reportingInstance: typing.Union[MetaOapg.properties.reportingInstance, str, schemas.Unset] = schemas.unset,
        series: typing.Union['CoreV1EventSeries', schemas.Unset] = schemas.unset,
        source: typing.Union['V1EventSource', schemas.Unset] = schemas.unset,
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CoreV1Event':
        return super().__new__(
            cls,
            *args,
            metadata=metadata,
            involvedObject=involvedObject,
            action=action,
            apiVersion=apiVersion,
            count=count,
            eventTime=eventTime,
            firstTimestamp=firstTimestamp,
            kind=kind,
            lastTimestamp=lastTimestamp,
            message=message,
            reason=reason,
            related=related,
            reportingComponent=reportingComponent,
            reportingInstance=reportingInstance,
            series=series,
            source=source,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from kubernetes.client.model.core_v1_event_series import CoreV1EventSeries
from kubernetes.client.model.v1_event_source import V1EventSource
from kubernetes.client.model.v1_object_meta import V1ObjectMeta
from kubernetes.client.model.v1_object_reference import V1ObjectReference
