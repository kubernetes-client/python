# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from client import schemas  # noqa: F401


class V1APIVersions(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    APIVersions lists the versions that are available, to allow clients to discover the API at /api, which is the root path of the legacy v1 API.
    """


    class MetaOapg:
        required = {
            "versions",
            "serverAddressByClientCIDRs",
        }
        
        class properties:
            
            
            class serverAddressByClientCIDRs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1ServerAddressByClientCIDR']:
                        return V1ServerAddressByClientCIDR
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1ServerAddressByClientCIDR'], typing.List['V1ServerAddressByClientCIDR']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'serverAddressByClientCIDRs':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1ServerAddressByClientCIDR':
                    return super().__getitem__(i)
            
            
            class versions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'versions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            apiVersion = schemas.StrSchema
            kind = schemas.StrSchema
            __annotations__ = {
                "serverAddressByClientCIDRs": serverAddressByClientCIDRs,
                "versions": versions,
                "apiVersion": apiVersion,
                "kind": kind,
            }
    
    versions: MetaOapg.properties.versions
    serverAddressByClientCIDRs: MetaOapg.properties.serverAddressByClientCIDRs
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serverAddressByClientCIDRs"]) -> MetaOapg.properties.serverAddressByClientCIDRs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["versions"]) -> MetaOapg.properties.versions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apiVersion"]) -> MetaOapg.properties.apiVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kind"]) -> MetaOapg.properties.kind: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["serverAddressByClientCIDRs", "versions", "apiVersion", "kind", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serverAddressByClientCIDRs"]) -> MetaOapg.properties.serverAddressByClientCIDRs: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["versions"]) -> MetaOapg.properties.versions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apiVersion"]) -> typing.Union[MetaOapg.properties.apiVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kind"]) -> typing.Union[MetaOapg.properties.kind, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["serverAddressByClientCIDRs", "versions", "apiVersion", "kind", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        versions: typing.Union[MetaOapg.properties.versions, list, tuple, ],
        serverAddressByClientCIDRs: typing.Union[MetaOapg.properties.serverAddressByClientCIDRs, list, tuple, ],
        apiVersion: typing.Union[MetaOapg.properties.apiVersion, str, schemas.Unset] = schemas.unset,
        kind: typing.Union[MetaOapg.properties.kind, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1APIVersions':
        return super().__new__(
            cls,
            *args,
            versions=versions,
            serverAddressByClientCIDRs=serverAddressByClientCIDRs,
            apiVersion=apiVersion,
            kind=kind,
            _configuration=_configuration,
            **kwargs,
        )

from client.model.v1_server_address_by_client_cidr import V1ServerAddressByClientCIDR
