# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from client import schemas  # noqa: F401


class V1ResourceAttributes(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
    """


    class MetaOapg:
        
        class properties:
            group = schemas.StrSchema
            name = schemas.StrSchema
            namespace = schemas.StrSchema
            resource = schemas.StrSchema
            subresource = schemas.StrSchema
            verb = schemas.StrSchema
            version = schemas.StrSchema
            __annotations__ = {
                "group": group,
                "name": name,
                "namespace": namespace,
                "resource": resource,
                "subresource": subresource,
                "verb": verb,
                "version": version,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group"]) -> MetaOapg.properties.group: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["namespace"]) -> MetaOapg.properties.namespace: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resource"]) -> MetaOapg.properties.resource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subresource"]) -> MetaOapg.properties.subresource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["verb"]) -> MetaOapg.properties.verb: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version"]) -> MetaOapg.properties.version: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["group", "name", "namespace", "resource", "subresource", "verb", "version", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group"]) -> typing.Union[MetaOapg.properties.group, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["namespace"]) -> typing.Union[MetaOapg.properties.namespace, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resource"]) -> typing.Union[MetaOapg.properties.resource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subresource"]) -> typing.Union[MetaOapg.properties.subresource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["verb"]) -> typing.Union[MetaOapg.properties.verb, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version"]) -> typing.Union[MetaOapg.properties.version, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["group", "name", "namespace", "resource", "subresource", "verb", "version", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        group: typing.Union[MetaOapg.properties.group, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        namespace: typing.Union[MetaOapg.properties.namespace, str, schemas.Unset] = schemas.unset,
        resource: typing.Union[MetaOapg.properties.resource, str, schemas.Unset] = schemas.unset,
        subresource: typing.Union[MetaOapg.properties.subresource, str, schemas.Unset] = schemas.unset,
        verb: typing.Union[MetaOapg.properties.verb, str, schemas.Unset] = schemas.unset,
        version: typing.Union[MetaOapg.properties.version, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1ResourceAttributes':
        return super().__new__(
            cls,
            *args,
            group=group,
            name=name,
            namespace=namespace,
            resource=resource,
            subresource=subresource,
            verb=verb,
            version=version,
            _configuration=_configuration,
            **kwargs,
        )
