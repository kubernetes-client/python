# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from client import schemas  # noqa: F401


class V1beta2FlowSchemaSpec(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    FlowSchemaSpec describes how the FlowSchema's specification looks like.
    """


    class MetaOapg:
        required = {
            "priorityLevelConfiguration",
        }
        
        class properties:
        
            @staticmethod
            def priorityLevelConfiguration() -> typing.Type['V1beta2PriorityLevelConfigurationReference']:
                return V1beta2PriorityLevelConfigurationReference
        
            @staticmethod
            def distinguisherMethod() -> typing.Type['V1beta2FlowDistinguisherMethod']:
                return V1beta2FlowDistinguisherMethod
            matchingPrecedence = schemas.Int32Schema
            
            
            class rules(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1beta2PolicyRulesWithSubjects']:
                        return V1beta2PolicyRulesWithSubjects
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1beta2PolicyRulesWithSubjects'], typing.List['V1beta2PolicyRulesWithSubjects']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'rules':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1beta2PolicyRulesWithSubjects':
                    return super().__getitem__(i)
            __annotations__ = {
                "priorityLevelConfiguration": priorityLevelConfiguration,
                "distinguisherMethod": distinguisherMethod,
                "matchingPrecedence": matchingPrecedence,
                "rules": rules,
            }
    
    priorityLevelConfiguration: 'V1beta2PriorityLevelConfigurationReference'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priorityLevelConfiguration"]) -> 'V1beta2PriorityLevelConfigurationReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["distinguisherMethod"]) -> 'V1beta2FlowDistinguisherMethod': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["matchingPrecedence"]) -> MetaOapg.properties.matchingPrecedence: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rules"]) -> MetaOapg.properties.rules: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["priorityLevelConfiguration", "distinguisherMethod", "matchingPrecedence", "rules", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priorityLevelConfiguration"]) -> 'V1beta2PriorityLevelConfigurationReference': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["distinguisherMethod"]) -> typing.Union['V1beta2FlowDistinguisherMethod', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["matchingPrecedence"]) -> typing.Union[MetaOapg.properties.matchingPrecedence, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rules"]) -> typing.Union[MetaOapg.properties.rules, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["priorityLevelConfiguration", "distinguisherMethod", "matchingPrecedence", "rules", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        priorityLevelConfiguration: 'V1beta2PriorityLevelConfigurationReference',
        distinguisherMethod: typing.Union['V1beta2FlowDistinguisherMethod', schemas.Unset] = schemas.unset,
        matchingPrecedence: typing.Union[MetaOapg.properties.matchingPrecedence, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        rules: typing.Union[MetaOapg.properties.rules, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1beta2FlowSchemaSpec':
        return super().__new__(
            cls,
            *args,
            priorityLevelConfiguration=priorityLevelConfiguration,
            distinguisherMethod=distinguisherMethod,
            matchingPrecedence=matchingPrecedence,
            rules=rules,
            _configuration=_configuration,
            **kwargs,
        )

from client.model.v1beta2_flow_distinguisher_method import V1beta2FlowDistinguisherMethod
from client.model.v1beta2_policy_rules_with_subjects import V1beta2PolicyRulesWithSubjects
from client.model.v1beta2_priority_level_configuration_reference import V1beta2PriorityLevelConfigurationReference
