# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class V1alpha1ServerStorageVersion(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    An API server instance reports the version it can decode and the version it encodes objects to when persisting objects in the backend.
    """


    class MetaOapg:
        
        class properties:
            apiServerID = schemas.StrSchema
            
            
            class decodableVersions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'decodableVersions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            encodingVersion = schemas.StrSchema
            __annotations__ = {
                "apiServerID": apiServerID,
                "decodableVersions": decodableVersions,
                "encodingVersion": encodingVersion,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apiServerID"]) -> MetaOapg.properties.apiServerID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["decodableVersions"]) -> MetaOapg.properties.decodableVersions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["encodingVersion"]) -> MetaOapg.properties.encodingVersion: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["apiServerID", "decodableVersions", "encodingVersion", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apiServerID"]) -> typing.Union[MetaOapg.properties.apiServerID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["decodableVersions"]) -> typing.Union[MetaOapg.properties.decodableVersions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["encodingVersion"]) -> typing.Union[MetaOapg.properties.encodingVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["apiServerID", "decodableVersions", "encodingVersion", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        apiServerID: typing.Union[MetaOapg.properties.apiServerID, str, schemas.Unset] = schemas.unset,
        decodableVersions: typing.Union[MetaOapg.properties.decodableVersions, list, tuple, schemas.Unset] = schemas.unset,
        encodingVersion: typing.Union[MetaOapg.properties.encodingVersion, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1alpha1ServerStorageVersion':
        return super().__new__(
            cls,
            *args,
            apiServerID=apiServerID,
            decodableVersions=decodableVersions,
            encodingVersion=encodingVersion,
            _configuration=_configuration,
            **kwargs,
        )
