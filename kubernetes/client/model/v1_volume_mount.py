# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class V1VolumeMount(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    VolumeMount describes a mounting of a Volume within a container.
    """


    class MetaOapg:
        required = {
            "mountPath",
            "name",
        }
        
        class properties:
            mountPath = schemas.StrSchema
            name = schemas.StrSchema
            mountPropagation = schemas.StrSchema
            readOnly = schemas.BoolSchema
            subPath = schemas.StrSchema
            subPathExpr = schemas.StrSchema
            __annotations__ = {
                "mountPath": mountPath,
                "name": name,
                "mountPropagation": mountPropagation,
                "readOnly": readOnly,
                "subPath": subPath,
                "subPathExpr": subPathExpr,
            }
    
    mountPath: MetaOapg.properties.mountPath
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mountPath"]) -> MetaOapg.properties.mountPath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mountPropagation"]) -> MetaOapg.properties.mountPropagation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["readOnly"]) -> MetaOapg.properties.readOnly: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subPath"]) -> MetaOapg.properties.subPath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subPathExpr"]) -> MetaOapg.properties.subPathExpr: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["mountPath", "name", "mountPropagation", "readOnly", "subPath", "subPathExpr", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mountPath"]) -> MetaOapg.properties.mountPath: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mountPropagation"]) -> typing.Union[MetaOapg.properties.mountPropagation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["readOnly"]) -> typing.Union[MetaOapg.properties.readOnly, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subPath"]) -> typing.Union[MetaOapg.properties.subPath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subPathExpr"]) -> typing.Union[MetaOapg.properties.subPathExpr, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["mountPath", "name", "mountPropagation", "readOnly", "subPath", "subPathExpr", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        mountPath: typing.Union[MetaOapg.properties.mountPath, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        mountPropagation: typing.Union[MetaOapg.properties.mountPropagation, str, schemas.Unset] = schemas.unset,
        readOnly: typing.Union[MetaOapg.properties.readOnly, bool, schemas.Unset] = schemas.unset,
        subPath: typing.Union[MetaOapg.properties.subPath, str, schemas.Unset] = schemas.unset,
        subPathExpr: typing.Union[MetaOapg.properties.subPathExpr, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1VolumeMount':
        return super().__new__(
            cls,
            *args,
            mountPath=mountPath,
            name=name,
            mountPropagation=mountPropagation,
            readOnly=readOnly,
            subPath=subPath,
            subPathExpr=subPathExpr,
            _configuration=_configuration,
            **kwargs,
        )
