# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from client import schemas  # noqa: F401


class V1TopologySpreadConstraint(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    TopologySpreadConstraint specifies how to spread matching pods among the given topology.
    """


    class MetaOapg:
        required = {
            "whenUnsatisfiable",
            "maxSkew",
            "topologyKey",
        }
        
        class properties:
            maxSkew = schemas.Int32Schema
            topologyKey = schemas.StrSchema
            whenUnsatisfiable = schemas.StrSchema
        
            @staticmethod
            def labelSelector() -> typing.Type['V1LabelSelector']:
                return V1LabelSelector
            
            
            class matchLabelKeys(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'matchLabelKeys':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            minDomains = schemas.Int32Schema
            nodeAffinityPolicy = schemas.StrSchema
            nodeTaintsPolicy = schemas.StrSchema
            __annotations__ = {
                "maxSkew": maxSkew,
                "topologyKey": topologyKey,
                "whenUnsatisfiable": whenUnsatisfiable,
                "labelSelector": labelSelector,
                "matchLabelKeys": matchLabelKeys,
                "minDomains": minDomains,
                "nodeAffinityPolicy": nodeAffinityPolicy,
                "nodeTaintsPolicy": nodeTaintsPolicy,
            }
    
    whenUnsatisfiable: MetaOapg.properties.whenUnsatisfiable
    maxSkew: MetaOapg.properties.maxSkew
    topologyKey: MetaOapg.properties.topologyKey
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxSkew"]) -> MetaOapg.properties.maxSkew: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["topologyKey"]) -> MetaOapg.properties.topologyKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["whenUnsatisfiable"]) -> MetaOapg.properties.whenUnsatisfiable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["labelSelector"]) -> 'V1LabelSelector': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["matchLabelKeys"]) -> MetaOapg.properties.matchLabelKeys: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["minDomains"]) -> MetaOapg.properties.minDomains: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nodeAffinityPolicy"]) -> MetaOapg.properties.nodeAffinityPolicy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nodeTaintsPolicy"]) -> MetaOapg.properties.nodeTaintsPolicy: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["maxSkew", "topologyKey", "whenUnsatisfiable", "labelSelector", "matchLabelKeys", "minDomains", "nodeAffinityPolicy", "nodeTaintsPolicy", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxSkew"]) -> MetaOapg.properties.maxSkew: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["topologyKey"]) -> MetaOapg.properties.topologyKey: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["whenUnsatisfiable"]) -> MetaOapg.properties.whenUnsatisfiable: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["labelSelector"]) -> typing.Union['V1LabelSelector', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["matchLabelKeys"]) -> typing.Union[MetaOapg.properties.matchLabelKeys, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["minDomains"]) -> typing.Union[MetaOapg.properties.minDomains, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nodeAffinityPolicy"]) -> typing.Union[MetaOapg.properties.nodeAffinityPolicy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nodeTaintsPolicy"]) -> typing.Union[MetaOapg.properties.nodeTaintsPolicy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["maxSkew", "topologyKey", "whenUnsatisfiable", "labelSelector", "matchLabelKeys", "minDomains", "nodeAffinityPolicy", "nodeTaintsPolicy", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        whenUnsatisfiable: typing.Union[MetaOapg.properties.whenUnsatisfiable, str, ],
        maxSkew: typing.Union[MetaOapg.properties.maxSkew, decimal.Decimal, int, ],
        topologyKey: typing.Union[MetaOapg.properties.topologyKey, str, ],
        labelSelector: typing.Union['V1LabelSelector', schemas.Unset] = schemas.unset,
        matchLabelKeys: typing.Union[MetaOapg.properties.matchLabelKeys, list, tuple, schemas.Unset] = schemas.unset,
        minDomains: typing.Union[MetaOapg.properties.minDomains, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        nodeAffinityPolicy: typing.Union[MetaOapg.properties.nodeAffinityPolicy, str, schemas.Unset] = schemas.unset,
        nodeTaintsPolicy: typing.Union[MetaOapg.properties.nodeTaintsPolicy, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1TopologySpreadConstraint':
        return super().__new__(
            cls,
            *args,
            whenUnsatisfiable=whenUnsatisfiable,
            maxSkew=maxSkew,
            topologyKey=topologyKey,
            labelSelector=labelSelector,
            matchLabelKeys=matchLabelKeys,
            minDomains=minDomains,
            nodeAffinityPolicy=nodeAffinityPolicy,
            nodeTaintsPolicy=nodeTaintsPolicy,
            _configuration=_configuration,
            **kwargs,
        )

from client.model.v1_label_selector import V1LabelSelector
