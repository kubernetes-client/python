# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class V1PodDisruptionBudgetStatus(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.
    """


    class MetaOapg:
        required = {
            "currentHealthy",
            "expectedPods",
            "disruptionsAllowed",
            "desiredHealthy",
        }
        
        class properties:
            currentHealthy = schemas.Int32Schema
            desiredHealthy = schemas.Int32Schema
            disruptionsAllowed = schemas.Int32Schema
            expectedPods = schemas.Int32Schema
            
            
            class conditions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1Condition']:
                        return V1Condition
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1Condition'], typing.List['V1Condition']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'conditions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1Condition':
                    return super().__getitem__(i)
            
            
            class disruptedPods(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.DateTimeSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, datetime, ],
                ) -> 'disruptedPods':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            observedGeneration = schemas.Int64Schema
            __annotations__ = {
                "currentHealthy": currentHealthy,
                "desiredHealthy": desiredHealthy,
                "disruptionsAllowed": disruptionsAllowed,
                "expectedPods": expectedPods,
                "conditions": conditions,
                "disruptedPods": disruptedPods,
                "observedGeneration": observedGeneration,
            }
    
    currentHealthy: MetaOapg.properties.currentHealthy
    expectedPods: MetaOapg.properties.expectedPods
    disruptionsAllowed: MetaOapg.properties.disruptionsAllowed
    desiredHealthy: MetaOapg.properties.desiredHealthy
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentHealthy"]) -> MetaOapg.properties.currentHealthy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["desiredHealthy"]) -> MetaOapg.properties.desiredHealthy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disruptionsAllowed"]) -> MetaOapg.properties.disruptionsAllowed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expectedPods"]) -> MetaOapg.properties.expectedPods: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conditions"]) -> MetaOapg.properties.conditions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disruptedPods"]) -> MetaOapg.properties.disruptedPods: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["observedGeneration"]) -> MetaOapg.properties.observedGeneration: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["currentHealthy", "desiredHealthy", "disruptionsAllowed", "expectedPods", "conditions", "disruptedPods", "observedGeneration", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentHealthy"]) -> MetaOapg.properties.currentHealthy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["desiredHealthy"]) -> MetaOapg.properties.desiredHealthy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disruptionsAllowed"]) -> MetaOapg.properties.disruptionsAllowed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expectedPods"]) -> MetaOapg.properties.expectedPods: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conditions"]) -> typing.Union[MetaOapg.properties.conditions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disruptedPods"]) -> typing.Union[MetaOapg.properties.disruptedPods, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["observedGeneration"]) -> typing.Union[MetaOapg.properties.observedGeneration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["currentHealthy", "desiredHealthy", "disruptionsAllowed", "expectedPods", "conditions", "disruptedPods", "observedGeneration", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        currentHealthy: typing.Union[MetaOapg.properties.currentHealthy, decimal.Decimal, int, ],
        expectedPods: typing.Union[MetaOapg.properties.expectedPods, decimal.Decimal, int, ],
        disruptionsAllowed: typing.Union[MetaOapg.properties.disruptionsAllowed, decimal.Decimal, int, ],
        desiredHealthy: typing.Union[MetaOapg.properties.desiredHealthy, decimal.Decimal, int, ],
        conditions: typing.Union[MetaOapg.properties.conditions, list, tuple, schemas.Unset] = schemas.unset,
        disruptedPods: typing.Union[MetaOapg.properties.disruptedPods, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        observedGeneration: typing.Union[MetaOapg.properties.observedGeneration, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1PodDisruptionBudgetStatus':
        return super().__new__(
            cls,
            *args,
            currentHealthy=currentHealthy,
            expectedPods=expectedPods,
            disruptionsAllowed=disruptionsAllowed,
            desiredHealthy=desiredHealthy,
            conditions=conditions,
            disruptedPods=disruptedPods,
            observedGeneration=observedGeneration,
            _configuration=_configuration,
            **kwargs,
        )

from kubernetes.client.model.v1_condition import V1Condition
