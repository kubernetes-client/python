# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from client import schemas  # noqa: F401


class V1LabelSelector(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.
    """


    class MetaOapg:
        
        class properties:
            
            
            class matchExpressions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1LabelSelectorRequirement']:
                        return V1LabelSelectorRequirement
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1LabelSelectorRequirement'], typing.List['V1LabelSelectorRequirement']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'matchExpressions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1LabelSelectorRequirement':
                    return super().__getitem__(i)
            
            
            class matchLabels(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'matchLabels':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            __annotations__ = {
                "matchExpressions": matchExpressions,
                "matchLabels": matchLabels,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["matchExpressions"]) -> MetaOapg.properties.matchExpressions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["matchLabels"]) -> MetaOapg.properties.matchLabels: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["matchExpressions", "matchLabels", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["matchExpressions"]) -> typing.Union[MetaOapg.properties.matchExpressions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["matchLabels"]) -> typing.Union[MetaOapg.properties.matchLabels, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["matchExpressions", "matchLabels", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        matchExpressions: typing.Union[MetaOapg.properties.matchExpressions, list, tuple, schemas.Unset] = schemas.unset,
        matchLabels: typing.Union[MetaOapg.properties.matchLabels, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1LabelSelector':
        return super().__new__(
            cls,
            *args,
            matchExpressions=matchExpressions,
            matchLabels=matchLabels,
            _configuration=_configuration,
            **kwargs,
        )

from client.model.v1_label_selector_requirement import V1LabelSelectorRequirement
