# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from client import schemas  # noqa: F401


class V1ConfigMapNodeConfigSource(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node. This API is deprecated since 1.22: https://git.k8s.io/enhancements/keps/sig-node/281-dynamic-kubelet-configuration
    """


    class MetaOapg:
        required = {
            "kubeletConfigKey",
            "name",
            "namespace",
        }
        
        class properties:
            kubeletConfigKey = schemas.StrSchema
            name = schemas.StrSchema
            namespace = schemas.StrSchema
            resourceVersion = schemas.StrSchema
            uid = schemas.StrSchema
            __annotations__ = {
                "kubeletConfigKey": kubeletConfigKey,
                "name": name,
                "namespace": namespace,
                "resourceVersion": resourceVersion,
                "uid": uid,
            }
    
    kubeletConfigKey: MetaOapg.properties.kubeletConfigKey
    name: MetaOapg.properties.name
    namespace: MetaOapg.properties.namespace
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kubeletConfigKey"]) -> MetaOapg.properties.kubeletConfigKey: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["namespace"]) -> MetaOapg.properties.namespace: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resourceVersion"]) -> MetaOapg.properties.resourceVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uid"]) -> MetaOapg.properties.uid: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["kubeletConfigKey", "name", "namespace", "resourceVersion", "uid", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kubeletConfigKey"]) -> MetaOapg.properties.kubeletConfigKey: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["namespace"]) -> MetaOapg.properties.namespace: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resourceVersion"]) -> typing.Union[MetaOapg.properties.resourceVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uid"]) -> typing.Union[MetaOapg.properties.uid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["kubeletConfigKey", "name", "namespace", "resourceVersion", "uid", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        kubeletConfigKey: typing.Union[MetaOapg.properties.kubeletConfigKey, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        namespace: typing.Union[MetaOapg.properties.namespace, str, ],
        resourceVersion: typing.Union[MetaOapg.properties.resourceVersion, str, schemas.Unset] = schemas.unset,
        uid: typing.Union[MetaOapg.properties.uid, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1ConfigMapNodeConfigSource':
        return super().__new__(
            cls,
            *args,
            kubeletConfigKey=kubeletConfigKey,
            name=name,
            namespace=namespace,
            resourceVersion=resourceVersion,
            uid=uid,
            _configuration=_configuration,
            **kwargs,
        )
