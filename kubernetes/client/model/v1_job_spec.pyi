# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from client import schemas  # noqa: F401


class V1JobSpec(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    JobSpec describes how the job execution will look like.
    """


    class MetaOapg:
        required = {
            "template",
        }
        
        class properties:
        
            @staticmethod
            def template() -> typing.Type['V1PodTemplateSpec']:
                return V1PodTemplateSpec
            activeDeadlineSeconds = schemas.Int64Schema
            backoffLimit = schemas.Int32Schema
            completionMode = schemas.StrSchema
            completions = schemas.Int32Schema
            manualSelector = schemas.BoolSchema
            parallelism = schemas.Int32Schema
        
            @staticmethod
            def podFailurePolicy() -> typing.Type['V1PodFailurePolicy']:
                return V1PodFailurePolicy
        
            @staticmethod
            def selector() -> typing.Type['V1LabelSelector']:
                return V1LabelSelector
            suspend = schemas.BoolSchema
            ttlSecondsAfterFinished = schemas.Int32Schema
            __annotations__ = {
                "template": template,
                "activeDeadlineSeconds": activeDeadlineSeconds,
                "backoffLimit": backoffLimit,
                "completionMode": completionMode,
                "completions": completions,
                "manualSelector": manualSelector,
                "parallelism": parallelism,
                "podFailurePolicy": podFailurePolicy,
                "selector": selector,
                "suspend": suspend,
                "ttlSecondsAfterFinished": ttlSecondsAfterFinished,
            }
    
    template: 'V1PodTemplateSpec'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["template"]) -> 'V1PodTemplateSpec': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activeDeadlineSeconds"]) -> MetaOapg.properties.activeDeadlineSeconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["backoffLimit"]) -> MetaOapg.properties.backoffLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completionMode"]) -> MetaOapg.properties.completionMode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completions"]) -> MetaOapg.properties.completions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["manualSelector"]) -> MetaOapg.properties.manualSelector: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parallelism"]) -> MetaOapg.properties.parallelism: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["podFailurePolicy"]) -> 'V1PodFailurePolicy': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["selector"]) -> 'V1LabelSelector': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suspend"]) -> MetaOapg.properties.suspend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ttlSecondsAfterFinished"]) -> MetaOapg.properties.ttlSecondsAfterFinished: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["template", "activeDeadlineSeconds", "backoffLimit", "completionMode", "completions", "manualSelector", "parallelism", "podFailurePolicy", "selector", "suspend", "ttlSecondsAfterFinished", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["template"]) -> 'V1PodTemplateSpec': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activeDeadlineSeconds"]) -> typing.Union[MetaOapg.properties.activeDeadlineSeconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["backoffLimit"]) -> typing.Union[MetaOapg.properties.backoffLimit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completionMode"]) -> typing.Union[MetaOapg.properties.completionMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completions"]) -> typing.Union[MetaOapg.properties.completions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["manualSelector"]) -> typing.Union[MetaOapg.properties.manualSelector, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parallelism"]) -> typing.Union[MetaOapg.properties.parallelism, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["podFailurePolicy"]) -> typing.Union['V1PodFailurePolicy', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["selector"]) -> typing.Union['V1LabelSelector', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suspend"]) -> typing.Union[MetaOapg.properties.suspend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ttlSecondsAfterFinished"]) -> typing.Union[MetaOapg.properties.ttlSecondsAfterFinished, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["template", "activeDeadlineSeconds", "backoffLimit", "completionMode", "completions", "manualSelector", "parallelism", "podFailurePolicy", "selector", "suspend", "ttlSecondsAfterFinished", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        template: 'V1PodTemplateSpec',
        activeDeadlineSeconds: typing.Union[MetaOapg.properties.activeDeadlineSeconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        backoffLimit: typing.Union[MetaOapg.properties.backoffLimit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        completionMode: typing.Union[MetaOapg.properties.completionMode, str, schemas.Unset] = schemas.unset,
        completions: typing.Union[MetaOapg.properties.completions, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        manualSelector: typing.Union[MetaOapg.properties.manualSelector, bool, schemas.Unset] = schemas.unset,
        parallelism: typing.Union[MetaOapg.properties.parallelism, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        podFailurePolicy: typing.Union['V1PodFailurePolicy', schemas.Unset] = schemas.unset,
        selector: typing.Union['V1LabelSelector', schemas.Unset] = schemas.unset,
        suspend: typing.Union[MetaOapg.properties.suspend, bool, schemas.Unset] = schemas.unset,
        ttlSecondsAfterFinished: typing.Union[MetaOapg.properties.ttlSecondsAfterFinished, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1JobSpec':
        return super().__new__(
            cls,
            *args,
            template=template,
            activeDeadlineSeconds=activeDeadlineSeconds,
            backoffLimit=backoffLimit,
            completionMode=completionMode,
            completions=completions,
            manualSelector=manualSelector,
            parallelism=parallelism,
            podFailurePolicy=podFailurePolicy,
            selector=selector,
            suspend=suspend,
            ttlSecondsAfterFinished=ttlSecondsAfterFinished,
            _configuration=_configuration,
            **kwargs,
        )

from client.model.v1_label_selector import V1LabelSelector
from client.model.v1_pod_failure_policy import V1PodFailurePolicy
from client.model.v1_pod_template_spec import V1PodTemplateSpec
