# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from client import schemas  # noqa: F401


class V1LifecycleHandler(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def _exec() -> typing.Type['V1ExecAction']:
                return V1ExecAction
        
            @staticmethod
            def httpGet() -> typing.Type['V1HTTPGetAction']:
                return V1HTTPGetAction
        
            @staticmethod
            def tcpSocket() -> typing.Type['V1TCPSocketAction']:
                return V1TCPSocketAction
            __annotations__ = {
                "exec": _exec,
                "httpGet": httpGet,
                "tcpSocket": tcpSocket,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exec"]) -> 'V1ExecAction': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["httpGet"]) -> 'V1HTTPGetAction': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tcpSocket"]) -> 'V1TCPSocketAction': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["exec", "httpGet", "tcpSocket", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exec"]) -> typing.Union['V1ExecAction', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["httpGet"]) -> typing.Union['V1HTTPGetAction', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tcpSocket"]) -> typing.Union['V1TCPSocketAction', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["exec", "httpGet", "tcpSocket", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        httpGet: typing.Union['V1HTTPGetAction', schemas.Unset] = schemas.unset,
        tcpSocket: typing.Union['V1TCPSocketAction', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1LifecycleHandler':
        return super().__new__(
            cls,
            *args,
            httpGet=httpGet,
            tcpSocket=tcpSocket,
            _configuration=_configuration,
            **kwargs,
        )

from client.model.v1_exec_action import V1ExecAction
from client.model.v1_http_get_action import V1HTTPGetAction
from client.model.v1_tcp_socket_action import V1TCPSocketAction
