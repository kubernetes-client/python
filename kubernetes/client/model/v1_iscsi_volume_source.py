# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class V1ISCSIVolumeSource(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
    """


    class MetaOapg:
        required = {
            "lun",
            "iqn",
            "targetPortal",
        }
        
        class properties:
            iqn = schemas.StrSchema
            lun = schemas.Int32Schema
            targetPortal = schemas.StrSchema
            chapAuthDiscovery = schemas.BoolSchema
            chapAuthSession = schemas.BoolSchema
            fsType = schemas.StrSchema
            initiatorName = schemas.StrSchema
            iscsiInterface = schemas.StrSchema
            
            
            class portals(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'portals':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            readOnly = schemas.BoolSchema
        
            @staticmethod
            def secretRef() -> typing.Type['V1LocalObjectReference']:
                return V1LocalObjectReference
            __annotations__ = {
                "iqn": iqn,
                "lun": lun,
                "targetPortal": targetPortal,
                "chapAuthDiscovery": chapAuthDiscovery,
                "chapAuthSession": chapAuthSession,
                "fsType": fsType,
                "initiatorName": initiatorName,
                "iscsiInterface": iscsiInterface,
                "portals": portals,
                "readOnly": readOnly,
                "secretRef": secretRef,
            }
    
    lun: MetaOapg.properties.lun
    iqn: MetaOapg.properties.iqn
    targetPortal: MetaOapg.properties.targetPortal
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iqn"]) -> MetaOapg.properties.iqn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lun"]) -> MetaOapg.properties.lun: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetPortal"]) -> MetaOapg.properties.targetPortal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chapAuthDiscovery"]) -> MetaOapg.properties.chapAuthDiscovery: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chapAuthSession"]) -> MetaOapg.properties.chapAuthSession: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fsType"]) -> MetaOapg.properties.fsType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["initiatorName"]) -> MetaOapg.properties.initiatorName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iscsiInterface"]) -> MetaOapg.properties.iscsiInterface: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["portals"]) -> MetaOapg.properties.portals: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["readOnly"]) -> MetaOapg.properties.readOnly: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secretRef"]) -> 'V1LocalObjectReference': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["iqn", "lun", "targetPortal", "chapAuthDiscovery", "chapAuthSession", "fsType", "initiatorName", "iscsiInterface", "portals", "readOnly", "secretRef", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iqn"]) -> MetaOapg.properties.iqn: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lun"]) -> MetaOapg.properties.lun: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetPortal"]) -> MetaOapg.properties.targetPortal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chapAuthDiscovery"]) -> typing.Union[MetaOapg.properties.chapAuthDiscovery, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chapAuthSession"]) -> typing.Union[MetaOapg.properties.chapAuthSession, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fsType"]) -> typing.Union[MetaOapg.properties.fsType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["initiatorName"]) -> typing.Union[MetaOapg.properties.initiatorName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iscsiInterface"]) -> typing.Union[MetaOapg.properties.iscsiInterface, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["portals"]) -> typing.Union[MetaOapg.properties.portals, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["readOnly"]) -> typing.Union[MetaOapg.properties.readOnly, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secretRef"]) -> typing.Union['V1LocalObjectReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["iqn", "lun", "targetPortal", "chapAuthDiscovery", "chapAuthSession", "fsType", "initiatorName", "iscsiInterface", "portals", "readOnly", "secretRef", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        lun: typing.Union[MetaOapg.properties.lun, decimal.Decimal, int, ],
        iqn: typing.Union[MetaOapg.properties.iqn, str, ],
        targetPortal: typing.Union[MetaOapg.properties.targetPortal, str, ],
        chapAuthDiscovery: typing.Union[MetaOapg.properties.chapAuthDiscovery, bool, schemas.Unset] = schemas.unset,
        chapAuthSession: typing.Union[MetaOapg.properties.chapAuthSession, bool, schemas.Unset] = schemas.unset,
        fsType: typing.Union[MetaOapg.properties.fsType, str, schemas.Unset] = schemas.unset,
        initiatorName: typing.Union[MetaOapg.properties.initiatorName, str, schemas.Unset] = schemas.unset,
        iscsiInterface: typing.Union[MetaOapg.properties.iscsiInterface, str, schemas.Unset] = schemas.unset,
        portals: typing.Union[MetaOapg.properties.portals, list, tuple, schemas.Unset] = schemas.unset,
        readOnly: typing.Union[MetaOapg.properties.readOnly, bool, schemas.Unset] = schemas.unset,
        secretRef: typing.Union['V1LocalObjectReference', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1ISCSIVolumeSource':
        return super().__new__(
            cls,
            *args,
            lun=lun,
            iqn=iqn,
            targetPortal=targetPortal,
            chapAuthDiscovery=chapAuthDiscovery,
            chapAuthSession=chapAuthSession,
            fsType=fsType,
            initiatorName=initiatorName,
            iscsiInterface=iscsiInterface,
            portals=portals,
            readOnly=readOnly,
            secretRef=secretRef,
            _configuration=_configuration,
            **kwargs,
        )

from kubernetes.client.model.v1_local_object_reference import V1LocalObjectReference
