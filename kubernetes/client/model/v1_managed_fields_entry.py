# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class V1ManagedFieldsEntry(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
    """


    class MetaOapg:
        
        class properties:
            apiVersion = schemas.StrSchema
            fieldsType = schemas.StrSchema
            fieldsV1 = schemas.DictSchema
            manager = schemas.StrSchema
            operation = schemas.StrSchema
            subresource = schemas.StrSchema
            time = schemas.DateTimeSchema
            __annotations__ = {
                "apiVersion": apiVersion,
                "fieldsType": fieldsType,
                "fieldsV1": fieldsV1,
                "manager": manager,
                "operation": operation,
                "subresource": subresource,
                "time": time,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["apiVersion"]) -> MetaOapg.properties.apiVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldsType"]) -> MetaOapg.properties.fieldsType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fieldsV1"]) -> MetaOapg.properties.fieldsV1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["manager"]) -> MetaOapg.properties.manager: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operation"]) -> MetaOapg.properties.operation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subresource"]) -> MetaOapg.properties.subresource: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["apiVersion", "fieldsType", "fieldsV1", "manager", "operation", "subresource", "time", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["apiVersion"]) -> typing.Union[MetaOapg.properties.apiVersion, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldsType"]) -> typing.Union[MetaOapg.properties.fieldsType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fieldsV1"]) -> typing.Union[MetaOapg.properties.fieldsV1, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["manager"]) -> typing.Union[MetaOapg.properties.manager, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operation"]) -> typing.Union[MetaOapg.properties.operation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subresource"]) -> typing.Union[MetaOapg.properties.subresource, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time"]) -> typing.Union[MetaOapg.properties.time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["apiVersion", "fieldsType", "fieldsV1", "manager", "operation", "subresource", "time", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        apiVersion: typing.Union[MetaOapg.properties.apiVersion, str, schemas.Unset] = schemas.unset,
        fieldsType: typing.Union[MetaOapg.properties.fieldsType, str, schemas.Unset] = schemas.unset,
        fieldsV1: typing.Union[MetaOapg.properties.fieldsV1, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        manager: typing.Union[MetaOapg.properties.manager, str, schemas.Unset] = schemas.unset,
        operation: typing.Union[MetaOapg.properties.operation, str, schemas.Unset] = schemas.unset,
        subresource: typing.Union[MetaOapg.properties.subresource, str, schemas.Unset] = schemas.unset,
        time: typing.Union[MetaOapg.properties.time, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1ManagedFieldsEntry':
        return super().__new__(
            cls,
            *args,
            apiVersion=apiVersion,
            fieldsType=fieldsType,
            fieldsV1=fieldsV1,
            manager=manager,
            operation=operation,
            subresource=subresource,
            time=time,
            _configuration=_configuration,
            **kwargs,
        )
