# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class V1beta1PolicyRulesWithSubjects(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.
    """


    class MetaOapg:
        required = {
            "subjects",
        }
        
        class properties:
            
            
            class subjects(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1beta1Subject']:
                        return V1beta1Subject
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1beta1Subject'], typing.List['V1beta1Subject']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subjects':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1beta1Subject':
                    return super().__getitem__(i)
            
            
            class nonResourceRules(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1beta1NonResourcePolicyRule']:
                        return V1beta1NonResourcePolicyRule
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1beta1NonResourcePolicyRule'], typing.List['V1beta1NonResourcePolicyRule']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'nonResourceRules':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1beta1NonResourcePolicyRule':
                    return super().__getitem__(i)
            
            
            class resourceRules(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1beta1ResourcePolicyRule']:
                        return V1beta1ResourcePolicyRule
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1beta1ResourcePolicyRule'], typing.List['V1beta1ResourcePolicyRule']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'resourceRules':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1beta1ResourcePolicyRule':
                    return super().__getitem__(i)
            __annotations__ = {
                "subjects": subjects,
                "nonResourceRules": nonResourceRules,
                "resourceRules": resourceRules,
            }
    
    subjects: MetaOapg.properties.subjects
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subjects"]) -> MetaOapg.properties.subjects: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nonResourceRules"]) -> MetaOapg.properties.nonResourceRules: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resourceRules"]) -> MetaOapg.properties.resourceRules: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["subjects", "nonResourceRules", "resourceRules", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subjects"]) -> MetaOapg.properties.subjects: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nonResourceRules"]) -> typing.Union[MetaOapg.properties.nonResourceRules, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resourceRules"]) -> typing.Union[MetaOapg.properties.resourceRules, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["subjects", "nonResourceRules", "resourceRules", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        subjects: typing.Union[MetaOapg.properties.subjects, list, tuple, ],
        nonResourceRules: typing.Union[MetaOapg.properties.nonResourceRules, list, tuple, schemas.Unset] = schemas.unset,
        resourceRules: typing.Union[MetaOapg.properties.resourceRules, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1beta1PolicyRulesWithSubjects':
        return super().__new__(
            cls,
            *args,
            subjects=subjects,
            nonResourceRules=nonResourceRules,
            resourceRules=resourceRules,
            _configuration=_configuration,
            **kwargs,
        )

from kubernetes.client.model.v1beta1_non_resource_policy_rule import V1beta1NonResourcePolicyRule
from kubernetes.client.model.v1beta1_resource_policy_rule import V1beta1ResourcePolicyRule
from kubernetes.client.model.v1beta1_subject import V1beta1Subject
