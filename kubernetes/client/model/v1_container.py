# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class V1Container(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    A single application container that you want to run within a pod.
    """


    class MetaOapg:
        required = {
            "name",
        }
        
        class properties:
            name = schemas.StrSchema
            
            
            class args(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'args':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class command(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'command':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class env(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1EnvVar']:
                        return V1EnvVar
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1EnvVar'], typing.List['V1EnvVar']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'env':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1EnvVar':
                    return super().__getitem__(i)
            
            
            class envFrom(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1EnvFromSource']:
                        return V1EnvFromSource
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1EnvFromSource'], typing.List['V1EnvFromSource']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'envFrom':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1EnvFromSource':
                    return super().__getitem__(i)
            image = schemas.StrSchema
            imagePullPolicy = schemas.StrSchema
        
            @staticmethod
            def lifecycle() -> typing.Type['V1Lifecycle']:
                return V1Lifecycle
        
            @staticmethod
            def livenessProbe() -> typing.Type['V1Probe']:
                return V1Probe
            
            
            class ports(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1ContainerPort']:
                        return V1ContainerPort
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1ContainerPort'], typing.List['V1ContainerPort']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ports':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1ContainerPort':
                    return super().__getitem__(i)
        
            @staticmethod
            def readinessProbe() -> typing.Type['V1Probe']:
                return V1Probe
        
            @staticmethod
            def resources() -> typing.Type['V1ResourceRequirements']:
                return V1ResourceRequirements
        
            @staticmethod
            def securityContext() -> typing.Type['V1SecurityContext']:
                return V1SecurityContext
        
            @staticmethod
            def startupProbe() -> typing.Type['V1Probe']:
                return V1Probe
            stdin = schemas.BoolSchema
            stdinOnce = schemas.BoolSchema
            terminationMessagePath = schemas.StrSchema
            terminationMessagePolicy = schemas.StrSchema
            tty = schemas.BoolSchema
            
            
            class volumeDevices(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1VolumeDevice']:
                        return V1VolumeDevice
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1VolumeDevice'], typing.List['V1VolumeDevice']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'volumeDevices':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1VolumeDevice':
                    return super().__getitem__(i)
            
            
            class volumeMounts(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1VolumeMount']:
                        return V1VolumeMount
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1VolumeMount'], typing.List['V1VolumeMount']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'volumeMounts':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1VolumeMount':
                    return super().__getitem__(i)
            workingDir = schemas.StrSchema
            __annotations__ = {
                "name": name,
                "args": args,
                "command": command,
                "env": env,
                "envFrom": envFrom,
                "image": image,
                "imagePullPolicy": imagePullPolicy,
                "lifecycle": lifecycle,
                "livenessProbe": livenessProbe,
                "ports": ports,
                "readinessProbe": readinessProbe,
                "resources": resources,
                "securityContext": securityContext,
                "startupProbe": startupProbe,
                "stdin": stdin,
                "stdinOnce": stdinOnce,
                "terminationMessagePath": terminationMessagePath,
                "terminationMessagePolicy": terminationMessagePolicy,
                "tty": tty,
                "volumeDevices": volumeDevices,
                "volumeMounts": volumeMounts,
                "workingDir": workingDir,
            }
    
    name: MetaOapg.properties.name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["args"]) -> MetaOapg.properties.args: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["command"]) -> MetaOapg.properties.command: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["env"]) -> MetaOapg.properties.env: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["envFrom"]) -> MetaOapg.properties.envFrom: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["image"]) -> MetaOapg.properties.image: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["imagePullPolicy"]) -> MetaOapg.properties.imagePullPolicy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lifecycle"]) -> 'V1Lifecycle': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["livenessProbe"]) -> 'V1Probe': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ports"]) -> MetaOapg.properties.ports: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["readinessProbe"]) -> 'V1Probe': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resources"]) -> 'V1ResourceRequirements': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["securityContext"]) -> 'V1SecurityContext': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startupProbe"]) -> 'V1Probe': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stdin"]) -> MetaOapg.properties.stdin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stdinOnce"]) -> MetaOapg.properties.stdinOnce: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["terminationMessagePath"]) -> MetaOapg.properties.terminationMessagePath: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["terminationMessagePolicy"]) -> MetaOapg.properties.terminationMessagePolicy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tty"]) -> MetaOapg.properties.tty: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volumeDevices"]) -> MetaOapg.properties.volumeDevices: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volumeMounts"]) -> MetaOapg.properties.volumeMounts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["workingDir"]) -> MetaOapg.properties.workingDir: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "args", "command", "env", "envFrom", "image", "imagePullPolicy", "lifecycle", "livenessProbe", "ports", "readinessProbe", "resources", "securityContext", "startupProbe", "stdin", "stdinOnce", "terminationMessagePath", "terminationMessagePolicy", "tty", "volumeDevices", "volumeMounts", "workingDir", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["args"]) -> typing.Union[MetaOapg.properties.args, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["command"]) -> typing.Union[MetaOapg.properties.command, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["env"]) -> typing.Union[MetaOapg.properties.env, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["envFrom"]) -> typing.Union[MetaOapg.properties.envFrom, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["image"]) -> typing.Union[MetaOapg.properties.image, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["imagePullPolicy"]) -> typing.Union[MetaOapg.properties.imagePullPolicy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lifecycle"]) -> typing.Union['V1Lifecycle', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["livenessProbe"]) -> typing.Union['V1Probe', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ports"]) -> typing.Union[MetaOapg.properties.ports, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["readinessProbe"]) -> typing.Union['V1Probe', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resources"]) -> typing.Union['V1ResourceRequirements', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["securityContext"]) -> typing.Union['V1SecurityContext', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startupProbe"]) -> typing.Union['V1Probe', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stdin"]) -> typing.Union[MetaOapg.properties.stdin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stdinOnce"]) -> typing.Union[MetaOapg.properties.stdinOnce, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["terminationMessagePath"]) -> typing.Union[MetaOapg.properties.terminationMessagePath, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["terminationMessagePolicy"]) -> typing.Union[MetaOapg.properties.terminationMessagePolicy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tty"]) -> typing.Union[MetaOapg.properties.tty, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volumeDevices"]) -> typing.Union[MetaOapg.properties.volumeDevices, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volumeMounts"]) -> typing.Union[MetaOapg.properties.volumeMounts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["workingDir"]) -> typing.Union[MetaOapg.properties.workingDir, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "args", "command", "env", "envFrom", "image", "imagePullPolicy", "lifecycle", "livenessProbe", "ports", "readinessProbe", "resources", "securityContext", "startupProbe", "stdin", "stdinOnce", "terminationMessagePath", "terminationMessagePolicy", "tty", "volumeDevices", "volumeMounts", "workingDir", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        args: typing.Union[MetaOapg.properties.args, list, tuple, schemas.Unset] = schemas.unset,
        command: typing.Union[MetaOapg.properties.command, list, tuple, schemas.Unset] = schemas.unset,
        env: typing.Union[MetaOapg.properties.env, list, tuple, schemas.Unset] = schemas.unset,
        envFrom: typing.Union[MetaOapg.properties.envFrom, list, tuple, schemas.Unset] = schemas.unset,
        image: typing.Union[MetaOapg.properties.image, str, schemas.Unset] = schemas.unset,
        imagePullPolicy: typing.Union[MetaOapg.properties.imagePullPolicy, str, schemas.Unset] = schemas.unset,
        lifecycle: typing.Union['V1Lifecycle', schemas.Unset] = schemas.unset,
        livenessProbe: typing.Union['V1Probe', schemas.Unset] = schemas.unset,
        ports: typing.Union[MetaOapg.properties.ports, list, tuple, schemas.Unset] = schemas.unset,
        readinessProbe: typing.Union['V1Probe', schemas.Unset] = schemas.unset,
        resources: typing.Union['V1ResourceRequirements', schemas.Unset] = schemas.unset,
        securityContext: typing.Union['V1SecurityContext', schemas.Unset] = schemas.unset,
        startupProbe: typing.Union['V1Probe', schemas.Unset] = schemas.unset,
        stdin: typing.Union[MetaOapg.properties.stdin, bool, schemas.Unset] = schemas.unset,
        stdinOnce: typing.Union[MetaOapg.properties.stdinOnce, bool, schemas.Unset] = schemas.unset,
        terminationMessagePath: typing.Union[MetaOapg.properties.terminationMessagePath, str, schemas.Unset] = schemas.unset,
        terminationMessagePolicy: typing.Union[MetaOapg.properties.terminationMessagePolicy, str, schemas.Unset] = schemas.unset,
        tty: typing.Union[MetaOapg.properties.tty, bool, schemas.Unset] = schemas.unset,
        volumeDevices: typing.Union[MetaOapg.properties.volumeDevices, list, tuple, schemas.Unset] = schemas.unset,
        volumeMounts: typing.Union[MetaOapg.properties.volumeMounts, list, tuple, schemas.Unset] = schemas.unset,
        workingDir: typing.Union[MetaOapg.properties.workingDir, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1Container':
        return super().__new__(
            cls,
            *args,
            name=name,
            args=args,
            command=command,
            env=env,
            envFrom=envFrom,
            image=image,
            imagePullPolicy=imagePullPolicy,
            lifecycle=lifecycle,
            livenessProbe=livenessProbe,
            ports=ports,
            readinessProbe=readinessProbe,
            resources=resources,
            securityContext=securityContext,
            startupProbe=startupProbe,
            stdin=stdin,
            stdinOnce=stdinOnce,
            terminationMessagePath=terminationMessagePath,
            terminationMessagePolicy=terminationMessagePolicy,
            tty=tty,
            volumeDevices=volumeDevices,
            volumeMounts=volumeMounts,
            workingDir=workingDir,
            _configuration=_configuration,
            **kwargs,
        )

from kubernetes.client.model.v1_container_port import V1ContainerPort
from kubernetes.client.model.v1_env_from_source import V1EnvFromSource
from kubernetes.client.model.v1_env_var import V1EnvVar
from kubernetes.client.model.v1_lifecycle import V1Lifecycle
from kubernetes.client.model.v1_probe import V1Probe
from kubernetes.client.model.v1_resource_requirements import V1ResourceRequirements
from kubernetes.client.model.v1_security_context import V1SecurityContext
from kubernetes.client.model.v1_volume_device import V1VolumeDevice
from kubernetes.client.model.v1_volume_mount import V1VolumeMount
