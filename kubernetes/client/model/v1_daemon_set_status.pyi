# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from client import schemas  # noqa: F401


class V1DaemonSetStatus(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    DaemonSetStatus represents the current status of a daemon set.
    """


    class MetaOapg:
        required = {
            "numberMisscheduled",
            "numberReady",
            "currentNumberScheduled",
            "desiredNumberScheduled",
        }
        
        class properties:
            currentNumberScheduled = schemas.Int32Schema
            desiredNumberScheduled = schemas.Int32Schema
            numberMisscheduled = schemas.Int32Schema
            numberReady = schemas.Int32Schema
            collisionCount = schemas.Int32Schema
            
            
            class conditions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1DaemonSetCondition']:
                        return V1DaemonSetCondition
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1DaemonSetCondition'], typing.List['V1DaemonSetCondition']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'conditions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1DaemonSetCondition':
                    return super().__getitem__(i)
            numberAvailable = schemas.Int32Schema
            numberUnavailable = schemas.Int32Schema
            observedGeneration = schemas.Int64Schema
            updatedNumberScheduled = schemas.Int32Schema
            __annotations__ = {
                "currentNumberScheduled": currentNumberScheduled,
                "desiredNumberScheduled": desiredNumberScheduled,
                "numberMisscheduled": numberMisscheduled,
                "numberReady": numberReady,
                "collisionCount": collisionCount,
                "conditions": conditions,
                "numberAvailable": numberAvailable,
                "numberUnavailable": numberUnavailable,
                "observedGeneration": observedGeneration,
                "updatedNumberScheduled": updatedNumberScheduled,
            }
    
    numberMisscheduled: MetaOapg.properties.numberMisscheduled
    numberReady: MetaOapg.properties.numberReady
    currentNumberScheduled: MetaOapg.properties.currentNumberScheduled
    desiredNumberScheduled: MetaOapg.properties.desiredNumberScheduled
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currentNumberScheduled"]) -> MetaOapg.properties.currentNumberScheduled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["desiredNumberScheduled"]) -> MetaOapg.properties.desiredNumberScheduled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numberMisscheduled"]) -> MetaOapg.properties.numberMisscheduled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numberReady"]) -> MetaOapg.properties.numberReady: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collisionCount"]) -> MetaOapg.properties.collisionCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conditions"]) -> MetaOapg.properties.conditions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numberAvailable"]) -> MetaOapg.properties.numberAvailable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numberUnavailable"]) -> MetaOapg.properties.numberUnavailable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["observedGeneration"]) -> MetaOapg.properties.observedGeneration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updatedNumberScheduled"]) -> MetaOapg.properties.updatedNumberScheduled: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["currentNumberScheduled", "desiredNumberScheduled", "numberMisscheduled", "numberReady", "collisionCount", "conditions", "numberAvailable", "numberUnavailable", "observedGeneration", "updatedNumberScheduled", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currentNumberScheduled"]) -> MetaOapg.properties.currentNumberScheduled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["desiredNumberScheduled"]) -> MetaOapg.properties.desiredNumberScheduled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numberMisscheduled"]) -> MetaOapg.properties.numberMisscheduled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numberReady"]) -> MetaOapg.properties.numberReady: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collisionCount"]) -> typing.Union[MetaOapg.properties.collisionCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conditions"]) -> typing.Union[MetaOapg.properties.conditions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numberAvailable"]) -> typing.Union[MetaOapg.properties.numberAvailable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numberUnavailable"]) -> typing.Union[MetaOapg.properties.numberUnavailable, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["observedGeneration"]) -> typing.Union[MetaOapg.properties.observedGeneration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updatedNumberScheduled"]) -> typing.Union[MetaOapg.properties.updatedNumberScheduled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["currentNumberScheduled", "desiredNumberScheduled", "numberMisscheduled", "numberReady", "collisionCount", "conditions", "numberAvailable", "numberUnavailable", "observedGeneration", "updatedNumberScheduled", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        numberMisscheduled: typing.Union[MetaOapg.properties.numberMisscheduled, decimal.Decimal, int, ],
        numberReady: typing.Union[MetaOapg.properties.numberReady, decimal.Decimal, int, ],
        currentNumberScheduled: typing.Union[MetaOapg.properties.currentNumberScheduled, decimal.Decimal, int, ],
        desiredNumberScheduled: typing.Union[MetaOapg.properties.desiredNumberScheduled, decimal.Decimal, int, ],
        collisionCount: typing.Union[MetaOapg.properties.collisionCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        conditions: typing.Union[MetaOapg.properties.conditions, list, tuple, schemas.Unset] = schemas.unset,
        numberAvailable: typing.Union[MetaOapg.properties.numberAvailable, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        numberUnavailable: typing.Union[MetaOapg.properties.numberUnavailable, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        observedGeneration: typing.Union[MetaOapg.properties.observedGeneration, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        updatedNumberScheduled: typing.Union[MetaOapg.properties.updatedNumberScheduled, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1DaemonSetStatus':
        return super().__new__(
            cls,
            *args,
            numberMisscheduled=numberMisscheduled,
            numberReady=numberReady,
            currentNumberScheduled=currentNumberScheduled,
            desiredNumberScheduled=desiredNumberScheduled,
            collisionCount=collisionCount,
            conditions=conditions,
            numberAvailable=numberAvailable,
            numberUnavailable=numberUnavailable,
            observedGeneration=observedGeneration,
            updatedNumberScheduled=updatedNumberScheduled,
            _configuration=_configuration,
            **kwargs,
        )

from client.model.v1_daemon_set_condition import V1DaemonSetCondition
