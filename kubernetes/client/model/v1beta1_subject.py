# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class V1beta1Subject(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.
    """


    class MetaOapg:
        required = {
            "kind",
        }
        
        class properties:
            kind = schemas.StrSchema
        
            @staticmethod
            def group() -> typing.Type['V1beta1GroupSubject']:
                return V1beta1GroupSubject
        
            @staticmethod
            def serviceAccount() -> typing.Type['V1beta1ServiceAccountSubject']:
                return V1beta1ServiceAccountSubject
        
            @staticmethod
            def user() -> typing.Type['V1beta1UserSubject']:
                return V1beta1UserSubject
            __annotations__ = {
                "kind": kind,
                "group": group,
                "serviceAccount": serviceAccount,
                "user": user,
            }
    
    kind: MetaOapg.properties.kind
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kind"]) -> MetaOapg.properties.kind: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group"]) -> 'V1beta1GroupSubject': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serviceAccount"]) -> 'V1beta1ServiceAccountSubject': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'V1beta1UserSubject': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["kind", "group", "serviceAccount", "user", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kind"]) -> MetaOapg.properties.kind: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group"]) -> typing.Union['V1beta1GroupSubject', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serviceAccount"]) -> typing.Union['V1beta1ServiceAccountSubject', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union['V1beta1UserSubject', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["kind", "group", "serviceAccount", "user", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        kind: typing.Union[MetaOapg.properties.kind, str, ],
        group: typing.Union['V1beta1GroupSubject', schemas.Unset] = schemas.unset,
        serviceAccount: typing.Union['V1beta1ServiceAccountSubject', schemas.Unset] = schemas.unset,
        user: typing.Union['V1beta1UserSubject', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1beta1Subject':
        return super().__new__(
            cls,
            *args,
            kind=kind,
            group=group,
            serviceAccount=serviceAccount,
            user=user,
            _configuration=_configuration,
            **kwargs,
        )

from kubernetes.client.model.v1beta1_group_subject import V1beta1GroupSubject
from kubernetes.client.model.v1beta1_service_account_subject import V1beta1ServiceAccountSubject
from kubernetes.client.model.v1beta1_user_subject import V1beta1UserSubject
