# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from client import schemas  # noqa: F401


class V1Probe(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def _exec() -> typing.Type['V1ExecAction']:
                return V1ExecAction
            failureThreshold = schemas.Int32Schema
        
            @staticmethod
            def grpc() -> typing.Type['V1GRPCAction']:
                return V1GRPCAction
        
            @staticmethod
            def httpGet() -> typing.Type['V1HTTPGetAction']:
                return V1HTTPGetAction
            initialDelaySeconds = schemas.Int32Schema
            periodSeconds = schemas.Int32Schema
            successThreshold = schemas.Int32Schema
        
            @staticmethod
            def tcpSocket() -> typing.Type['V1TCPSocketAction']:
                return V1TCPSocketAction
            terminationGracePeriodSeconds = schemas.Int64Schema
            timeoutSeconds = schemas.Int32Schema
            __annotations__ = {
                "exec": _exec,
                "failureThreshold": failureThreshold,
                "grpc": grpc,
                "httpGet": httpGet,
                "initialDelaySeconds": initialDelaySeconds,
                "periodSeconds": periodSeconds,
                "successThreshold": successThreshold,
                "tcpSocket": tcpSocket,
                "terminationGracePeriodSeconds": terminationGracePeriodSeconds,
                "timeoutSeconds": timeoutSeconds,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exec"]) -> 'V1ExecAction': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["failureThreshold"]) -> MetaOapg.properties.failureThreshold: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grpc"]) -> 'V1GRPCAction': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["httpGet"]) -> 'V1HTTPGetAction': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["initialDelaySeconds"]) -> MetaOapg.properties.initialDelaySeconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["periodSeconds"]) -> MetaOapg.properties.periodSeconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["successThreshold"]) -> MetaOapg.properties.successThreshold: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tcpSocket"]) -> 'V1TCPSocketAction': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["terminationGracePeriodSeconds"]) -> MetaOapg.properties.terminationGracePeriodSeconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeoutSeconds"]) -> MetaOapg.properties.timeoutSeconds: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["exec", "failureThreshold", "grpc", "httpGet", "initialDelaySeconds", "periodSeconds", "successThreshold", "tcpSocket", "terminationGracePeriodSeconds", "timeoutSeconds", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exec"]) -> typing.Union['V1ExecAction', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["failureThreshold"]) -> typing.Union[MetaOapg.properties.failureThreshold, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grpc"]) -> typing.Union['V1GRPCAction', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["httpGet"]) -> typing.Union['V1HTTPGetAction', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["initialDelaySeconds"]) -> typing.Union[MetaOapg.properties.initialDelaySeconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["periodSeconds"]) -> typing.Union[MetaOapg.properties.periodSeconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["successThreshold"]) -> typing.Union[MetaOapg.properties.successThreshold, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tcpSocket"]) -> typing.Union['V1TCPSocketAction', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["terminationGracePeriodSeconds"]) -> typing.Union[MetaOapg.properties.terminationGracePeriodSeconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeoutSeconds"]) -> typing.Union[MetaOapg.properties.timeoutSeconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["exec", "failureThreshold", "grpc", "httpGet", "initialDelaySeconds", "periodSeconds", "successThreshold", "tcpSocket", "terminationGracePeriodSeconds", "timeoutSeconds", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        failureThreshold: typing.Union[MetaOapg.properties.failureThreshold, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        grpc: typing.Union['V1GRPCAction', schemas.Unset] = schemas.unset,
        httpGet: typing.Union['V1HTTPGetAction', schemas.Unset] = schemas.unset,
        initialDelaySeconds: typing.Union[MetaOapg.properties.initialDelaySeconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        periodSeconds: typing.Union[MetaOapg.properties.periodSeconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        successThreshold: typing.Union[MetaOapg.properties.successThreshold, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        tcpSocket: typing.Union['V1TCPSocketAction', schemas.Unset] = schemas.unset,
        terminationGracePeriodSeconds: typing.Union[MetaOapg.properties.terminationGracePeriodSeconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        timeoutSeconds: typing.Union[MetaOapg.properties.timeoutSeconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1Probe':
        return super().__new__(
            cls,
            *args,
            failureThreshold=failureThreshold,
            grpc=grpc,
            httpGet=httpGet,
            initialDelaySeconds=initialDelaySeconds,
            periodSeconds=periodSeconds,
            successThreshold=successThreshold,
            tcpSocket=tcpSocket,
            terminationGracePeriodSeconds=terminationGracePeriodSeconds,
            timeoutSeconds=timeoutSeconds,
            _configuration=_configuration,
            **kwargs,
        )

from client.model.v1_exec_action import V1ExecAction
from client.model.v1_grpc_action import V1GRPCAction
from client.model.v1_http_get_action import V1HTTPGetAction
from client.model.v1_tcp_socket_action import V1TCPSocketAction
