# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class V1SecurityContext(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
    """


    class MetaOapg:
        
        class properties:
            allowPrivilegeEscalation = schemas.BoolSchema
        
            @staticmethod
            def capabilities() -> typing.Type['V1Capabilities']:
                return V1Capabilities
            privileged = schemas.BoolSchema
            procMount = schemas.StrSchema
            readOnlyRootFilesystem = schemas.BoolSchema
            runAsGroup = schemas.Int64Schema
            runAsNonRoot = schemas.BoolSchema
            runAsUser = schemas.Int64Schema
        
            @staticmethod
            def seLinuxOptions() -> typing.Type['V1SELinuxOptions']:
                return V1SELinuxOptions
        
            @staticmethod
            def seccompProfile() -> typing.Type['V1SeccompProfile']:
                return V1SeccompProfile
        
            @staticmethod
            def windowsOptions() -> typing.Type['V1WindowsSecurityContextOptions']:
                return V1WindowsSecurityContextOptions
            __annotations__ = {
                "allowPrivilegeEscalation": allowPrivilegeEscalation,
                "capabilities": capabilities,
                "privileged": privileged,
                "procMount": procMount,
                "readOnlyRootFilesystem": readOnlyRootFilesystem,
                "runAsGroup": runAsGroup,
                "runAsNonRoot": runAsNonRoot,
                "runAsUser": runAsUser,
                "seLinuxOptions": seLinuxOptions,
                "seccompProfile": seccompProfile,
                "windowsOptions": windowsOptions,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowPrivilegeEscalation"]) -> MetaOapg.properties.allowPrivilegeEscalation: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capabilities"]) -> 'V1Capabilities': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privileged"]) -> MetaOapg.properties.privileged: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["procMount"]) -> MetaOapg.properties.procMount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["readOnlyRootFilesystem"]) -> MetaOapg.properties.readOnlyRootFilesystem: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["runAsGroup"]) -> MetaOapg.properties.runAsGroup: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["runAsNonRoot"]) -> MetaOapg.properties.runAsNonRoot: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["runAsUser"]) -> MetaOapg.properties.runAsUser: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seLinuxOptions"]) -> 'V1SELinuxOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seccompProfile"]) -> 'V1SeccompProfile': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["windowsOptions"]) -> 'V1WindowsSecurityContextOptions': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["allowPrivilegeEscalation", "capabilities", "privileged", "procMount", "readOnlyRootFilesystem", "runAsGroup", "runAsNonRoot", "runAsUser", "seLinuxOptions", "seccompProfile", "windowsOptions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowPrivilegeEscalation"]) -> typing.Union[MetaOapg.properties.allowPrivilegeEscalation, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capabilities"]) -> typing.Union['V1Capabilities', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privileged"]) -> typing.Union[MetaOapg.properties.privileged, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["procMount"]) -> typing.Union[MetaOapg.properties.procMount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["readOnlyRootFilesystem"]) -> typing.Union[MetaOapg.properties.readOnlyRootFilesystem, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["runAsGroup"]) -> typing.Union[MetaOapg.properties.runAsGroup, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["runAsNonRoot"]) -> typing.Union[MetaOapg.properties.runAsNonRoot, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["runAsUser"]) -> typing.Union[MetaOapg.properties.runAsUser, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seLinuxOptions"]) -> typing.Union['V1SELinuxOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seccompProfile"]) -> typing.Union['V1SeccompProfile', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["windowsOptions"]) -> typing.Union['V1WindowsSecurityContextOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["allowPrivilegeEscalation", "capabilities", "privileged", "procMount", "readOnlyRootFilesystem", "runAsGroup", "runAsNonRoot", "runAsUser", "seLinuxOptions", "seccompProfile", "windowsOptions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        allowPrivilegeEscalation: typing.Union[MetaOapg.properties.allowPrivilegeEscalation, bool, schemas.Unset] = schemas.unset,
        capabilities: typing.Union['V1Capabilities', schemas.Unset] = schemas.unset,
        privileged: typing.Union[MetaOapg.properties.privileged, bool, schemas.Unset] = schemas.unset,
        procMount: typing.Union[MetaOapg.properties.procMount, str, schemas.Unset] = schemas.unset,
        readOnlyRootFilesystem: typing.Union[MetaOapg.properties.readOnlyRootFilesystem, bool, schemas.Unset] = schemas.unset,
        runAsGroup: typing.Union[MetaOapg.properties.runAsGroup, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        runAsNonRoot: typing.Union[MetaOapg.properties.runAsNonRoot, bool, schemas.Unset] = schemas.unset,
        runAsUser: typing.Union[MetaOapg.properties.runAsUser, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        seLinuxOptions: typing.Union['V1SELinuxOptions', schemas.Unset] = schemas.unset,
        seccompProfile: typing.Union['V1SeccompProfile', schemas.Unset] = schemas.unset,
        windowsOptions: typing.Union['V1WindowsSecurityContextOptions', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1SecurityContext':
        return super().__new__(
            cls,
            *args,
            allowPrivilegeEscalation=allowPrivilegeEscalation,
            capabilities=capabilities,
            privileged=privileged,
            procMount=procMount,
            readOnlyRootFilesystem=readOnlyRootFilesystem,
            runAsGroup=runAsGroup,
            runAsNonRoot=runAsNonRoot,
            runAsUser=runAsUser,
            seLinuxOptions=seLinuxOptions,
            seccompProfile=seccompProfile,
            windowsOptions=windowsOptions,
            _configuration=_configuration,
            **kwargs,
        )

from kubernetes.client.model.v1_capabilities import V1Capabilities
from kubernetes.client.model.v1_se_linux_options import V1SELinuxOptions
from kubernetes.client.model.v1_seccomp_profile import V1SeccompProfile
from kubernetes.client.model.v1_windows_security_context_options import V1WindowsSecurityContextOptions
