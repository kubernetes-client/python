# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class V1CSIDriverSpec(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    CSIDriverSpec is the specification of a CSIDriver.
    """


    class MetaOapg:
        
        class properties:
            attachRequired = schemas.BoolSchema
            fsGroupPolicy = schemas.StrSchema
            podInfoOnMount = schemas.BoolSchema
            requiresRepublish = schemas.BoolSchema
            seLinuxMount = schemas.BoolSchema
            storageCapacity = schemas.BoolSchema
            
            
            class tokenRequests(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['StorageV1TokenRequest']:
                        return StorageV1TokenRequest
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['StorageV1TokenRequest'], typing.List['StorageV1TokenRequest']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tokenRequests':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'StorageV1TokenRequest':
                    return super().__getitem__(i)
            
            
            class volumeLifecycleModes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'volumeLifecycleModes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "attachRequired": attachRequired,
                "fsGroupPolicy": fsGroupPolicy,
                "podInfoOnMount": podInfoOnMount,
                "requiresRepublish": requiresRepublish,
                "seLinuxMount": seLinuxMount,
                "storageCapacity": storageCapacity,
                "tokenRequests": tokenRequests,
                "volumeLifecycleModes": volumeLifecycleModes,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attachRequired"]) -> MetaOapg.properties.attachRequired: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fsGroupPolicy"]) -> MetaOapg.properties.fsGroupPolicy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["podInfoOnMount"]) -> MetaOapg.properties.podInfoOnMount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requiresRepublish"]) -> MetaOapg.properties.requiresRepublish: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seLinuxMount"]) -> MetaOapg.properties.seLinuxMount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["storageCapacity"]) -> MetaOapg.properties.storageCapacity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tokenRequests"]) -> MetaOapg.properties.tokenRequests: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volumeLifecycleModes"]) -> MetaOapg.properties.volumeLifecycleModes: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["attachRequired", "fsGroupPolicy", "podInfoOnMount", "requiresRepublish", "seLinuxMount", "storageCapacity", "tokenRequests", "volumeLifecycleModes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attachRequired"]) -> typing.Union[MetaOapg.properties.attachRequired, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fsGroupPolicy"]) -> typing.Union[MetaOapg.properties.fsGroupPolicy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["podInfoOnMount"]) -> typing.Union[MetaOapg.properties.podInfoOnMount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requiresRepublish"]) -> typing.Union[MetaOapg.properties.requiresRepublish, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seLinuxMount"]) -> typing.Union[MetaOapg.properties.seLinuxMount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["storageCapacity"]) -> typing.Union[MetaOapg.properties.storageCapacity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tokenRequests"]) -> typing.Union[MetaOapg.properties.tokenRequests, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volumeLifecycleModes"]) -> typing.Union[MetaOapg.properties.volumeLifecycleModes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attachRequired", "fsGroupPolicy", "podInfoOnMount", "requiresRepublish", "seLinuxMount", "storageCapacity", "tokenRequests", "volumeLifecycleModes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        attachRequired: typing.Union[MetaOapg.properties.attachRequired, bool, schemas.Unset] = schemas.unset,
        fsGroupPolicy: typing.Union[MetaOapg.properties.fsGroupPolicy, str, schemas.Unset] = schemas.unset,
        podInfoOnMount: typing.Union[MetaOapg.properties.podInfoOnMount, bool, schemas.Unset] = schemas.unset,
        requiresRepublish: typing.Union[MetaOapg.properties.requiresRepublish, bool, schemas.Unset] = schemas.unset,
        seLinuxMount: typing.Union[MetaOapg.properties.seLinuxMount, bool, schemas.Unset] = schemas.unset,
        storageCapacity: typing.Union[MetaOapg.properties.storageCapacity, bool, schemas.Unset] = schemas.unset,
        tokenRequests: typing.Union[MetaOapg.properties.tokenRequests, list, tuple, schemas.Unset] = schemas.unset,
        volumeLifecycleModes: typing.Union[MetaOapg.properties.volumeLifecycleModes, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1CSIDriverSpec':
        return super().__new__(
            cls,
            *args,
            attachRequired=attachRequired,
            fsGroupPolicy=fsGroupPolicy,
            podInfoOnMount=podInfoOnMount,
            requiresRepublish=requiresRepublish,
            seLinuxMount=seLinuxMount,
            storageCapacity=storageCapacity,
            tokenRequests=tokenRequests,
            volumeLifecycleModes=volumeLifecycleModes,
            _configuration=_configuration,
            **kwargs,
        )

from kubernetes.client.model.storage_v1_token_request import StorageV1TokenRequest
