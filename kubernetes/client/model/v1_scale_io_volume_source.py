# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class V1ScaleIOVolumeSource(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ScaleIOVolumeSource represents a persistent ScaleIO volume
    """


    class MetaOapg:
        required = {
            "system",
            "secretRef",
            "gateway",
        }
        
        class properties:
            gateway = schemas.StrSchema
        
            @staticmethod
            def secretRef() -> typing.Type['V1LocalObjectReference']:
                return V1LocalObjectReference
            system = schemas.StrSchema
            fsType = schemas.StrSchema
            protectionDomain = schemas.StrSchema
            readOnly = schemas.BoolSchema
            sslEnabled = schemas.BoolSchema
            storageMode = schemas.StrSchema
            storagePool = schemas.StrSchema
            volumeName = schemas.StrSchema
            __annotations__ = {
                "gateway": gateway,
                "secretRef": secretRef,
                "system": system,
                "fsType": fsType,
                "protectionDomain": protectionDomain,
                "readOnly": readOnly,
                "sslEnabled": sslEnabled,
                "storageMode": storageMode,
                "storagePool": storagePool,
                "volumeName": volumeName,
            }
    
    system: MetaOapg.properties.system
    secretRef: 'V1LocalObjectReference'
    gateway: MetaOapg.properties.gateway
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gateway"]) -> MetaOapg.properties.gateway: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["secretRef"]) -> 'V1LocalObjectReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["system"]) -> MetaOapg.properties.system: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fsType"]) -> MetaOapg.properties.fsType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["protectionDomain"]) -> MetaOapg.properties.protectionDomain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["readOnly"]) -> MetaOapg.properties.readOnly: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sslEnabled"]) -> MetaOapg.properties.sslEnabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["storageMode"]) -> MetaOapg.properties.storageMode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["storagePool"]) -> MetaOapg.properties.storagePool: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volumeName"]) -> MetaOapg.properties.volumeName: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["gateway", "secretRef", "system", "fsType", "protectionDomain", "readOnly", "sslEnabled", "storageMode", "storagePool", "volumeName", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gateway"]) -> MetaOapg.properties.gateway: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["secretRef"]) -> 'V1LocalObjectReference': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["system"]) -> MetaOapg.properties.system: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fsType"]) -> typing.Union[MetaOapg.properties.fsType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["protectionDomain"]) -> typing.Union[MetaOapg.properties.protectionDomain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["readOnly"]) -> typing.Union[MetaOapg.properties.readOnly, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sslEnabled"]) -> typing.Union[MetaOapg.properties.sslEnabled, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["storageMode"]) -> typing.Union[MetaOapg.properties.storageMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["storagePool"]) -> typing.Union[MetaOapg.properties.storagePool, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volumeName"]) -> typing.Union[MetaOapg.properties.volumeName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["gateway", "secretRef", "system", "fsType", "protectionDomain", "readOnly", "sslEnabled", "storageMode", "storagePool", "volumeName", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        system: typing.Union[MetaOapg.properties.system, str, ],
        secretRef: 'V1LocalObjectReference',
        gateway: typing.Union[MetaOapg.properties.gateway, str, ],
        fsType: typing.Union[MetaOapg.properties.fsType, str, schemas.Unset] = schemas.unset,
        protectionDomain: typing.Union[MetaOapg.properties.protectionDomain, str, schemas.Unset] = schemas.unset,
        readOnly: typing.Union[MetaOapg.properties.readOnly, bool, schemas.Unset] = schemas.unset,
        sslEnabled: typing.Union[MetaOapg.properties.sslEnabled, bool, schemas.Unset] = schemas.unset,
        storageMode: typing.Union[MetaOapg.properties.storageMode, str, schemas.Unset] = schemas.unset,
        storagePool: typing.Union[MetaOapg.properties.storagePool, str, schemas.Unset] = schemas.unset,
        volumeName: typing.Union[MetaOapg.properties.volumeName, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1ScaleIOVolumeSource':
        return super().__new__(
            cls,
            *args,
            system=system,
            secretRef=secretRef,
            gateway=gateway,
            fsType=fsType,
            protectionDomain=protectionDomain,
            readOnly=readOnly,
            sslEnabled=sslEnabled,
            storageMode=storageMode,
            storagePool=storagePool,
            volumeName=volumeName,
            _configuration=_configuration,
            **kwargs,
        )

from kubernetes.client.model.v1_local_object_reference import V1LocalObjectReference
