"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.23
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from kubernetes.client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from kubernetes.client.exceptions import ApiAttributeError


def lazy_import():
    from kubernetes.client.model.v1_affinity import V1Affinity
    from kubernetes.client.model.v1_container import V1Container
    from kubernetes.client.model.v1_ephemeral_container import V1EphemeralContainer
    from kubernetes.client.model.v1_host_alias import V1HostAlias
    from kubernetes.client.model.v1_local_object_reference import V1LocalObjectReference
    from kubernetes.client.model.v1_pod_dns_config import V1PodDNSConfig
    from kubernetes.client.model.v1_pod_os import V1PodOS
    from kubernetes.client.model.v1_pod_readiness_gate import V1PodReadinessGate
    from kubernetes.client.model.v1_pod_security_context import V1PodSecurityContext
    from kubernetes.client.model.v1_toleration import V1Toleration
    from kubernetes.client.model.v1_topology_spread_constraint import V1TopologySpreadConstraint
    from kubernetes.client.model.v1_volume import V1Volume
    globals()['V1Affinity'] = V1Affinity
    globals()['V1Container'] = V1Container
    globals()['V1EphemeralContainer'] = V1EphemeralContainer
    globals()['V1HostAlias'] = V1HostAlias
    globals()['V1LocalObjectReference'] = V1LocalObjectReference
    globals()['V1PodDNSConfig'] = V1PodDNSConfig
    globals()['V1PodOS'] = V1PodOS
    globals()['V1PodReadinessGate'] = V1PodReadinessGate
    globals()['V1PodSecurityContext'] = V1PodSecurityContext
    globals()['V1Toleration'] = V1Toleration
    globals()['V1TopologySpreadConstraint'] = V1TopologySpreadConstraint
    globals()['V1Volume'] = V1Volume


class V1PodSpec(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('dns_policy',): {
            'CLUSTERFIRST': "ClusterFirst",
            'CLUSTERFIRSTWITHHOSTNET': "ClusterFirstWithHostNet",
            'DEFAULT': "Default",
            'NONE': "None",
        },
        ('restart_policy',): {
            'ALWAYS': "Always",
            'NEVER': "Never",
            'ONFAILURE': "OnFailure",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'containers': ([V1Container],),  # noqa: E501
            'active_deadline_seconds': (int,),  # noqa: E501
            'affinity': (V1Affinity,),  # noqa: E501
            'automount_service_account_token': (bool,),  # noqa: E501
            'dns_config': (V1PodDNSConfig,),  # noqa: E501
            'dns_policy': (str,),  # noqa: E501
            'enable_service_links': (bool,),  # noqa: E501
            'ephemeral_containers': ([V1EphemeralContainer],),  # noqa: E501
            'host_aliases': ([V1HostAlias],),  # noqa: E501
            'host_ipc': (bool,),  # noqa: E501
            'host_network': (bool,),  # noqa: E501
            'host_pid': (bool,),  # noqa: E501
            'hostname': (str,),  # noqa: E501
            'image_pull_secrets': ([V1LocalObjectReference],),  # noqa: E501
            'init_containers': ([V1Container],),  # noqa: E501
            'node_name': (str,),  # noqa: E501
            'node_selector': ({str: (str,)},),  # noqa: E501
            'os': (V1PodOS,),  # noqa: E501
            'overhead': ({str: (str,)},),  # noqa: E501
            'preemption_policy': (str,),  # noqa: E501
            'priority': (int,),  # noqa: E501
            'priority_class_name': (str,),  # noqa: E501
            'readiness_gates': ([V1PodReadinessGate],),  # noqa: E501
            'restart_policy': (str,),  # noqa: E501
            'runtime_class_name': (str,),  # noqa: E501
            'scheduler_name': (str,),  # noqa: E501
            'security_context': (V1PodSecurityContext,),  # noqa: E501
            'service_account': (str,),  # noqa: E501
            'service_account_name': (str,),  # noqa: E501
            'set_hostname_as_fqdn': (bool,),  # noqa: E501
            'share_process_namespace': (bool,),  # noqa: E501
            'subdomain': (str,),  # noqa: E501
            'termination_grace_period_seconds': (int,),  # noqa: E501
            'tolerations': ([V1Toleration],),  # noqa: E501
            'topology_spread_constraints': ([V1TopologySpreadConstraint],),  # noqa: E501
            'volumes': ([V1Volume],),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'containers': 'containers',  # noqa: E501
        'active_deadline_seconds': 'activeDeadlineSeconds',  # noqa: E501
        'affinity': 'affinity',  # noqa: E501
        'automount_service_account_token': 'automountServiceAccountToken',  # noqa: E501
        'dns_config': 'dnsConfig',  # noqa: E501
        'dns_policy': 'dnsPolicy',  # noqa: E501
        'enable_service_links': 'enableServiceLinks',  # noqa: E501
        'ephemeral_containers': 'ephemeralContainers',  # noqa: E501
        'host_aliases': 'hostAliases',  # noqa: E501
        'host_ipc': 'hostIPC',  # noqa: E501
        'host_network': 'hostNetwork',  # noqa: E501
        'host_pid': 'hostPID',  # noqa: E501
        'hostname': 'hostname',  # noqa: E501
        'image_pull_secrets': 'imagePullSecrets',  # noqa: E501
        'init_containers': 'initContainers',  # noqa: E501
        'node_name': 'nodeName',  # noqa: E501
        'node_selector': 'nodeSelector',  # noqa: E501
        'os': 'os',  # noqa: E501
        'overhead': 'overhead',  # noqa: E501
        'preemption_policy': 'preemptionPolicy',  # noqa: E501
        'priority': 'priority',  # noqa: E501
        'priority_class_name': 'priorityClassName',  # noqa: E501
        'readiness_gates': 'readinessGates',  # noqa: E501
        'restart_policy': 'restartPolicy',  # noqa: E501
        'runtime_class_name': 'runtimeClassName',  # noqa: E501
        'scheduler_name': 'schedulerName',  # noqa: E501
        'security_context': 'securityContext',  # noqa: E501
        'service_account': 'serviceAccount',  # noqa: E501
        'service_account_name': 'serviceAccountName',  # noqa: E501
        'set_hostname_as_fqdn': 'setHostnameAsFQDN',  # noqa: E501
        'share_process_namespace': 'shareProcessNamespace',  # noqa: E501
        'subdomain': 'subdomain',  # noqa: E501
        'termination_grace_period_seconds': 'terminationGracePeriodSeconds',  # noqa: E501
        'tolerations': 'tolerations',  # noqa: E501
        'topology_spread_constraints': 'topologySpreadConstraints',  # noqa: E501
        'volumes': 'volumes',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, containers, *args, **kwargs):  # noqa: E501
        """V1PodSpec - a model defined in OpenAPI

        Args:
            containers ([V1Container]): List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            active_deadline_seconds (int): Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.. [optional]  # noqa: E501
            affinity (V1Affinity): [optional]  # noqa: E501
            automount_service_account_token (bool): AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.. [optional]  # noqa: E501
            dns_config (V1PodDNSConfig): [optional]  # noqa: E501
            dns_policy (str): Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.  Possible enum values:  - `\"ClusterFirst\"` indicates that the pod should use cluster DNS first unless hostNetwork is true, if it is available, then fall back on the default (as determined by kubelet) DNS settings.  - `\"ClusterFirstWithHostNet\"` indicates that the pod should use cluster DNS first, if it is available, then fall back on the default (as determined by kubelet) DNS settings.  - `\"Default\"` indicates that the pod should use the default (as determined by kubelet) DNS settings.  - `\"None\"` indicates that the pod should use empty DNS settings. DNS parameters such as nameservers and search paths should be defined via DNSConfig.. [optional]  # noqa: E501
            enable_service_links (bool): EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.. [optional]  # noqa: E501
            ephemeral_containers ([V1EphemeralContainer]): List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is beta-level and available on clusters that haven't disabled the EphemeralContainers feature gate.. [optional]  # noqa: E501
            host_aliases ([V1HostAlias]): HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.. [optional]  # noqa: E501
            host_ipc (bool): Use the host's ipc namespace. Optional: Default to false.. [optional]  # noqa: E501
            host_network (bool): Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.. [optional]  # noqa: E501
            host_pid (bool): Use the host's pid namespace. Optional: Default to false.. [optional]  # noqa: E501
            hostname (str): Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.. [optional]  # noqa: E501
            image_pull_secrets ([V1LocalObjectReference]): ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod. [optional]  # noqa: E501
            init_containers ([V1Container]): List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/. [optional]  # noqa: E501
            node_name (str): NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.. [optional]  # noqa: E501
            node_selector ({str: (str,)}): NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/. [optional]  # noqa: E501
            os (V1PodOS): [optional]  # noqa: E501
            overhead ({str: (str,)}): Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md This field is beta-level as of Kubernetes v1.18, and is only honored by servers that enable the PodOverhead feature.. [optional]  # noqa: E501
            preemption_policy (str): PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is beta-level, gated by the NonPreemptingPriority feature-gate.. [optional]  # noqa: E501
            priority (int): The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.. [optional]  # noqa: E501
            priority_class_name (str): If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.. [optional]  # noqa: E501
            readiness_gates ([V1PodReadinessGate]): If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates. [optional]  # noqa: E501
            restart_policy (str): Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy  Possible enum values:  - `\"Always\"`  - `\"Never\"`  - `\"OnFailure\"`. [optional]  # noqa: E501
            runtime_class_name (str): RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class This is a beta feature as of Kubernetes v1.14.. [optional]  # noqa: E501
            scheduler_name (str): If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.. [optional]  # noqa: E501
            security_context (V1PodSecurityContext): [optional]  # noqa: E501
            service_account (str): DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.. [optional]  # noqa: E501
            service_account_name (str): ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/. [optional]  # noqa: E501
            set_hostname_as_fqdn (bool): If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.. [optional]  # noqa: E501
            share_process_namespace (bool): Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.. [optional]  # noqa: E501
            subdomain (str): If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.. [optional]  # noqa: E501
            termination_grace_period_seconds (int): Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.. [optional]  # noqa: E501
            tolerations ([V1Toleration]): If specified, the pod's tolerations.. [optional]  # noqa: E501
            topology_spread_constraints ([V1TopologySpreadConstraint]): TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.. [optional]  # noqa: E501
            volumes ([V1Volume]): List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.containers = containers
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, containers, *args, **kwargs):  # noqa: E501
        """V1PodSpec - a model defined in OpenAPI

        Args:
            containers ([V1Container]): List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            active_deadline_seconds (int): Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.. [optional]  # noqa: E501
            affinity (V1Affinity): [optional]  # noqa: E501
            automount_service_account_token (bool): AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.. [optional]  # noqa: E501
            dns_config (V1PodDNSConfig): [optional]  # noqa: E501
            dns_policy (str): Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.  Possible enum values:  - `\"ClusterFirst\"` indicates that the pod should use cluster DNS first unless hostNetwork is true, if it is available, then fall back on the default (as determined by kubelet) DNS settings.  - `\"ClusterFirstWithHostNet\"` indicates that the pod should use cluster DNS first, if it is available, then fall back on the default (as determined by kubelet) DNS settings.  - `\"Default\"` indicates that the pod should use the default (as determined by kubelet) DNS settings.  - `\"None\"` indicates that the pod should use empty DNS settings. DNS parameters such as nameservers and search paths should be defined via DNSConfig.. [optional]  # noqa: E501
            enable_service_links (bool): EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.. [optional]  # noqa: E501
            ephemeral_containers ([V1EphemeralContainer]): List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is beta-level and available on clusters that haven't disabled the EphemeralContainers feature gate.. [optional]  # noqa: E501
            host_aliases ([V1HostAlias]): HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.. [optional]  # noqa: E501
            host_ipc (bool): Use the host's ipc namespace. Optional: Default to false.. [optional]  # noqa: E501
            host_network (bool): Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.. [optional]  # noqa: E501
            host_pid (bool): Use the host's pid namespace. Optional: Default to false.. [optional]  # noqa: E501
            hostname (str): Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.. [optional]  # noqa: E501
            image_pull_secrets ([V1LocalObjectReference]): ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this PodSpec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod. [optional]  # noqa: E501
            init_containers ([V1Container]): List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/. [optional]  # noqa: E501
            node_name (str): NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.. [optional]  # noqa: E501
            node_selector ({str: (str,)}): NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/. [optional]  # noqa: E501
            os (V1PodOS): [optional]  # noqa: E501
            overhead ({str: (str,)}): Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the PodSpec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/688-pod-overhead/README.md This field is beta-level as of Kubernetes v1.18, and is only honored by servers that enable the PodOverhead feature.. [optional]  # noqa: E501
            preemption_policy (str): PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is beta-level, gated by the NonPreemptingPriority feature-gate.. [optional]  # noqa: E501
            priority (int): The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.. [optional]  # noqa: E501
            priority_class_name (str): If specified, indicates the pod's priority. \"system-node-critical\" and \"system-cluster-critical\" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.. [optional]  # noqa: E501
            readiness_gates ([V1PodReadinessGate]): If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to \"True\" More info: https://git.k8s.io/enhancements/keps/sig-network/580-pod-readiness-gates. [optional]  # noqa: E501
            restart_policy (str): Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy  Possible enum values:  - `\"Always\"`  - `\"Never\"`  - `\"OnFailure\"`. [optional]  # noqa: E501
            runtime_class_name (str): RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the \"legacy\" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/585-runtime-class This is a beta feature as of Kubernetes v1.14.. [optional]  # noqa: E501
            scheduler_name (str): If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.. [optional]  # noqa: E501
            security_context (V1PodSecurityContext): [optional]  # noqa: E501
            service_account (str): DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.. [optional]  # noqa: E501
            service_account_name (str): ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/. [optional]  # noqa: E501
            set_hostname_as_fqdn (bool): If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.. [optional]  # noqa: E501
            share_process_namespace (bool): Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.. [optional]  # noqa: E501
            subdomain (str): If specified, the fully qualified Pod hostname will be \"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\". If not specified, the pod will not have a domainname at all.. [optional]  # noqa: E501
            termination_grace_period_seconds (int): Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.. [optional]  # noqa: E501
            tolerations ([V1Toleration]): If specified, the pod's tolerations.. [optional]  # noqa: E501
            topology_spread_constraints ([V1TopologySpreadConstraint]): TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.. [optional]  # noqa: E501
            volumes ([V1Volume]): List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.containers = containers
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
