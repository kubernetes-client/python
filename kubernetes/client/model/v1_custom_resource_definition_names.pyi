# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from client import schemas  # noqa: F401


class V1CustomResourceDefinitionNames(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    CustomResourceDefinitionNames indicates the names to serve this CustomResourceDefinition
    """


    class MetaOapg:
        required = {
            "plural",
            "kind",
        }
        
        class properties:
            kind = schemas.StrSchema
            plural = schemas.StrSchema
            
            
            class categories(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'categories':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            listKind = schemas.StrSchema
            
            
            class shortNames(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'shortNames':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            singular = schemas.StrSchema
            __annotations__ = {
                "kind": kind,
                "plural": plural,
                "categories": categories,
                "listKind": listKind,
                "shortNames": shortNames,
                "singular": singular,
            }
    
    plural: MetaOapg.properties.plural
    kind: MetaOapg.properties.kind
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kind"]) -> MetaOapg.properties.kind: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["plural"]) -> MetaOapg.properties.plural: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["categories"]) -> MetaOapg.properties.categories: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["listKind"]) -> MetaOapg.properties.listKind: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shortNames"]) -> MetaOapg.properties.shortNames: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["singular"]) -> MetaOapg.properties.singular: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["kind", "plural", "categories", "listKind", "shortNames", "singular", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kind"]) -> MetaOapg.properties.kind: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["plural"]) -> MetaOapg.properties.plural: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["categories"]) -> typing.Union[MetaOapg.properties.categories, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["listKind"]) -> typing.Union[MetaOapg.properties.listKind, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shortNames"]) -> typing.Union[MetaOapg.properties.shortNames, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["singular"]) -> typing.Union[MetaOapg.properties.singular, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["kind", "plural", "categories", "listKind", "shortNames", "singular", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        plural: typing.Union[MetaOapg.properties.plural, str, ],
        kind: typing.Union[MetaOapg.properties.kind, str, ],
        categories: typing.Union[MetaOapg.properties.categories, list, tuple, schemas.Unset] = schemas.unset,
        listKind: typing.Union[MetaOapg.properties.listKind, str, schemas.Unset] = schemas.unset,
        shortNames: typing.Union[MetaOapg.properties.shortNames, list, tuple, schemas.Unset] = schemas.unset,
        singular: typing.Union[MetaOapg.properties.singular, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1CustomResourceDefinitionNames':
        return super().__new__(
            cls,
            *args,
            plural=plural,
            kind=kind,
            categories=categories,
            listKind=listKind,
            shortNames=shortNames,
            singular=singular,
            _configuration=_configuration,
            **kwargs,
        )
