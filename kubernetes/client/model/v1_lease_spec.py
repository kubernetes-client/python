# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class V1LeaseSpec(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    LeaseSpec is a specification of a Lease.
    """


    class MetaOapg:
        
        class properties:
            acquireTime = schemas.DateTimeSchema
            holderIdentity = schemas.StrSchema
            leaseDurationSeconds = schemas.Int32Schema
            leaseTransitions = schemas.Int32Schema
            renewTime = schemas.DateTimeSchema
            __annotations__ = {
                "acquireTime": acquireTime,
                "holderIdentity": holderIdentity,
                "leaseDurationSeconds": leaseDurationSeconds,
                "leaseTransitions": leaseTransitions,
                "renewTime": renewTime,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["acquireTime"]) -> MetaOapg.properties.acquireTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["holderIdentity"]) -> MetaOapg.properties.holderIdentity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leaseDurationSeconds"]) -> MetaOapg.properties.leaseDurationSeconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["leaseTransitions"]) -> MetaOapg.properties.leaseTransitions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["renewTime"]) -> MetaOapg.properties.renewTime: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["acquireTime", "holderIdentity", "leaseDurationSeconds", "leaseTransitions", "renewTime", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["acquireTime"]) -> typing.Union[MetaOapg.properties.acquireTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["holderIdentity"]) -> typing.Union[MetaOapg.properties.holderIdentity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leaseDurationSeconds"]) -> typing.Union[MetaOapg.properties.leaseDurationSeconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["leaseTransitions"]) -> typing.Union[MetaOapg.properties.leaseTransitions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["renewTime"]) -> typing.Union[MetaOapg.properties.renewTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["acquireTime", "holderIdentity", "leaseDurationSeconds", "leaseTransitions", "renewTime", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        acquireTime: typing.Union[MetaOapg.properties.acquireTime, str, datetime, schemas.Unset] = schemas.unset,
        holderIdentity: typing.Union[MetaOapg.properties.holderIdentity, str, schemas.Unset] = schemas.unset,
        leaseDurationSeconds: typing.Union[MetaOapg.properties.leaseDurationSeconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        leaseTransitions: typing.Union[MetaOapg.properties.leaseTransitions, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        renewTime: typing.Union[MetaOapg.properties.renewTime, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1LeaseSpec':
        return super().__new__(
            cls,
            *args,
            acquireTime=acquireTime,
            holderIdentity=holderIdentity,
            leaseDurationSeconds=leaseDurationSeconds,
            leaseTransitions=leaseTransitions,
            renewTime=renewTime,
            _configuration=_configuration,
            **kwargs,
        )
