# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class V1NodeSystemInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
    """


    class MetaOapg:
        required = {
            "machineID",
            "bootID",
            "containerRuntimeVersion",
            "kernelVersion",
            "kubeletVersion",
            "systemUUID",
            "kubeProxyVersion",
            "operatingSystem",
            "architecture",
            "osImage",
        }
        
        class properties:
            architecture = schemas.StrSchema
            bootID = schemas.StrSchema
            containerRuntimeVersion = schemas.StrSchema
            kernelVersion = schemas.StrSchema
            kubeProxyVersion = schemas.StrSchema
            kubeletVersion = schemas.StrSchema
            machineID = schemas.StrSchema
            operatingSystem = schemas.StrSchema
            osImage = schemas.StrSchema
            systemUUID = schemas.StrSchema
            __annotations__ = {
                "architecture": architecture,
                "bootID": bootID,
                "containerRuntimeVersion": containerRuntimeVersion,
                "kernelVersion": kernelVersion,
                "kubeProxyVersion": kubeProxyVersion,
                "kubeletVersion": kubeletVersion,
                "machineID": machineID,
                "operatingSystem": operatingSystem,
                "osImage": osImage,
                "systemUUID": systemUUID,
            }
    
    machineID: MetaOapg.properties.machineID
    bootID: MetaOapg.properties.bootID
    containerRuntimeVersion: MetaOapg.properties.containerRuntimeVersion
    kernelVersion: MetaOapg.properties.kernelVersion
    kubeletVersion: MetaOapg.properties.kubeletVersion
    systemUUID: MetaOapg.properties.systemUUID
    kubeProxyVersion: MetaOapg.properties.kubeProxyVersion
    operatingSystem: MetaOapg.properties.operatingSystem
    architecture: MetaOapg.properties.architecture
    osImage: MetaOapg.properties.osImage
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["architecture"]) -> MetaOapg.properties.architecture: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bootID"]) -> MetaOapg.properties.bootID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["containerRuntimeVersion"]) -> MetaOapg.properties.containerRuntimeVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kernelVersion"]) -> MetaOapg.properties.kernelVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kubeProxyVersion"]) -> MetaOapg.properties.kubeProxyVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kubeletVersion"]) -> MetaOapg.properties.kubeletVersion: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["machineID"]) -> MetaOapg.properties.machineID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operatingSystem"]) -> MetaOapg.properties.operatingSystem: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["osImage"]) -> MetaOapg.properties.osImage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systemUUID"]) -> MetaOapg.properties.systemUUID: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["architecture", "bootID", "containerRuntimeVersion", "kernelVersion", "kubeProxyVersion", "kubeletVersion", "machineID", "operatingSystem", "osImage", "systemUUID", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["architecture"]) -> MetaOapg.properties.architecture: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bootID"]) -> MetaOapg.properties.bootID: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["containerRuntimeVersion"]) -> MetaOapg.properties.containerRuntimeVersion: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kernelVersion"]) -> MetaOapg.properties.kernelVersion: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kubeProxyVersion"]) -> MetaOapg.properties.kubeProxyVersion: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kubeletVersion"]) -> MetaOapg.properties.kubeletVersion: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["machineID"]) -> MetaOapg.properties.machineID: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operatingSystem"]) -> MetaOapg.properties.operatingSystem: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["osImage"]) -> MetaOapg.properties.osImage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systemUUID"]) -> MetaOapg.properties.systemUUID: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["architecture", "bootID", "containerRuntimeVersion", "kernelVersion", "kubeProxyVersion", "kubeletVersion", "machineID", "operatingSystem", "osImage", "systemUUID", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        machineID: typing.Union[MetaOapg.properties.machineID, str, ],
        bootID: typing.Union[MetaOapg.properties.bootID, str, ],
        containerRuntimeVersion: typing.Union[MetaOapg.properties.containerRuntimeVersion, str, ],
        kernelVersion: typing.Union[MetaOapg.properties.kernelVersion, str, ],
        kubeletVersion: typing.Union[MetaOapg.properties.kubeletVersion, str, ],
        systemUUID: typing.Union[MetaOapg.properties.systemUUID, str, ],
        kubeProxyVersion: typing.Union[MetaOapg.properties.kubeProxyVersion, str, ],
        operatingSystem: typing.Union[MetaOapg.properties.operatingSystem, str, ],
        architecture: typing.Union[MetaOapg.properties.architecture, str, ],
        osImage: typing.Union[MetaOapg.properties.osImage, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1NodeSystemInfo':
        return super().__new__(
            cls,
            *args,
            machineID=machineID,
            bootID=bootID,
            containerRuntimeVersion=containerRuntimeVersion,
            kernelVersion=kernelVersion,
            kubeletVersion=kubeletVersion,
            systemUUID=systemUUID,
            kubeProxyVersion=kubeProxyVersion,
            operatingSystem=operatingSystem,
            architecture=architecture,
            osImage=osImage,
            _configuration=_configuration,
            **kwargs,
        )
