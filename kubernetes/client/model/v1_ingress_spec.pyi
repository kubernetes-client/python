# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from client import schemas  # noqa: F401


class V1IngressSpec(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    IngressSpec describes the Ingress the user wishes to exist.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def defaultBackend() -> typing.Type['V1IngressBackend']:
                return V1IngressBackend
            ingressClassName = schemas.StrSchema
            
            
            class rules(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1IngressRule']:
                        return V1IngressRule
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1IngressRule'], typing.List['V1IngressRule']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'rules':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1IngressRule':
                    return super().__getitem__(i)
            
            
            class tls(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1IngressTLS']:
                        return V1IngressTLS
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1IngressTLS'], typing.List['V1IngressTLS']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tls':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1IngressTLS':
                    return super().__getitem__(i)
            __annotations__ = {
                "defaultBackend": defaultBackend,
                "ingressClassName": ingressClassName,
                "rules": rules,
                "tls": tls,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["defaultBackend"]) -> 'V1IngressBackend': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ingressClassName"]) -> MetaOapg.properties.ingressClassName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rules"]) -> MetaOapg.properties.rules: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tls"]) -> MetaOapg.properties.tls: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["defaultBackend", "ingressClassName", "rules", "tls", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["defaultBackend"]) -> typing.Union['V1IngressBackend', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ingressClassName"]) -> typing.Union[MetaOapg.properties.ingressClassName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rules"]) -> typing.Union[MetaOapg.properties.rules, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tls"]) -> typing.Union[MetaOapg.properties.tls, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["defaultBackend", "ingressClassName", "rules", "tls", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        defaultBackend: typing.Union['V1IngressBackend', schemas.Unset] = schemas.unset,
        ingressClassName: typing.Union[MetaOapg.properties.ingressClassName, str, schemas.Unset] = schemas.unset,
        rules: typing.Union[MetaOapg.properties.rules, list, tuple, schemas.Unset] = schemas.unset,
        tls: typing.Union[MetaOapg.properties.tls, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1IngressSpec':
        return super().__new__(
            cls,
            *args,
            defaultBackend=defaultBackend,
            ingressClassName=ingressClassName,
            rules=rules,
            tls=tls,
            _configuration=_configuration,
            **kwargs,
        )

from client.model.v1_ingress_backend import V1IngressBackend
from client.model.v1_ingress_rule import V1IngressRule
from client.model.v1_ingress_tls import V1IngressTLS
