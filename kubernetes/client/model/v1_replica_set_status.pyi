# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from client import schemas  # noqa: F401


class V1ReplicaSetStatus(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ReplicaSetStatus represents the current status of a ReplicaSet.
    """


    class MetaOapg:
        required = {
            "replicas",
        }
        
        class properties:
            replicas = schemas.Int32Schema
            availableReplicas = schemas.Int32Schema
            
            
            class conditions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1ReplicaSetCondition']:
                        return V1ReplicaSetCondition
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1ReplicaSetCondition'], typing.List['V1ReplicaSetCondition']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'conditions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1ReplicaSetCondition':
                    return super().__getitem__(i)
            fullyLabeledReplicas = schemas.Int32Schema
            observedGeneration = schemas.Int64Schema
            readyReplicas = schemas.Int32Schema
            __annotations__ = {
                "replicas": replicas,
                "availableReplicas": availableReplicas,
                "conditions": conditions,
                "fullyLabeledReplicas": fullyLabeledReplicas,
                "observedGeneration": observedGeneration,
                "readyReplicas": readyReplicas,
            }
    
    replicas: MetaOapg.properties.replicas
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["replicas"]) -> MetaOapg.properties.replicas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["availableReplicas"]) -> MetaOapg.properties.availableReplicas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conditions"]) -> MetaOapg.properties.conditions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fullyLabeledReplicas"]) -> MetaOapg.properties.fullyLabeledReplicas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["observedGeneration"]) -> MetaOapg.properties.observedGeneration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["readyReplicas"]) -> MetaOapg.properties.readyReplicas: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["replicas", "availableReplicas", "conditions", "fullyLabeledReplicas", "observedGeneration", "readyReplicas", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["replicas"]) -> MetaOapg.properties.replicas: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["availableReplicas"]) -> typing.Union[MetaOapg.properties.availableReplicas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conditions"]) -> typing.Union[MetaOapg.properties.conditions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fullyLabeledReplicas"]) -> typing.Union[MetaOapg.properties.fullyLabeledReplicas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["observedGeneration"]) -> typing.Union[MetaOapg.properties.observedGeneration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["readyReplicas"]) -> typing.Union[MetaOapg.properties.readyReplicas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["replicas", "availableReplicas", "conditions", "fullyLabeledReplicas", "observedGeneration", "readyReplicas", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        replicas: typing.Union[MetaOapg.properties.replicas, decimal.Decimal, int, ],
        availableReplicas: typing.Union[MetaOapg.properties.availableReplicas, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        conditions: typing.Union[MetaOapg.properties.conditions, list, tuple, schemas.Unset] = schemas.unset,
        fullyLabeledReplicas: typing.Union[MetaOapg.properties.fullyLabeledReplicas, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        observedGeneration: typing.Union[MetaOapg.properties.observedGeneration, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        readyReplicas: typing.Union[MetaOapg.properties.readyReplicas, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1ReplicaSetStatus':
        return super().__new__(
            cls,
            *args,
            replicas=replicas,
            availableReplicas=availableReplicas,
            conditions=conditions,
            fullyLabeledReplicas=fullyLabeledReplicas,
            observedGeneration=observedGeneration,
            readyReplicas=readyReplicas,
            _configuration=_configuration,
            **kwargs,
        )

from client.model.v1_replica_set_condition import V1ReplicaSetCondition
