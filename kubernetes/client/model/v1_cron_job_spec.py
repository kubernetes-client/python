# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class V1CronJobSpec(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    CronJobSpec describes how the job execution will look like and when it will actually run.
    """


    class MetaOapg:
        required = {
            "schedule",
            "jobTemplate",
        }
        
        class properties:
        
            @staticmethod
            def jobTemplate() -> typing.Type['V1JobTemplateSpec']:
                return V1JobTemplateSpec
            schedule = schemas.StrSchema
            concurrencyPolicy = schemas.StrSchema
            failedJobsHistoryLimit = schemas.Int32Schema
            startingDeadlineSeconds = schemas.Int64Schema
            successfulJobsHistoryLimit = schemas.Int32Schema
            suspend = schemas.BoolSchema
            timeZone = schemas.StrSchema
            __annotations__ = {
                "jobTemplate": jobTemplate,
                "schedule": schedule,
                "concurrencyPolicy": concurrencyPolicy,
                "failedJobsHistoryLimit": failedJobsHistoryLimit,
                "startingDeadlineSeconds": startingDeadlineSeconds,
                "successfulJobsHistoryLimit": successfulJobsHistoryLimit,
                "suspend": suspend,
                "timeZone": timeZone,
            }
    
    schedule: MetaOapg.properties.schedule
    jobTemplate: 'V1JobTemplateSpec'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobTemplate"]) -> 'V1JobTemplateSpec': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schedule"]) -> MetaOapg.properties.schedule: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["concurrencyPolicy"]) -> MetaOapg.properties.concurrencyPolicy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["failedJobsHistoryLimit"]) -> MetaOapg.properties.failedJobsHistoryLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startingDeadlineSeconds"]) -> MetaOapg.properties.startingDeadlineSeconds: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["successfulJobsHistoryLimit"]) -> MetaOapg.properties.successfulJobsHistoryLimit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["suspend"]) -> MetaOapg.properties.suspend: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeZone"]) -> MetaOapg.properties.timeZone: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["jobTemplate", "schedule", "concurrencyPolicy", "failedJobsHistoryLimit", "startingDeadlineSeconds", "successfulJobsHistoryLimit", "suspend", "timeZone", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobTemplate"]) -> 'V1JobTemplateSpec': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schedule"]) -> MetaOapg.properties.schedule: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["concurrencyPolicy"]) -> typing.Union[MetaOapg.properties.concurrencyPolicy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["failedJobsHistoryLimit"]) -> typing.Union[MetaOapg.properties.failedJobsHistoryLimit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startingDeadlineSeconds"]) -> typing.Union[MetaOapg.properties.startingDeadlineSeconds, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["successfulJobsHistoryLimit"]) -> typing.Union[MetaOapg.properties.successfulJobsHistoryLimit, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["suspend"]) -> typing.Union[MetaOapg.properties.suspend, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeZone"]) -> typing.Union[MetaOapg.properties.timeZone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["jobTemplate", "schedule", "concurrencyPolicy", "failedJobsHistoryLimit", "startingDeadlineSeconds", "successfulJobsHistoryLimit", "suspend", "timeZone", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        schedule: typing.Union[MetaOapg.properties.schedule, str, ],
        jobTemplate: 'V1JobTemplateSpec',
        concurrencyPolicy: typing.Union[MetaOapg.properties.concurrencyPolicy, str, schemas.Unset] = schemas.unset,
        failedJobsHistoryLimit: typing.Union[MetaOapg.properties.failedJobsHistoryLimit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        startingDeadlineSeconds: typing.Union[MetaOapg.properties.startingDeadlineSeconds, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        successfulJobsHistoryLimit: typing.Union[MetaOapg.properties.successfulJobsHistoryLimit, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        suspend: typing.Union[MetaOapg.properties.suspend, bool, schemas.Unset] = schemas.unset,
        timeZone: typing.Union[MetaOapg.properties.timeZone, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1CronJobSpec':
        return super().__new__(
            cls,
            *args,
            schedule=schedule,
            jobTemplate=jobTemplate,
            concurrencyPolicy=concurrencyPolicy,
            failedJobsHistoryLimit=failedJobsHistoryLimit,
            startingDeadlineSeconds=startingDeadlineSeconds,
            successfulJobsHistoryLimit=successfulJobsHistoryLimit,
            suspend=suspend,
            timeZone=timeZone,
            _configuration=_configuration,
            **kwargs,
        )

from kubernetes.client.model.v1_job_template_spec import V1JobTemplateSpec
