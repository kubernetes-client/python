# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from client import schemas  # noqa: F401


class V1Affinity(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Affinity is a group of affinity scheduling rules.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def nodeAffinity() -> typing.Type['V1NodeAffinity']:
                return V1NodeAffinity
        
            @staticmethod
            def podAffinity() -> typing.Type['V1PodAffinity']:
                return V1PodAffinity
        
            @staticmethod
            def podAntiAffinity() -> typing.Type['V1PodAntiAffinity']:
                return V1PodAntiAffinity
            __annotations__ = {
                "nodeAffinity": nodeAffinity,
                "podAffinity": podAffinity,
                "podAntiAffinity": podAntiAffinity,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nodeAffinity"]) -> 'V1NodeAffinity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["podAffinity"]) -> 'V1PodAffinity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["podAntiAffinity"]) -> 'V1PodAntiAffinity': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["nodeAffinity", "podAffinity", "podAntiAffinity", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nodeAffinity"]) -> typing.Union['V1NodeAffinity', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["podAffinity"]) -> typing.Union['V1PodAffinity', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["podAntiAffinity"]) -> typing.Union['V1PodAntiAffinity', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["nodeAffinity", "podAffinity", "podAntiAffinity", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        nodeAffinity: typing.Union['V1NodeAffinity', schemas.Unset] = schemas.unset,
        podAffinity: typing.Union['V1PodAffinity', schemas.Unset] = schemas.unset,
        podAntiAffinity: typing.Union['V1PodAntiAffinity', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1Affinity':
        return super().__new__(
            cls,
            *args,
            nodeAffinity=nodeAffinity,
            podAffinity=podAffinity,
            podAntiAffinity=podAntiAffinity,
            _configuration=_configuration,
            **kwargs,
        )

from client.model.v1_node_affinity import V1NodeAffinity
from client.model.v1_pod_affinity import V1PodAffinity
from client.model.v1_pod_anti_affinity import V1PodAntiAffinity
