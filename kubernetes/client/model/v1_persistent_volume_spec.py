"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.23
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from kubernetes.client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from kubernetes.client.exceptions import ApiAttributeError


def lazy_import():
    from kubernetes.client.model.v1_aws_elastic_block_store_volume_source import V1AWSElasticBlockStoreVolumeSource
    from kubernetes.client.model.v1_azure_disk_volume_source import V1AzureDiskVolumeSource
    from kubernetes.client.model.v1_azure_file_persistent_volume_source import V1AzureFilePersistentVolumeSource
    from kubernetes.client.model.v1_ceph_fs_persistent_volume_source import V1CephFSPersistentVolumeSource
    from kubernetes.client.model.v1_cinder_persistent_volume_source import V1CinderPersistentVolumeSource
    from kubernetes.client.model.v1_csi_persistent_volume_source import V1CSIPersistentVolumeSource
    from kubernetes.client.model.v1_fc_volume_source import V1FCVolumeSource
    from kubernetes.client.model.v1_flex_persistent_volume_source import V1FlexPersistentVolumeSource
    from kubernetes.client.model.v1_flocker_volume_source import V1FlockerVolumeSource
    from kubernetes.client.model.v1_gce_persistent_disk_volume_source import V1GCEPersistentDiskVolumeSource
    from kubernetes.client.model.v1_glusterfs_persistent_volume_source import V1GlusterfsPersistentVolumeSource
    from kubernetes.client.model.v1_host_path_volume_source import V1HostPathVolumeSource
    from kubernetes.client.model.v1_iscsi_persistent_volume_source import V1ISCSIPersistentVolumeSource
    from kubernetes.client.model.v1_local_volume_source import V1LocalVolumeSource
    from kubernetes.client.model.v1_nfs_volume_source import V1NFSVolumeSource
    from kubernetes.client.model.v1_object_reference import V1ObjectReference
    from kubernetes.client.model.v1_photon_persistent_disk_volume_source import V1PhotonPersistentDiskVolumeSource
    from kubernetes.client.model.v1_portworx_volume_source import V1PortworxVolumeSource
    from kubernetes.client.model.v1_quobyte_volume_source import V1QuobyteVolumeSource
    from kubernetes.client.model.v1_rbd_persistent_volume_source import V1RBDPersistentVolumeSource
    from kubernetes.client.model.v1_scale_io_persistent_volume_source import V1ScaleIOPersistentVolumeSource
    from kubernetes.client.model.v1_storage_os_persistent_volume_source import V1StorageOSPersistentVolumeSource
    from kubernetes.client.model.v1_volume_node_affinity import V1VolumeNodeAffinity
    from kubernetes.client.model.v1_vsphere_virtual_disk_volume_source import V1VsphereVirtualDiskVolumeSource
    globals()['V1AWSElasticBlockStoreVolumeSource'] = V1AWSElasticBlockStoreVolumeSource
    globals()['V1AzureDiskVolumeSource'] = V1AzureDiskVolumeSource
    globals()['V1AzureFilePersistentVolumeSource'] = V1AzureFilePersistentVolumeSource
    globals()['V1CSIPersistentVolumeSource'] = V1CSIPersistentVolumeSource
    globals()['V1CephFSPersistentVolumeSource'] = V1CephFSPersistentVolumeSource
    globals()['V1CinderPersistentVolumeSource'] = V1CinderPersistentVolumeSource
    globals()['V1FCVolumeSource'] = V1FCVolumeSource
    globals()['V1FlexPersistentVolumeSource'] = V1FlexPersistentVolumeSource
    globals()['V1FlockerVolumeSource'] = V1FlockerVolumeSource
    globals()['V1GCEPersistentDiskVolumeSource'] = V1GCEPersistentDiskVolumeSource
    globals()['V1GlusterfsPersistentVolumeSource'] = V1GlusterfsPersistentVolumeSource
    globals()['V1HostPathVolumeSource'] = V1HostPathVolumeSource
    globals()['V1ISCSIPersistentVolumeSource'] = V1ISCSIPersistentVolumeSource
    globals()['V1LocalVolumeSource'] = V1LocalVolumeSource
    globals()['V1NFSVolumeSource'] = V1NFSVolumeSource
    globals()['V1ObjectReference'] = V1ObjectReference
    globals()['V1PhotonPersistentDiskVolumeSource'] = V1PhotonPersistentDiskVolumeSource
    globals()['V1PortworxVolumeSource'] = V1PortworxVolumeSource
    globals()['V1QuobyteVolumeSource'] = V1QuobyteVolumeSource
    globals()['V1RBDPersistentVolumeSource'] = V1RBDPersistentVolumeSource
    globals()['V1ScaleIOPersistentVolumeSource'] = V1ScaleIOPersistentVolumeSource
    globals()['V1StorageOSPersistentVolumeSource'] = V1StorageOSPersistentVolumeSource
    globals()['V1VolumeNodeAffinity'] = V1VolumeNodeAffinity
    globals()['V1VsphereVirtualDiskVolumeSource'] = V1VsphereVirtualDiskVolumeSource


class V1PersistentVolumeSpec(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('persistent_volume_reclaim_policy',): {
            'DELETE': "Delete",
            'RECYCLE': "Recycle",
            'RETAIN': "Retain",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'access_modes': ([str],),  # noqa: E501
            'aws_elastic_block_store': (V1AWSElasticBlockStoreVolumeSource,),  # noqa: E501
            'azure_disk': (V1AzureDiskVolumeSource,),  # noqa: E501
            'azure_file': (V1AzureFilePersistentVolumeSource,),  # noqa: E501
            'capacity': ({str: (str,)},),  # noqa: E501
            'cephfs': (V1CephFSPersistentVolumeSource,),  # noqa: E501
            'cinder': (V1CinderPersistentVolumeSource,),  # noqa: E501
            'claim_ref': (V1ObjectReference,),  # noqa: E501
            'csi': (V1CSIPersistentVolumeSource,),  # noqa: E501
            'fc': (V1FCVolumeSource,),  # noqa: E501
            'flex_volume': (V1FlexPersistentVolumeSource,),  # noqa: E501
            'flocker': (V1FlockerVolumeSource,),  # noqa: E501
            'gce_persistent_disk': (V1GCEPersistentDiskVolumeSource,),  # noqa: E501
            'glusterfs': (V1GlusterfsPersistentVolumeSource,),  # noqa: E501
            'host_path': (V1HostPathVolumeSource,),  # noqa: E501
            'iscsi': (V1ISCSIPersistentVolumeSource,),  # noqa: E501
            'local': (V1LocalVolumeSource,),  # noqa: E501
            'mount_options': ([str],),  # noqa: E501
            'nfs': (V1NFSVolumeSource,),  # noqa: E501
            'node_affinity': (V1VolumeNodeAffinity,),  # noqa: E501
            'persistent_volume_reclaim_policy': (str,),  # noqa: E501
            'photon_persistent_disk': (V1PhotonPersistentDiskVolumeSource,),  # noqa: E501
            'portworx_volume': (V1PortworxVolumeSource,),  # noqa: E501
            'quobyte': (V1QuobyteVolumeSource,),  # noqa: E501
            'rbd': (V1RBDPersistentVolumeSource,),  # noqa: E501
            'scale_io': (V1ScaleIOPersistentVolumeSource,),  # noqa: E501
            'storage_class_name': (str,),  # noqa: E501
            'storageos': (V1StorageOSPersistentVolumeSource,),  # noqa: E501
            'volume_mode': (str,),  # noqa: E501
            'vsphere_volume': (V1VsphereVirtualDiskVolumeSource,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'access_modes': 'accessModes',  # noqa: E501
        'aws_elastic_block_store': 'awsElasticBlockStore',  # noqa: E501
        'azure_disk': 'azureDisk',  # noqa: E501
        'azure_file': 'azureFile',  # noqa: E501
        'capacity': 'capacity',  # noqa: E501
        'cephfs': 'cephfs',  # noqa: E501
        'cinder': 'cinder',  # noqa: E501
        'claim_ref': 'claimRef',  # noqa: E501
        'csi': 'csi',  # noqa: E501
        'fc': 'fc',  # noqa: E501
        'flex_volume': 'flexVolume',  # noqa: E501
        'flocker': 'flocker',  # noqa: E501
        'gce_persistent_disk': 'gcePersistentDisk',  # noqa: E501
        'glusterfs': 'glusterfs',  # noqa: E501
        'host_path': 'hostPath',  # noqa: E501
        'iscsi': 'iscsi',  # noqa: E501
        'local': 'local',  # noqa: E501
        'mount_options': 'mountOptions',  # noqa: E501
        'nfs': 'nfs',  # noqa: E501
        'node_affinity': 'nodeAffinity',  # noqa: E501
        'persistent_volume_reclaim_policy': 'persistentVolumeReclaimPolicy',  # noqa: E501
        'photon_persistent_disk': 'photonPersistentDisk',  # noqa: E501
        'portworx_volume': 'portworxVolume',  # noqa: E501
        'quobyte': 'quobyte',  # noqa: E501
        'rbd': 'rbd',  # noqa: E501
        'scale_io': 'scaleIO',  # noqa: E501
        'storage_class_name': 'storageClassName',  # noqa: E501
        'storageos': 'storageos',  # noqa: E501
        'volume_mode': 'volumeMode',  # noqa: E501
        'vsphere_volume': 'vsphereVolume',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """V1PersistentVolumeSpec - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            access_modes ([str]): AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes. [optional]  # noqa: E501
            aws_elastic_block_store (V1AWSElasticBlockStoreVolumeSource): [optional]  # noqa: E501
            azure_disk (V1AzureDiskVolumeSource): [optional]  # noqa: E501
            azure_file (V1AzureFilePersistentVolumeSource): [optional]  # noqa: E501
            capacity ({str: (str,)}): A description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity. [optional]  # noqa: E501
            cephfs (V1CephFSPersistentVolumeSource): [optional]  # noqa: E501
            cinder (V1CinderPersistentVolumeSource): [optional]  # noqa: E501
            claim_ref (V1ObjectReference): [optional]  # noqa: E501
            csi (V1CSIPersistentVolumeSource): [optional]  # noqa: E501
            fc (V1FCVolumeSource): [optional]  # noqa: E501
            flex_volume (V1FlexPersistentVolumeSource): [optional]  # noqa: E501
            flocker (V1FlockerVolumeSource): [optional]  # noqa: E501
            gce_persistent_disk (V1GCEPersistentDiskVolumeSource): [optional]  # noqa: E501
            glusterfs (V1GlusterfsPersistentVolumeSource): [optional]  # noqa: E501
            host_path (V1HostPathVolumeSource): [optional]  # noqa: E501
            iscsi (V1ISCSIPersistentVolumeSource): [optional]  # noqa: E501
            local (V1LocalVolumeSource): [optional]  # noqa: E501
            mount_options ([str]): A list of mount options, e.g. [\"ro\", \"soft\"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options. [optional]  # noqa: E501
            nfs (V1NFSVolumeSource): [optional]  # noqa: E501
            node_affinity (V1VolumeNodeAffinity): [optional]  # noqa: E501
            persistent_volume_reclaim_policy (str): What happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming  Possible enum values:  - `\"Delete\"` means the volume will be deleted from Kubernetes on release from its claim. The volume plugin must support Deletion.  - `\"Recycle\"` means the volume will be recycled back into the pool of unbound persistent volumes on release from its claim. The volume plugin must support Recycling.  - `\"Retain\"` means the volume will be left in its current phase (Released) for manual reclamation by the administrator. The default policy is Retain.. [optional]  # noqa: E501
            photon_persistent_disk (V1PhotonPersistentDiskVolumeSource): [optional]  # noqa: E501
            portworx_volume (V1PortworxVolumeSource): [optional]  # noqa: E501
            quobyte (V1QuobyteVolumeSource): [optional]  # noqa: E501
            rbd (V1RBDPersistentVolumeSource): [optional]  # noqa: E501
            scale_io (V1ScaleIOPersistentVolumeSource): [optional]  # noqa: E501
            storage_class_name (str): Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.. [optional]  # noqa: E501
            storageos (V1StorageOSPersistentVolumeSource): [optional]  # noqa: E501
            volume_mode (str): volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.. [optional]  # noqa: E501
            vsphere_volume (V1VsphereVirtualDiskVolumeSource): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """V1PersistentVolumeSpec - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            access_modes ([str]): AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes. [optional]  # noqa: E501
            aws_elastic_block_store (V1AWSElasticBlockStoreVolumeSource): [optional]  # noqa: E501
            azure_disk (V1AzureDiskVolumeSource): [optional]  # noqa: E501
            azure_file (V1AzureFilePersistentVolumeSource): [optional]  # noqa: E501
            capacity ({str: (str,)}): A description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity. [optional]  # noqa: E501
            cephfs (V1CephFSPersistentVolumeSource): [optional]  # noqa: E501
            cinder (V1CinderPersistentVolumeSource): [optional]  # noqa: E501
            claim_ref (V1ObjectReference): [optional]  # noqa: E501
            csi (V1CSIPersistentVolumeSource): [optional]  # noqa: E501
            fc (V1FCVolumeSource): [optional]  # noqa: E501
            flex_volume (V1FlexPersistentVolumeSource): [optional]  # noqa: E501
            flocker (V1FlockerVolumeSource): [optional]  # noqa: E501
            gce_persistent_disk (V1GCEPersistentDiskVolumeSource): [optional]  # noqa: E501
            glusterfs (V1GlusterfsPersistentVolumeSource): [optional]  # noqa: E501
            host_path (V1HostPathVolumeSource): [optional]  # noqa: E501
            iscsi (V1ISCSIPersistentVolumeSource): [optional]  # noqa: E501
            local (V1LocalVolumeSource): [optional]  # noqa: E501
            mount_options ([str]): A list of mount options, e.g. [\"ro\", \"soft\"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options. [optional]  # noqa: E501
            nfs (V1NFSVolumeSource): [optional]  # noqa: E501
            node_affinity (V1VolumeNodeAffinity): [optional]  # noqa: E501
            persistent_volume_reclaim_policy (str): What happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming  Possible enum values:  - `\"Delete\"` means the volume will be deleted from Kubernetes on release from its claim. The volume plugin must support Deletion.  - `\"Recycle\"` means the volume will be recycled back into the pool of unbound persistent volumes on release from its claim. The volume plugin must support Recycling.  - `\"Retain\"` means the volume will be left in its current phase (Released) for manual reclamation by the administrator. The default policy is Retain.. [optional]  # noqa: E501
            photon_persistent_disk (V1PhotonPersistentDiskVolumeSource): [optional]  # noqa: E501
            portworx_volume (V1PortworxVolumeSource): [optional]  # noqa: E501
            quobyte (V1QuobyteVolumeSource): [optional]  # noqa: E501
            rbd (V1RBDPersistentVolumeSource): [optional]  # noqa: E501
            scale_io (V1ScaleIOPersistentVolumeSource): [optional]  # noqa: E501
            storage_class_name (str): Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.. [optional]  # noqa: E501
            storageos (V1StorageOSPersistentVolumeSource): [optional]  # noqa: E501
            volume_mode (str): volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.. [optional]  # noqa: E501
            vsphere_volume (V1VsphereVirtualDiskVolumeSource): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
