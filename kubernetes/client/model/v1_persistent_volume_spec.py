# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class V1PersistentVolumeSpec(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    PersistentVolumeSpec is the specification of a persistent volume.
    """


    class MetaOapg:
        
        class properties:
            
            
            class accessModes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'accessModes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def awsElasticBlockStore() -> typing.Type['V1AWSElasticBlockStoreVolumeSource']:
                return V1AWSElasticBlockStoreVolumeSource
        
            @staticmethod
            def azureDisk() -> typing.Type['V1AzureDiskVolumeSource']:
                return V1AzureDiskVolumeSource
        
            @staticmethod
            def azureFile() -> typing.Type['V1AzureFilePersistentVolumeSource']:
                return V1AzureFilePersistentVolumeSource
            
            
            class capacity(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    additional_properties = schemas.StrSchema
                
                def __getitem__(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                def get_item_oapg(self, name: typing.Union[str, ]) -> MetaOapg.additional_properties:
                    return super().get_item_oapg(name)
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[MetaOapg.additional_properties, str, ],
                ) -> 'capacity':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def cephfs() -> typing.Type['V1CephFSPersistentVolumeSource']:
                return V1CephFSPersistentVolumeSource
        
            @staticmethod
            def cinder() -> typing.Type['V1CinderPersistentVolumeSource']:
                return V1CinderPersistentVolumeSource
        
            @staticmethod
            def claimRef() -> typing.Type['V1ObjectReference']:
                return V1ObjectReference
        
            @staticmethod
            def csi() -> typing.Type['V1CSIPersistentVolumeSource']:
                return V1CSIPersistentVolumeSource
        
            @staticmethod
            def fc() -> typing.Type['V1FCVolumeSource']:
                return V1FCVolumeSource
        
            @staticmethod
            def flexVolume() -> typing.Type['V1FlexPersistentVolumeSource']:
                return V1FlexPersistentVolumeSource
        
            @staticmethod
            def flocker() -> typing.Type['V1FlockerVolumeSource']:
                return V1FlockerVolumeSource
        
            @staticmethod
            def gcePersistentDisk() -> typing.Type['V1GCEPersistentDiskVolumeSource']:
                return V1GCEPersistentDiskVolumeSource
        
            @staticmethod
            def glusterfs() -> typing.Type['V1GlusterfsPersistentVolumeSource']:
                return V1GlusterfsPersistentVolumeSource
        
            @staticmethod
            def hostPath() -> typing.Type['V1HostPathVolumeSource']:
                return V1HostPathVolumeSource
        
            @staticmethod
            def iscsi() -> typing.Type['V1ISCSIPersistentVolumeSource']:
                return V1ISCSIPersistentVolumeSource
        
            @staticmethod
            def local() -> typing.Type['V1LocalVolumeSource']:
                return V1LocalVolumeSource
            
            
            class mountOptions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mountOptions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def nfs() -> typing.Type['V1NFSVolumeSource']:
                return V1NFSVolumeSource
        
            @staticmethod
            def nodeAffinity() -> typing.Type['V1VolumeNodeAffinity']:
                return V1VolumeNodeAffinity
            persistentVolumeReclaimPolicy = schemas.StrSchema
        
            @staticmethod
            def photonPersistentDisk() -> typing.Type['V1PhotonPersistentDiskVolumeSource']:
                return V1PhotonPersistentDiskVolumeSource
        
            @staticmethod
            def portworxVolume() -> typing.Type['V1PortworxVolumeSource']:
                return V1PortworxVolumeSource
        
            @staticmethod
            def quobyte() -> typing.Type['V1QuobyteVolumeSource']:
                return V1QuobyteVolumeSource
        
            @staticmethod
            def rbd() -> typing.Type['V1RBDPersistentVolumeSource']:
                return V1RBDPersistentVolumeSource
        
            @staticmethod
            def scaleIO() -> typing.Type['V1ScaleIOPersistentVolumeSource']:
                return V1ScaleIOPersistentVolumeSource
            storageClassName = schemas.StrSchema
        
            @staticmethod
            def storageos() -> typing.Type['V1StorageOSPersistentVolumeSource']:
                return V1StorageOSPersistentVolumeSource
            volumeMode = schemas.StrSchema
        
            @staticmethod
            def vsphereVolume() -> typing.Type['V1VsphereVirtualDiskVolumeSource']:
                return V1VsphereVirtualDiskVolumeSource
            __annotations__ = {
                "accessModes": accessModes,
                "awsElasticBlockStore": awsElasticBlockStore,
                "azureDisk": azureDisk,
                "azureFile": azureFile,
                "capacity": capacity,
                "cephfs": cephfs,
                "cinder": cinder,
                "claimRef": claimRef,
                "csi": csi,
                "fc": fc,
                "flexVolume": flexVolume,
                "flocker": flocker,
                "gcePersistentDisk": gcePersistentDisk,
                "glusterfs": glusterfs,
                "hostPath": hostPath,
                "iscsi": iscsi,
                "local": local,
                "mountOptions": mountOptions,
                "nfs": nfs,
                "nodeAffinity": nodeAffinity,
                "persistentVolumeReclaimPolicy": persistentVolumeReclaimPolicy,
                "photonPersistentDisk": photonPersistentDisk,
                "portworxVolume": portworxVolume,
                "quobyte": quobyte,
                "rbd": rbd,
                "scaleIO": scaleIO,
                "storageClassName": storageClassName,
                "storageos": storageos,
                "volumeMode": volumeMode,
                "vsphereVolume": vsphereVolume,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accessModes"]) -> MetaOapg.properties.accessModes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["awsElasticBlockStore"]) -> 'V1AWSElasticBlockStoreVolumeSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["azureDisk"]) -> 'V1AzureDiskVolumeSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["azureFile"]) -> 'V1AzureFilePersistentVolumeSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capacity"]) -> MetaOapg.properties.capacity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cephfs"]) -> 'V1CephFSPersistentVolumeSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cinder"]) -> 'V1CinderPersistentVolumeSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["claimRef"]) -> 'V1ObjectReference': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["csi"]) -> 'V1CSIPersistentVolumeSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fc"]) -> 'V1FCVolumeSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flexVolume"]) -> 'V1FlexPersistentVolumeSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flocker"]) -> 'V1FlockerVolumeSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gcePersistentDisk"]) -> 'V1GCEPersistentDiskVolumeSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["glusterfs"]) -> 'V1GlusterfsPersistentVolumeSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostPath"]) -> 'V1HostPathVolumeSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["iscsi"]) -> 'V1ISCSIPersistentVolumeSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["local"]) -> 'V1LocalVolumeSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mountOptions"]) -> MetaOapg.properties.mountOptions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nfs"]) -> 'V1NFSVolumeSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nodeAffinity"]) -> 'V1VolumeNodeAffinity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["persistentVolumeReclaimPolicy"]) -> MetaOapg.properties.persistentVolumeReclaimPolicy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["photonPersistentDisk"]) -> 'V1PhotonPersistentDiskVolumeSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["portworxVolume"]) -> 'V1PortworxVolumeSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quobyte"]) -> 'V1QuobyteVolumeSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rbd"]) -> 'V1RBDPersistentVolumeSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scaleIO"]) -> 'V1ScaleIOPersistentVolumeSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["storageClassName"]) -> MetaOapg.properties.storageClassName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["storageos"]) -> 'V1StorageOSPersistentVolumeSource': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volumeMode"]) -> MetaOapg.properties.volumeMode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vsphereVolume"]) -> 'V1VsphereVirtualDiskVolumeSource': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accessModes", "awsElasticBlockStore", "azureDisk", "azureFile", "capacity", "cephfs", "cinder", "claimRef", "csi", "fc", "flexVolume", "flocker", "gcePersistentDisk", "glusterfs", "hostPath", "iscsi", "local", "mountOptions", "nfs", "nodeAffinity", "persistentVolumeReclaimPolicy", "photonPersistentDisk", "portworxVolume", "quobyte", "rbd", "scaleIO", "storageClassName", "storageos", "volumeMode", "vsphereVolume", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accessModes"]) -> typing.Union[MetaOapg.properties.accessModes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["awsElasticBlockStore"]) -> typing.Union['V1AWSElasticBlockStoreVolumeSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["azureDisk"]) -> typing.Union['V1AzureDiskVolumeSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["azureFile"]) -> typing.Union['V1AzureFilePersistentVolumeSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capacity"]) -> typing.Union[MetaOapg.properties.capacity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cephfs"]) -> typing.Union['V1CephFSPersistentVolumeSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cinder"]) -> typing.Union['V1CinderPersistentVolumeSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["claimRef"]) -> typing.Union['V1ObjectReference', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["csi"]) -> typing.Union['V1CSIPersistentVolumeSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fc"]) -> typing.Union['V1FCVolumeSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flexVolume"]) -> typing.Union['V1FlexPersistentVolumeSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flocker"]) -> typing.Union['V1FlockerVolumeSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gcePersistentDisk"]) -> typing.Union['V1GCEPersistentDiskVolumeSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["glusterfs"]) -> typing.Union['V1GlusterfsPersistentVolumeSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostPath"]) -> typing.Union['V1HostPathVolumeSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["iscsi"]) -> typing.Union['V1ISCSIPersistentVolumeSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["local"]) -> typing.Union['V1LocalVolumeSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mountOptions"]) -> typing.Union[MetaOapg.properties.mountOptions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nfs"]) -> typing.Union['V1NFSVolumeSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nodeAffinity"]) -> typing.Union['V1VolumeNodeAffinity', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["persistentVolumeReclaimPolicy"]) -> typing.Union[MetaOapg.properties.persistentVolumeReclaimPolicy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["photonPersistentDisk"]) -> typing.Union['V1PhotonPersistentDiskVolumeSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["portworxVolume"]) -> typing.Union['V1PortworxVolumeSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quobyte"]) -> typing.Union['V1QuobyteVolumeSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rbd"]) -> typing.Union['V1RBDPersistentVolumeSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scaleIO"]) -> typing.Union['V1ScaleIOPersistentVolumeSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["storageClassName"]) -> typing.Union[MetaOapg.properties.storageClassName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["storageos"]) -> typing.Union['V1StorageOSPersistentVolumeSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volumeMode"]) -> typing.Union[MetaOapg.properties.volumeMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vsphereVolume"]) -> typing.Union['V1VsphereVirtualDiskVolumeSource', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accessModes", "awsElasticBlockStore", "azureDisk", "azureFile", "capacity", "cephfs", "cinder", "claimRef", "csi", "fc", "flexVolume", "flocker", "gcePersistentDisk", "glusterfs", "hostPath", "iscsi", "local", "mountOptions", "nfs", "nodeAffinity", "persistentVolumeReclaimPolicy", "photonPersistentDisk", "portworxVolume", "quobyte", "rbd", "scaleIO", "storageClassName", "storageos", "volumeMode", "vsphereVolume", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        accessModes: typing.Union[MetaOapg.properties.accessModes, list, tuple, schemas.Unset] = schemas.unset,
        awsElasticBlockStore: typing.Union['V1AWSElasticBlockStoreVolumeSource', schemas.Unset] = schemas.unset,
        azureDisk: typing.Union['V1AzureDiskVolumeSource', schemas.Unset] = schemas.unset,
        azureFile: typing.Union['V1AzureFilePersistentVolumeSource', schemas.Unset] = schemas.unset,
        capacity: typing.Union[MetaOapg.properties.capacity, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        cephfs: typing.Union['V1CephFSPersistentVolumeSource', schemas.Unset] = schemas.unset,
        cinder: typing.Union['V1CinderPersistentVolumeSource', schemas.Unset] = schemas.unset,
        claimRef: typing.Union['V1ObjectReference', schemas.Unset] = schemas.unset,
        csi: typing.Union['V1CSIPersistentVolumeSource', schemas.Unset] = schemas.unset,
        fc: typing.Union['V1FCVolumeSource', schemas.Unset] = schemas.unset,
        flexVolume: typing.Union['V1FlexPersistentVolumeSource', schemas.Unset] = schemas.unset,
        flocker: typing.Union['V1FlockerVolumeSource', schemas.Unset] = schemas.unset,
        gcePersistentDisk: typing.Union['V1GCEPersistentDiskVolumeSource', schemas.Unset] = schemas.unset,
        glusterfs: typing.Union['V1GlusterfsPersistentVolumeSource', schemas.Unset] = schemas.unset,
        hostPath: typing.Union['V1HostPathVolumeSource', schemas.Unset] = schemas.unset,
        iscsi: typing.Union['V1ISCSIPersistentVolumeSource', schemas.Unset] = schemas.unset,
        local: typing.Union['V1LocalVolumeSource', schemas.Unset] = schemas.unset,
        mountOptions: typing.Union[MetaOapg.properties.mountOptions, list, tuple, schemas.Unset] = schemas.unset,
        nfs: typing.Union['V1NFSVolumeSource', schemas.Unset] = schemas.unset,
        nodeAffinity: typing.Union['V1VolumeNodeAffinity', schemas.Unset] = schemas.unset,
        persistentVolumeReclaimPolicy: typing.Union[MetaOapg.properties.persistentVolumeReclaimPolicy, str, schemas.Unset] = schemas.unset,
        photonPersistentDisk: typing.Union['V1PhotonPersistentDiskVolumeSource', schemas.Unset] = schemas.unset,
        portworxVolume: typing.Union['V1PortworxVolumeSource', schemas.Unset] = schemas.unset,
        quobyte: typing.Union['V1QuobyteVolumeSource', schemas.Unset] = schemas.unset,
        rbd: typing.Union['V1RBDPersistentVolumeSource', schemas.Unset] = schemas.unset,
        scaleIO: typing.Union['V1ScaleIOPersistentVolumeSource', schemas.Unset] = schemas.unset,
        storageClassName: typing.Union[MetaOapg.properties.storageClassName, str, schemas.Unset] = schemas.unset,
        storageos: typing.Union['V1StorageOSPersistentVolumeSource', schemas.Unset] = schemas.unset,
        volumeMode: typing.Union[MetaOapg.properties.volumeMode, str, schemas.Unset] = schemas.unset,
        vsphereVolume: typing.Union['V1VsphereVirtualDiskVolumeSource', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1PersistentVolumeSpec':
        return super().__new__(
            cls,
            *args,
            accessModes=accessModes,
            awsElasticBlockStore=awsElasticBlockStore,
            azureDisk=azureDisk,
            azureFile=azureFile,
            capacity=capacity,
            cephfs=cephfs,
            cinder=cinder,
            claimRef=claimRef,
            csi=csi,
            fc=fc,
            flexVolume=flexVolume,
            flocker=flocker,
            gcePersistentDisk=gcePersistentDisk,
            glusterfs=glusterfs,
            hostPath=hostPath,
            iscsi=iscsi,
            local=local,
            mountOptions=mountOptions,
            nfs=nfs,
            nodeAffinity=nodeAffinity,
            persistentVolumeReclaimPolicy=persistentVolumeReclaimPolicy,
            photonPersistentDisk=photonPersistentDisk,
            portworxVolume=portworxVolume,
            quobyte=quobyte,
            rbd=rbd,
            scaleIO=scaleIO,
            storageClassName=storageClassName,
            storageos=storageos,
            volumeMode=volumeMode,
            vsphereVolume=vsphereVolume,
            _configuration=_configuration,
            **kwargs,
        )

from kubernetes.client.model.v1_aws_elastic_block_store_volume_source import V1AWSElasticBlockStoreVolumeSource
from kubernetes.client.model.v1_azure_disk_volume_source import V1AzureDiskVolumeSource
from kubernetes.client.model.v1_azure_file_persistent_volume_source import V1AzureFilePersistentVolumeSource
from kubernetes.client.model.v1_ceph_fs_persistent_volume_source import V1CephFSPersistentVolumeSource
from kubernetes.client.model.v1_cinder_persistent_volume_source import V1CinderPersistentVolumeSource
from kubernetes.client.model.v1_csi_persistent_volume_source import V1CSIPersistentVolumeSource
from kubernetes.client.model.v1_fc_volume_source import V1FCVolumeSource
from kubernetes.client.model.v1_flex_persistent_volume_source import V1FlexPersistentVolumeSource
from kubernetes.client.model.v1_flocker_volume_source import V1FlockerVolumeSource
from kubernetes.client.model.v1_gce_persistent_disk_volume_source import V1GCEPersistentDiskVolumeSource
from kubernetes.client.model.v1_glusterfs_persistent_volume_source import V1GlusterfsPersistentVolumeSource
from kubernetes.client.model.v1_host_path_volume_source import V1HostPathVolumeSource
from kubernetes.client.model.v1_iscsi_persistent_volume_source import V1ISCSIPersistentVolumeSource
from kubernetes.client.model.v1_local_volume_source import V1LocalVolumeSource
from kubernetes.client.model.v1_nfs_volume_source import V1NFSVolumeSource
from kubernetes.client.model.v1_object_reference import V1ObjectReference
from kubernetes.client.model.v1_photon_persistent_disk_volume_source import V1PhotonPersistentDiskVolumeSource
from kubernetes.client.model.v1_portworx_volume_source import V1PortworxVolumeSource
from kubernetes.client.model.v1_quobyte_volume_source import V1QuobyteVolumeSource
from kubernetes.client.model.v1_rbd_persistent_volume_source import V1RBDPersistentVolumeSource
from kubernetes.client.model.v1_scale_io_persistent_volume_source import V1ScaleIOPersistentVolumeSource
from kubernetes.client.model.v1_storage_os_persistent_volume_source import V1StorageOSPersistentVolumeSource
from kubernetes.client.model.v1_volume_node_affinity import V1VolumeNodeAffinity
from kubernetes.client.model.v1_vsphere_virtual_disk_volume_source import V1VsphereVirtualDiskVolumeSource
