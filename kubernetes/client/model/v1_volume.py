"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.18
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from kubernetes.client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
)

def lazy_import():
    from kubernetes.client.model.v1_aws_elastic_block_store_volume_source import V1AWSElasticBlockStoreVolumeSource
    from kubernetes.client.model.v1_azure_disk_volume_source import V1AzureDiskVolumeSource
    from kubernetes.client.model.v1_azure_file_volume_source import V1AzureFileVolumeSource
    from kubernetes.client.model.v1_ceph_fs_volume_source import V1CephFSVolumeSource
    from kubernetes.client.model.v1_cinder_volume_source import V1CinderVolumeSource
    from kubernetes.client.model.v1_config_map_volume_source import V1ConfigMapVolumeSource
    from kubernetes.client.model.v1_csi_volume_source import V1CSIVolumeSource
    from kubernetes.client.model.v1_downward_api_volume_source import V1DownwardAPIVolumeSource
    from kubernetes.client.model.v1_empty_dir_volume_source import V1EmptyDirVolumeSource
    from kubernetes.client.model.v1_fc_volume_source import V1FCVolumeSource
    from kubernetes.client.model.v1_flex_volume_source import V1FlexVolumeSource
    from kubernetes.client.model.v1_flocker_volume_source import V1FlockerVolumeSource
    from kubernetes.client.model.v1_gce_persistent_disk_volume_source import V1GCEPersistentDiskVolumeSource
    from kubernetes.client.model.v1_git_repo_volume_source import V1GitRepoVolumeSource
    from kubernetes.client.model.v1_glusterfs_volume_source import V1GlusterfsVolumeSource
    from kubernetes.client.model.v1_host_path_volume_source import V1HostPathVolumeSource
    from kubernetes.client.model.v1_iscsi_volume_source import V1ISCSIVolumeSource
    from kubernetes.client.model.v1_nfs_volume_source import V1NFSVolumeSource
    from kubernetes.client.model.v1_persistent_volume_claim_volume_source import V1PersistentVolumeClaimVolumeSource
    from kubernetes.client.model.v1_photon_persistent_disk_volume_source import V1PhotonPersistentDiskVolumeSource
    from kubernetes.client.model.v1_portworx_volume_source import V1PortworxVolumeSource
    from kubernetes.client.model.v1_projected_volume_source import V1ProjectedVolumeSource
    from kubernetes.client.model.v1_quobyte_volume_source import V1QuobyteVolumeSource
    from kubernetes.client.model.v1_rbd_volume_source import V1RBDVolumeSource
    from kubernetes.client.model.v1_scale_io_volume_source import V1ScaleIOVolumeSource
    from kubernetes.client.model.v1_secret_volume_source import V1SecretVolumeSource
    from kubernetes.client.model.v1_storage_os_volume_source import V1StorageOSVolumeSource
    from kubernetes.client.model.v1_vsphere_virtual_disk_volume_source import V1VsphereVirtualDiskVolumeSource
    globals()['V1AWSElasticBlockStoreVolumeSource'] = V1AWSElasticBlockStoreVolumeSource
    globals()['V1AzureDiskVolumeSource'] = V1AzureDiskVolumeSource
    globals()['V1AzureFileVolumeSource'] = V1AzureFileVolumeSource
    globals()['V1CSIVolumeSource'] = V1CSIVolumeSource
    globals()['V1CephFSVolumeSource'] = V1CephFSVolumeSource
    globals()['V1CinderVolumeSource'] = V1CinderVolumeSource
    globals()['V1ConfigMapVolumeSource'] = V1ConfigMapVolumeSource
    globals()['V1DownwardAPIVolumeSource'] = V1DownwardAPIVolumeSource
    globals()['V1EmptyDirVolumeSource'] = V1EmptyDirVolumeSource
    globals()['V1FCVolumeSource'] = V1FCVolumeSource
    globals()['V1FlexVolumeSource'] = V1FlexVolumeSource
    globals()['V1FlockerVolumeSource'] = V1FlockerVolumeSource
    globals()['V1GCEPersistentDiskVolumeSource'] = V1GCEPersistentDiskVolumeSource
    globals()['V1GitRepoVolumeSource'] = V1GitRepoVolumeSource
    globals()['V1GlusterfsVolumeSource'] = V1GlusterfsVolumeSource
    globals()['V1HostPathVolumeSource'] = V1HostPathVolumeSource
    globals()['V1ISCSIVolumeSource'] = V1ISCSIVolumeSource
    globals()['V1NFSVolumeSource'] = V1NFSVolumeSource
    globals()['V1PersistentVolumeClaimVolumeSource'] = V1PersistentVolumeClaimVolumeSource
    globals()['V1PhotonPersistentDiskVolumeSource'] = V1PhotonPersistentDiskVolumeSource
    globals()['V1PortworxVolumeSource'] = V1PortworxVolumeSource
    globals()['V1ProjectedVolumeSource'] = V1ProjectedVolumeSource
    globals()['V1QuobyteVolumeSource'] = V1QuobyteVolumeSource
    globals()['V1RBDVolumeSource'] = V1RBDVolumeSource
    globals()['V1ScaleIOVolumeSource'] = V1ScaleIOVolumeSource
    globals()['V1SecretVolumeSource'] = V1SecretVolumeSource
    globals()['V1StorageOSVolumeSource'] = V1StorageOSVolumeSource
    globals()['V1VsphereVirtualDiskVolumeSource'] = V1VsphereVirtualDiskVolumeSource


class V1Volume(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    additional_properties_type = None

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'name': (str,),  # noqa: E501
            'aws_elastic_block_store': (V1AWSElasticBlockStoreVolumeSource,),  # noqa: E501
            'azure_disk': (V1AzureDiskVolumeSource,),  # noqa: E501
            'azure_file': (V1AzureFileVolumeSource,),  # noqa: E501
            'cephfs': (V1CephFSVolumeSource,),  # noqa: E501
            'cinder': (V1CinderVolumeSource,),  # noqa: E501
            'config_map': (V1ConfigMapVolumeSource,),  # noqa: E501
            'csi': (V1CSIVolumeSource,),  # noqa: E501
            'downward_api': (V1DownwardAPIVolumeSource,),  # noqa: E501
            'empty_dir': (V1EmptyDirVolumeSource,),  # noqa: E501
            'fc': (V1FCVolumeSource,),  # noqa: E501
            'flex_volume': (V1FlexVolumeSource,),  # noqa: E501
            'flocker': (V1FlockerVolumeSource,),  # noqa: E501
            'gce_persistent_disk': (V1GCEPersistentDiskVolumeSource,),  # noqa: E501
            'git_repo': (V1GitRepoVolumeSource,),  # noqa: E501
            'glusterfs': (V1GlusterfsVolumeSource,),  # noqa: E501
            'host_path': (V1HostPathVolumeSource,),  # noqa: E501
            'iscsi': (V1ISCSIVolumeSource,),  # noqa: E501
            'nfs': (V1NFSVolumeSource,),  # noqa: E501
            'persistent_volume_claim': (V1PersistentVolumeClaimVolumeSource,),  # noqa: E501
            'photon_persistent_disk': (V1PhotonPersistentDiskVolumeSource,),  # noqa: E501
            'portworx_volume': (V1PortworxVolumeSource,),  # noqa: E501
            'projected': (V1ProjectedVolumeSource,),  # noqa: E501
            'quobyte': (V1QuobyteVolumeSource,),  # noqa: E501
            'rbd': (V1RBDVolumeSource,),  # noqa: E501
            'scale_io': (V1ScaleIOVolumeSource,),  # noqa: E501
            'secret': (V1SecretVolumeSource,),  # noqa: E501
            'storageos': (V1StorageOSVolumeSource,),  # noqa: E501
            'vsphere_volume': (V1VsphereVirtualDiskVolumeSource,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'name': 'name',  # noqa: E501
        'aws_elastic_block_store': 'awsElasticBlockStore',  # noqa: E501
        'azure_disk': 'azureDisk',  # noqa: E501
        'azure_file': 'azureFile',  # noqa: E501
        'cephfs': 'cephfs',  # noqa: E501
        'cinder': 'cinder',  # noqa: E501
        'config_map': 'configMap',  # noqa: E501
        'csi': 'csi',  # noqa: E501
        'downward_api': 'downwardAPI',  # noqa: E501
        'empty_dir': 'emptyDir',  # noqa: E501
        'fc': 'fc',  # noqa: E501
        'flex_volume': 'flexVolume',  # noqa: E501
        'flocker': 'flocker',  # noqa: E501
        'gce_persistent_disk': 'gcePersistentDisk',  # noqa: E501
        'git_repo': 'gitRepo',  # noqa: E501
        'glusterfs': 'glusterfs',  # noqa: E501
        'host_path': 'hostPath',  # noqa: E501
        'iscsi': 'iscsi',  # noqa: E501
        'nfs': 'nfs',  # noqa: E501
        'persistent_volume_claim': 'persistentVolumeClaim',  # noqa: E501
        'photon_persistent_disk': 'photonPersistentDisk',  # noqa: E501
        'portworx_volume': 'portworxVolume',  # noqa: E501
        'projected': 'projected',  # noqa: E501
        'quobyte': 'quobyte',  # noqa: E501
        'rbd': 'rbd',  # noqa: E501
        'scale_io': 'scaleIO',  # noqa: E501
        'secret': 'secret',  # noqa: E501
        'storageos': 'storageos',  # noqa: E501
        'vsphere_volume': 'vsphereVolume',  # noqa: E501
    }

    _composed_schemas = {}

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, name, *args, **kwargs):  # noqa: E501
        """V1Volume - a model defined in OpenAPI

        Args:
            name (str): Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            aws_elastic_block_store (V1AWSElasticBlockStoreVolumeSource): [optional]  # noqa: E501
            azure_disk (V1AzureDiskVolumeSource): [optional]  # noqa: E501
            azure_file (V1AzureFileVolumeSource): [optional]  # noqa: E501
            cephfs (V1CephFSVolumeSource): [optional]  # noqa: E501
            cinder (V1CinderVolumeSource): [optional]  # noqa: E501
            config_map (V1ConfigMapVolumeSource): [optional]  # noqa: E501
            csi (V1CSIVolumeSource): [optional]  # noqa: E501
            downward_api (V1DownwardAPIVolumeSource): [optional]  # noqa: E501
            empty_dir (V1EmptyDirVolumeSource): [optional]  # noqa: E501
            fc (V1FCVolumeSource): [optional]  # noqa: E501
            flex_volume (V1FlexVolumeSource): [optional]  # noqa: E501
            flocker (V1FlockerVolumeSource): [optional]  # noqa: E501
            gce_persistent_disk (V1GCEPersistentDiskVolumeSource): [optional]  # noqa: E501
            git_repo (V1GitRepoVolumeSource): [optional]  # noqa: E501
            glusterfs (V1GlusterfsVolumeSource): [optional]  # noqa: E501
            host_path (V1HostPathVolumeSource): [optional]  # noqa: E501
            iscsi (V1ISCSIVolumeSource): [optional]  # noqa: E501
            nfs (V1NFSVolumeSource): [optional]  # noqa: E501
            persistent_volume_claim (V1PersistentVolumeClaimVolumeSource): [optional]  # noqa: E501
            photon_persistent_disk (V1PhotonPersistentDiskVolumeSource): [optional]  # noqa: E501
            portworx_volume (V1PortworxVolumeSource): [optional]  # noqa: E501
            projected (V1ProjectedVolumeSource): [optional]  # noqa: E501
            quobyte (V1QuobyteVolumeSource): [optional]  # noqa: E501
            rbd (V1RBDVolumeSource): [optional]  # noqa: E501
            scale_io (V1ScaleIOVolumeSource): [optional]  # noqa: E501
            secret (V1SecretVolumeSource): [optional]  # noqa: E501
            storageos (V1StorageOSVolumeSource): [optional]  # noqa: E501
            vsphere_volume (V1VsphereVirtualDiskVolumeSource): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.name = name
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
