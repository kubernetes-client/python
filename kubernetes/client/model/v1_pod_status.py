# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class V1PodStatus(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    PodStatus represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.
    """


    class MetaOapg:
        
        class properties:
            
            
            class conditions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1PodCondition']:
                        return V1PodCondition
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1PodCondition'], typing.List['V1PodCondition']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'conditions':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1PodCondition':
                    return super().__getitem__(i)
            
            
            class containerStatuses(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1ContainerStatus']:
                        return V1ContainerStatus
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1ContainerStatus'], typing.List['V1ContainerStatus']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'containerStatuses':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1ContainerStatus':
                    return super().__getitem__(i)
            
            
            class ephemeralContainerStatuses(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1ContainerStatus']:
                        return V1ContainerStatus
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1ContainerStatus'], typing.List['V1ContainerStatus']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ephemeralContainerStatuses':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1ContainerStatus':
                    return super().__getitem__(i)
            hostIP = schemas.StrSchema
            
            
            class initContainerStatuses(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1ContainerStatus']:
                        return V1ContainerStatus
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1ContainerStatus'], typing.List['V1ContainerStatus']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'initContainerStatuses':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1ContainerStatus':
                    return super().__getitem__(i)
            message = schemas.StrSchema
            nominatedNodeName = schemas.StrSchema
            phase = schemas.StrSchema
            podIP = schemas.StrSchema
            
            
            class podIPs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['V1PodIP']:
                        return V1PodIP
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['V1PodIP'], typing.List['V1PodIP']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'podIPs':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'V1PodIP':
                    return super().__getitem__(i)
            qosClass = schemas.StrSchema
            reason = schemas.StrSchema
            startTime = schemas.DateTimeSchema
            __annotations__ = {
                "conditions": conditions,
                "containerStatuses": containerStatuses,
                "ephemeralContainerStatuses": ephemeralContainerStatuses,
                "hostIP": hostIP,
                "initContainerStatuses": initContainerStatuses,
                "message": message,
                "nominatedNodeName": nominatedNodeName,
                "phase": phase,
                "podIP": podIP,
                "podIPs": podIPs,
                "qosClass": qosClass,
                "reason": reason,
                "startTime": startTime,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["conditions"]) -> MetaOapg.properties.conditions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["containerStatuses"]) -> MetaOapg.properties.containerStatuses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ephemeralContainerStatuses"]) -> MetaOapg.properties.ephemeralContainerStatuses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostIP"]) -> MetaOapg.properties.hostIP: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["initContainerStatuses"]) -> MetaOapg.properties.initContainerStatuses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["message"]) -> MetaOapg.properties.message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nominatedNodeName"]) -> MetaOapg.properties.nominatedNodeName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phase"]) -> MetaOapg.properties.phase: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["podIP"]) -> MetaOapg.properties.podIP: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["podIPs"]) -> MetaOapg.properties.podIPs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qosClass"]) -> MetaOapg.properties.qosClass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startTime"]) -> MetaOapg.properties.startTime: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["conditions", "containerStatuses", "ephemeralContainerStatuses", "hostIP", "initContainerStatuses", "message", "nominatedNodeName", "phase", "podIP", "podIPs", "qosClass", "reason", "startTime", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["conditions"]) -> typing.Union[MetaOapg.properties.conditions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["containerStatuses"]) -> typing.Union[MetaOapg.properties.containerStatuses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ephemeralContainerStatuses"]) -> typing.Union[MetaOapg.properties.ephemeralContainerStatuses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostIP"]) -> typing.Union[MetaOapg.properties.hostIP, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["initContainerStatuses"]) -> typing.Union[MetaOapg.properties.initContainerStatuses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["message"]) -> typing.Union[MetaOapg.properties.message, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nominatedNodeName"]) -> typing.Union[MetaOapg.properties.nominatedNodeName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phase"]) -> typing.Union[MetaOapg.properties.phase, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["podIP"]) -> typing.Union[MetaOapg.properties.podIP, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["podIPs"]) -> typing.Union[MetaOapg.properties.podIPs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qosClass"]) -> typing.Union[MetaOapg.properties.qosClass, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> typing.Union[MetaOapg.properties.reason, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startTime"]) -> typing.Union[MetaOapg.properties.startTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["conditions", "containerStatuses", "ephemeralContainerStatuses", "hostIP", "initContainerStatuses", "message", "nominatedNodeName", "phase", "podIP", "podIPs", "qosClass", "reason", "startTime", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        conditions: typing.Union[MetaOapg.properties.conditions, list, tuple, schemas.Unset] = schemas.unset,
        containerStatuses: typing.Union[MetaOapg.properties.containerStatuses, list, tuple, schemas.Unset] = schemas.unset,
        ephemeralContainerStatuses: typing.Union[MetaOapg.properties.ephemeralContainerStatuses, list, tuple, schemas.Unset] = schemas.unset,
        hostIP: typing.Union[MetaOapg.properties.hostIP, str, schemas.Unset] = schemas.unset,
        initContainerStatuses: typing.Union[MetaOapg.properties.initContainerStatuses, list, tuple, schemas.Unset] = schemas.unset,
        message: typing.Union[MetaOapg.properties.message, str, schemas.Unset] = schemas.unset,
        nominatedNodeName: typing.Union[MetaOapg.properties.nominatedNodeName, str, schemas.Unset] = schemas.unset,
        phase: typing.Union[MetaOapg.properties.phase, str, schemas.Unset] = schemas.unset,
        podIP: typing.Union[MetaOapg.properties.podIP, str, schemas.Unset] = schemas.unset,
        podIPs: typing.Union[MetaOapg.properties.podIPs, list, tuple, schemas.Unset] = schemas.unset,
        qosClass: typing.Union[MetaOapg.properties.qosClass, str, schemas.Unset] = schemas.unset,
        reason: typing.Union[MetaOapg.properties.reason, str, schemas.Unset] = schemas.unset,
        startTime: typing.Union[MetaOapg.properties.startTime, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1PodStatus':
        return super().__new__(
            cls,
            *args,
            conditions=conditions,
            containerStatuses=containerStatuses,
            ephemeralContainerStatuses=ephemeralContainerStatuses,
            hostIP=hostIP,
            initContainerStatuses=initContainerStatuses,
            message=message,
            nominatedNodeName=nominatedNodeName,
            phase=phase,
            podIP=podIP,
            podIPs=podIPs,
            qosClass=qosClass,
            reason=reason,
            startTime=startTime,
            _configuration=_configuration,
            **kwargs,
        )

from kubernetes.client.model.v1_container_status import V1ContainerStatus
from kubernetes.client.model.v1_pod_condition import V1PodCondition
from kubernetes.client.model.v1_pod_ip import V1PodIP
