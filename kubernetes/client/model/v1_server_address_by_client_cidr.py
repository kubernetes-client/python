# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.25
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from kubernetes.client import schemas  # noqa: F401


class V1ServerAddressByClientCIDR(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    ServerAddressByClientCIDR helps the client to determine the server address that they should use, depending on the clientCIDR that they match.
    """


    class MetaOapg:
        required = {
            "clientCIDR",
            "serverAddress",
        }
        
        class properties:
            clientCIDR = schemas.StrSchema
            serverAddress = schemas.StrSchema
            __annotations__ = {
                "clientCIDR": clientCIDR,
                "serverAddress": serverAddress,
            }
    
    clientCIDR: MetaOapg.properties.clientCIDR
    serverAddress: MetaOapg.properties.serverAddress
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clientCIDR"]) -> MetaOapg.properties.clientCIDR: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serverAddress"]) -> MetaOapg.properties.serverAddress: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["clientCIDR", "serverAddress", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clientCIDR"]) -> MetaOapg.properties.clientCIDR: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serverAddress"]) -> MetaOapg.properties.serverAddress: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["clientCIDR", "serverAddress", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        clientCIDR: typing.Union[MetaOapg.properties.clientCIDR, str, ],
        serverAddress: typing.Union[MetaOapg.properties.serverAddress, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'V1ServerAddressByClientCIDR':
        return super().__new__(
            cls,
            *args,
            clientCIDR=clientCIDR,
            serverAddress=serverAddress,
            _configuration=_configuration,
            **kwargs,
        )
