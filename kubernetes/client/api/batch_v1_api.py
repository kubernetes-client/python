"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.23
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from kubernetes.client.api_client import ApiClient, Endpoint as _Endpoint
from kubernetes.client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from kubernetes.client.model.v1_api_resource_list import V1APIResourceList
from kubernetes.client.model.v1_cron_job import V1CronJob
from kubernetes.client.model.v1_cron_job_list import V1CronJobList
from kubernetes.client.model.v1_delete_options import V1DeleteOptions
from kubernetes.client.model.v1_job import V1Job
from kubernetes.client.model.v1_job_list import V1JobList
from kubernetes.client.model.v1_status import V1Status


class BatchV1Api(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_namespaced_cron_job_endpoint = _Endpoint(
            settings={
                'response_type': (V1CronJob,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/batch/v1/namespaces/{namespace}/cronjobs',
                'operation_id': 'create_namespaced_cron_job',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'body':
                        (V1CronJob,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_namespaced_job_endpoint = _Endpoint(
            settings={
                'response_type': (V1Job,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/batch/v1/namespaces/{namespace}/jobs',
                'operation_id': 'create_namespaced_job',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'body':
                        (V1Job,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_collection_namespaced_cron_job_endpoint = _Endpoint(
            settings={
                'response_type': (V1Status,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/batch/v1/namespaces/{namespace}/cronjobs',
                'operation_id': 'delete_collection_namespaced_cron_job',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'pretty',
                    '_continue',
                    'dry_run',
                    'field_selector',
                    'grace_period_seconds',
                    'label_selector',
                    'limit',
                    'orphan_dependents',
                    'propagation_policy',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'body',
                ],
                'required': [
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    '_continue':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_selector':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    '_continue': 'continue',
                    'dry_run': 'dryRun',
                    'field_selector': 'fieldSelector',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                },
                'location_map': {
                    'namespace': 'path',
                    'pretty': 'query',
                    '_continue': 'query',
                    'dry_run': 'query',
                    'field_selector': 'query',
                    'grace_period_seconds': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_collection_namespaced_job_endpoint = _Endpoint(
            settings={
                'response_type': (V1Status,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/batch/v1/namespaces/{namespace}/jobs',
                'operation_id': 'delete_collection_namespaced_job',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'pretty',
                    '_continue',
                    'dry_run',
                    'field_selector',
                    'grace_period_seconds',
                    'label_selector',
                    'limit',
                    'orphan_dependents',
                    'propagation_policy',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'body',
                ],
                'required': [
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    '_continue':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_selector':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    '_continue': 'continue',
                    'dry_run': 'dryRun',
                    'field_selector': 'fieldSelector',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                },
                'location_map': {
                    'namespace': 'path',
                    'pretty': 'query',
                    '_continue': 'query',
                    'dry_run': 'query',
                    'field_selector': 'query',
                    'grace_period_seconds': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_namespaced_cron_job_endpoint = _Endpoint(
            settings={
                'response_type': (V1Status,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}',
                'operation_id': 'delete_namespaced_cron_job',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                    'dry_run',
                    'grace_period_seconds',
                    'orphan_dependents',
                    'propagation_policy',
                    'body',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'grace_period_seconds': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_namespaced_job_endpoint = _Endpoint(
            settings={
                'response_type': (V1Status,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/batch/v1/namespaces/{namespace}/jobs/{name}',
                'operation_id': 'delete_namespaced_job',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                    'dry_run',
                    'grace_period_seconds',
                    'orphan_dependents',
                    'propagation_policy',
                    'body',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'grace_period_seconds': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_api_resources_endpoint = _Endpoint(
            settings={
                'response_type': (V1APIResourceList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/batch/v1/',
                'operation_id': 'get_api_resources',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_cron_job_for_all_namespaces_endpoint = _Endpoint(
            settings={
                'response_type': (V1CronJobList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/batch/v1/cronjobs',
                'operation_id': 'list_cron_job_for_all_namespaces',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'pretty',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'pretty':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'pretty': 'pretty',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'pretty': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_job_for_all_namespaces_endpoint = _Endpoint(
            settings={
                'response_type': (V1JobList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/batch/v1/jobs',
                'operation_id': 'list_job_for_all_namespaces',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'pretty',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'pretty':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'pretty': 'pretty',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'pretty': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_namespaced_cron_job_endpoint = _Endpoint(
            settings={
                'response_type': (V1CronJobList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/batch/v1/namespaces/{namespace}/cronjobs',
                'operation_id': 'list_namespaced_cron_job',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'pretty',
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'namespace': 'path',
                    'pretty': 'query',
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_namespaced_job_endpoint = _Endpoint(
            settings={
                'response_type': (V1JobList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/batch/v1/namespaces/{namespace}/jobs',
                'operation_id': 'list_namespaced_job',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'pretty',
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'namespace': 'path',
                    'pretty': 'query',
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.patch_namespaced_cron_job_endpoint = _Endpoint(
            settings={
                'response_type': (V1CronJob,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}',
                'operation_id': 'patch_namespaced_cron_job',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.patch_namespaced_cron_job_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1CronJob,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}/status',
                'operation_id': 'patch_namespaced_cron_job_status',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.patch_namespaced_job_endpoint = _Endpoint(
            settings={
                'response_type': (V1Job,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/batch/v1/namespaces/{namespace}/jobs/{name}',
                'operation_id': 'patch_namespaced_job',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.patch_namespaced_job_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1Job,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status',
                'operation_id': 'patch_namespaced_job_status',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.read_namespaced_cron_job_endpoint = _Endpoint(
            settings={
                'response_type': (V1CronJob,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}',
                'operation_id': 'read_namespaced_cron_job',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_namespaced_cron_job_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1CronJob,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}/status',
                'operation_id': 'read_namespaced_cron_job_status',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_namespaced_job_endpoint = _Endpoint(
            settings={
                'response_type': (V1Job,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/batch/v1/namespaces/{namespace}/jobs/{name}',
                'operation_id': 'read_namespaced_job',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_namespaced_job_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1Job,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status',
                'operation_id': 'read_namespaced_job_status',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_namespaced_cron_job_endpoint = _Endpoint(
            settings={
                'response_type': (V1CronJob,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}',
                'operation_id': 'replace_namespaced_cron_job',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (V1CronJob,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_namespaced_cron_job_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1CronJob,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/batch/v1/namespaces/{namespace}/cronjobs/{name}/status',
                'operation_id': 'replace_namespaced_cron_job_status',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (V1CronJob,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_namespaced_job_endpoint = _Endpoint(
            settings={
                'response_type': (V1Job,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/batch/v1/namespaces/{namespace}/jobs/{name}',
                'operation_id': 'replace_namespaced_job',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (V1Job,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_namespaced_job_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1Job,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status',
                'operation_id': 'replace_namespaced_job_status',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (V1Job,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def create_namespaced_cron_job(
        self,
        namespace,
        body,
        **kwargs
    ):
        """create_namespaced_cron_job  # noqa: E501

        create a CronJob  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_namespaced_cron_job(namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1CronJob):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1CronJob
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.create_namespaced_cron_job_endpoint.call_with_http_info(**kwargs)

    def create_namespaced_job(
        self,
        namespace,
        body,
        **kwargs
    ):
        """create_namespaced_job  # noqa: E501

        create a Job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_namespaced_job(namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1Job):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Job
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.create_namespaced_job_endpoint.call_with_http_info(**kwargs)

    def delete_collection_namespaced_cron_job(
        self,
        namespace,
        **kwargs
    ):
        """delete_collection_namespaced_cron_job  # noqa: E501

        delete collection of CronJob  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_collection_namespaced_cron_job(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Status
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        return self.delete_collection_namespaced_cron_job_endpoint.call_with_http_info(**kwargs)

    def delete_collection_namespaced_job(
        self,
        namespace,
        **kwargs
    ):
        """delete_collection_namespaced_job  # noqa: E501

        delete collection of Job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_collection_namespaced_job(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Status
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        return self.delete_collection_namespaced_job_endpoint.call_with_http_info(**kwargs)

    def delete_namespaced_cron_job(
        self,
        name,
        namespace,
        **kwargs
    ):
        """delete_namespaced_cron_job  # noqa: E501

        delete a CronJob  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_namespaced_cron_job(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the CronJob
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Status
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.delete_namespaced_cron_job_endpoint.call_with_http_info(**kwargs)

    def delete_namespaced_job(
        self,
        name,
        namespace,
        **kwargs
    ):
        """delete_namespaced_job  # noqa: E501

        delete a Job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_namespaced_job(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Job
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Status
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.delete_namespaced_job_endpoint.call_with_http_info(**kwargs)

    def get_api_resources(
        self,
        **kwargs
    ):
        """get_api_resources  # noqa: E501

        get available resources  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_api_resources(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1APIResourceList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.get_api_resources_endpoint.call_with_http_info(**kwargs)

    def list_cron_job_for_all_namespaces(
        self,
        **kwargs
    ):
        """list_cron_job_for_all_namespaces  # noqa: E501

        list or watch objects of kind CronJob  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_cron_job_for_all_namespaces(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1CronJobList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_cron_job_for_all_namespaces_endpoint.call_with_http_info(**kwargs)

    def list_job_for_all_namespaces(
        self,
        **kwargs
    ):
        """list_job_for_all_namespaces  # noqa: E501

        list or watch objects of kind Job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_job_for_all_namespaces(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1JobList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_job_for_all_namespaces_endpoint.call_with_http_info(**kwargs)

    def list_namespaced_cron_job(
        self,
        namespace,
        **kwargs
    ):
        """list_namespaced_cron_job  # noqa: E501

        list or watch objects of kind CronJob  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_namespaced_cron_job(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1CronJobList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        return self.list_namespaced_cron_job_endpoint.call_with_http_info(**kwargs)

    def list_namespaced_job(
        self,
        namespace,
        **kwargs
    ):
        """list_namespaced_job  # noqa: E501

        list or watch objects of kind Job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_namespaced_job(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1JobList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        return self.list_namespaced_job_endpoint.call_with_http_info(**kwargs)

    def patch_namespaced_cron_job(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """patch_namespaced_cron_job  # noqa: E501

        partially update the specified CronJob  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_namespaced_cron_job(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the CronJob
            namespace (str): object name and auth scope, such as for teams and projects
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1CronJob
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.patch_namespaced_cron_job_endpoint.call_with_http_info(**kwargs)

    def patch_namespaced_cron_job_status(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """patch_namespaced_cron_job_status  # noqa: E501

        partially update status of the specified CronJob  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_namespaced_cron_job_status(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the CronJob
            namespace (str): object name and auth scope, such as for teams and projects
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1CronJob
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.patch_namespaced_cron_job_status_endpoint.call_with_http_info(**kwargs)

    def patch_namespaced_job(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """patch_namespaced_job  # noqa: E501

        partially update the specified Job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_namespaced_job(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Job
            namespace (str): object name and auth scope, such as for teams and projects
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Job
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.patch_namespaced_job_endpoint.call_with_http_info(**kwargs)

    def patch_namespaced_job_status(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """patch_namespaced_job_status  # noqa: E501

        partially update status of the specified Job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_namespaced_job_status(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Job
            namespace (str): object name and auth scope, such as for teams and projects
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Job
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.patch_namespaced_job_status_endpoint.call_with_http_info(**kwargs)

    def read_namespaced_cron_job(
        self,
        name,
        namespace,
        **kwargs
    ):
        """read_namespaced_cron_job  # noqa: E501

        read the specified CronJob  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_namespaced_cron_job(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the CronJob
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1CronJob
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.read_namespaced_cron_job_endpoint.call_with_http_info(**kwargs)

    def read_namespaced_cron_job_status(
        self,
        name,
        namespace,
        **kwargs
    ):
        """read_namespaced_cron_job_status  # noqa: E501

        read status of the specified CronJob  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_namespaced_cron_job_status(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the CronJob
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1CronJob
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.read_namespaced_cron_job_status_endpoint.call_with_http_info(**kwargs)

    def read_namespaced_job(
        self,
        name,
        namespace,
        **kwargs
    ):
        """read_namespaced_job  # noqa: E501

        read the specified Job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_namespaced_job(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Job
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Job
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.read_namespaced_job_endpoint.call_with_http_info(**kwargs)

    def read_namespaced_job_status(
        self,
        name,
        namespace,
        **kwargs
    ):
        """read_namespaced_job_status  # noqa: E501

        read status of the specified Job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_namespaced_job_status(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Job
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Job
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.read_namespaced_job_status_endpoint.call_with_http_info(**kwargs)

    def replace_namespaced_cron_job(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """replace_namespaced_cron_job  # noqa: E501

        replace the specified CronJob  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_namespaced_cron_job(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the CronJob
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1CronJob):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1CronJob
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.replace_namespaced_cron_job_endpoint.call_with_http_info(**kwargs)

    def replace_namespaced_cron_job_status(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """replace_namespaced_cron_job_status  # noqa: E501

        replace status of the specified CronJob  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_namespaced_cron_job_status(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the CronJob
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1CronJob):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1CronJob
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.replace_namespaced_cron_job_status_endpoint.call_with_http_info(**kwargs)

    def replace_namespaced_job(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """replace_namespaced_job  # noqa: E501

        replace the specified Job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_namespaced_job(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Job
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1Job):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Job
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.replace_namespaced_job_endpoint.call_with_http_info(**kwargs)

    def replace_namespaced_job_status(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """replace_namespaced_job_status  # noqa: E501

        replace status of the specified Job  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_namespaced_job_status(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Job
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1Job):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Job
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.replace_namespaced_job_status_endpoint.call_with_http_info(**kwargs)

