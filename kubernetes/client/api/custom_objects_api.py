"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.18
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from kubernetes.client.api_client import ApiClient, Endpoint as _Endpoint
from kubernetes.client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from kubernetes.client.model.v1_delete_options import V1DeleteOptions


class CustomObjectsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __create_cluster_custom_object(
            self,
            group,
            version,
            plural,
            body,
            **kwargs
        ):
            """create_cluster_custom_object  # noqa: E501

            Creates a cluster scoped Custom object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_cluster_custom_object(group, version, plural, body, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): The custom resource's group name
                version (str): The custom resource's version
                plural (str): The custom resource's plural name. For TPRs this would be lowercase plural kind.
                body ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The JSON schema of the Resource to create.

            Keyword Args:
                pretty (str): If 'true', then the output is pretty printed.. [optional]
                dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
                field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['version'] = \
                version
            kwargs['plural'] = \
                plural
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.create_cluster_custom_object = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/{group}/{version}/{plural}',
                'operation_id': 'create_cluster_custom_object',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'version',
                    'plural',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                ],
                'required': [
                    'group',
                    'version',
                    'plural',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'version':
                        (str,),
                    'plural':
                        (str,),
                    'body':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                },
                'attribute_map': {
                    'group': 'group',
                    'version': 'version',
                    'plural': 'plural',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                },
                'location_map': {
                    'group': 'path',
                    'version': 'path',
                    'plural': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__create_cluster_custom_object
        )

        def __create_namespaced_custom_object(
            self,
            group,
            version,
            namespace,
            plural,
            body,
            **kwargs
        ):
            """create_namespaced_custom_object  # noqa: E501

            Creates a namespace scoped Custom object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.create_namespaced_custom_object(group, version, namespace, plural, body, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): The custom resource's group name
                version (str): The custom resource's version
                namespace (str): The custom resource's namespace
                plural (str): The custom resource's plural name. For TPRs this would be lowercase plural kind.
                body ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The JSON schema of the Resource to create.

            Keyword Args:
                pretty (str): If 'true', then the output is pretty printed.. [optional]
                dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
                field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['version'] = \
                version
            kwargs['namespace'] = \
                namespace
            kwargs['plural'] = \
                plural
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.create_namespaced_custom_object = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/{group}/{version}/namespaces/{namespace}/{plural}',
                'operation_id': 'create_namespaced_custom_object',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'version',
                    'namespace',
                    'plural',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                ],
                'required': [
                    'group',
                    'version',
                    'namespace',
                    'plural',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'version':
                        (str,),
                    'namespace':
                        (str,),
                    'plural':
                        (str,),
                    'body':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                },
                'attribute_map': {
                    'group': 'group',
                    'version': 'version',
                    'namespace': 'namespace',
                    'plural': 'plural',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                },
                'location_map': {
                    'group': 'path',
                    'version': 'path',
                    'namespace': 'path',
                    'plural': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__create_namespaced_custom_object
        )

        def __delete_cluster_custom_object(
            self,
            group,
            version,
            plural,
            name,
            **kwargs
        ):
            """delete_cluster_custom_object  # noqa: E501

            Deletes the specified cluster scoped custom object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_cluster_custom_object(group, version, plural, name, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): the custom resource's group
                version (str): the custom resource's version
                plural (str): the custom object's plural name. For TPRs this would be lowercase plural kind.
                name (str): the custom object's name

            Keyword Args:
                grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
                orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
                propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.. [optional]
                dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
                body (V1DeleteOptions): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['version'] = \
                version
            kwargs['plural'] = \
                plural
            kwargs['name'] = \
                name
            return self.call_with_http_info(**kwargs)

        self.delete_cluster_custom_object = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/{group}/{version}/{plural}/{name}',
                'operation_id': 'delete_cluster_custom_object',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'version',
                    'plural',
                    'name',
                    'grace_period_seconds',
                    'orphan_dependents',
                    'propagation_policy',
                    'dry_run',
                    'body',
                ],
                'required': [
                    'group',
                    'version',
                    'plural',
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'version':
                        (str,),
                    'plural':
                        (str,),
                    'name':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'dry_run':
                        (str,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'group': 'group',
                    'version': 'version',
                    'plural': 'plural',
                    'name': 'name',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                    'dry_run': 'dryRun',
                },
                'location_map': {
                    'group': 'path',
                    'version': 'path',
                    'plural': 'path',
                    'name': 'path',
                    'grace_period_seconds': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'dry_run': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_cluster_custom_object
        )

        def __delete_collection_cluster_custom_object(
            self,
            group,
            version,
            plural,
            **kwargs
        ):
            """delete_collection_cluster_custom_object  # noqa: E501

            Delete collection of cluster scoped custom objects  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_collection_cluster_custom_object(group, version, plural, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): The custom resource's group name
                version (str): The custom resource's version
                plural (str): The custom resource's plural name. For TPRs this would be lowercase plural kind.

            Keyword Args:
                pretty (str): If 'true', then the output is pretty printed.. [optional]
                grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
                orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
                propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.. [optional]
                dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
                body (V1DeleteOptions): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['version'] = \
                version
            kwargs['plural'] = \
                plural
            return self.call_with_http_info(**kwargs)

        self.delete_collection_cluster_custom_object = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/{group}/{version}/{plural}',
                'operation_id': 'delete_collection_cluster_custom_object',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'version',
                    'plural',
                    'pretty',
                    'grace_period_seconds',
                    'orphan_dependents',
                    'propagation_policy',
                    'dry_run',
                    'body',
                ],
                'required': [
                    'group',
                    'version',
                    'plural',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'version':
                        (str,),
                    'plural':
                        (str,),
                    'pretty':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'dry_run':
                        (str,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'group': 'group',
                    'version': 'version',
                    'plural': 'plural',
                    'pretty': 'pretty',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                    'dry_run': 'dryRun',
                },
                'location_map': {
                    'group': 'path',
                    'version': 'path',
                    'plural': 'path',
                    'pretty': 'query',
                    'grace_period_seconds': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'dry_run': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_collection_cluster_custom_object
        )

        def __delete_collection_namespaced_custom_object(
            self,
            group,
            version,
            namespace,
            plural,
            **kwargs
        ):
            """delete_collection_namespaced_custom_object  # noqa: E501

            Delete collection of namespace scoped custom objects  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_collection_namespaced_custom_object(group, version, namespace, plural, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): The custom resource's group name
                version (str): The custom resource's version
                namespace (str): The custom resource's namespace
                plural (str): The custom resource's plural name. For TPRs this would be lowercase plural kind.

            Keyword Args:
                pretty (str): If 'true', then the output is pretty printed.. [optional]
                grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
                orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
                propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.. [optional]
                dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
                body (V1DeleteOptions): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['version'] = \
                version
            kwargs['namespace'] = \
                namespace
            kwargs['plural'] = \
                plural
            return self.call_with_http_info(**kwargs)

        self.delete_collection_namespaced_custom_object = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/{group}/{version}/namespaces/{namespace}/{plural}',
                'operation_id': 'delete_collection_namespaced_custom_object',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'version',
                    'namespace',
                    'plural',
                    'pretty',
                    'grace_period_seconds',
                    'orphan_dependents',
                    'propagation_policy',
                    'dry_run',
                    'body',
                ],
                'required': [
                    'group',
                    'version',
                    'namespace',
                    'plural',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'version':
                        (str,),
                    'namespace':
                        (str,),
                    'plural':
                        (str,),
                    'pretty':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'dry_run':
                        (str,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'group': 'group',
                    'version': 'version',
                    'namespace': 'namespace',
                    'plural': 'plural',
                    'pretty': 'pretty',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                    'dry_run': 'dryRun',
                },
                'location_map': {
                    'group': 'path',
                    'version': 'path',
                    'namespace': 'path',
                    'plural': 'path',
                    'pretty': 'query',
                    'grace_period_seconds': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'dry_run': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_collection_namespaced_custom_object
        )

        def __delete_namespaced_custom_object(
            self,
            group,
            version,
            namespace,
            plural,
            name,
            **kwargs
        ):
            """delete_namespaced_custom_object  # noqa: E501

            Deletes the specified namespace scoped custom object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.delete_namespaced_custom_object(group, version, namespace, plural, name, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): the custom resource's group
                version (str): the custom resource's version
                namespace (str): The custom resource's namespace
                plural (str): the custom resource's plural name. For TPRs this would be lowercase plural kind.
                name (str): the custom object's name

            Keyword Args:
                grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
                orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
                propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy.. [optional]
                dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
                body (V1DeleteOptions): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['version'] = \
                version
            kwargs['namespace'] = \
                namespace
            kwargs['plural'] = \
                plural
            kwargs['name'] = \
                name
            return self.call_with_http_info(**kwargs)

        self.delete_namespaced_custom_object = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}',
                'operation_id': 'delete_namespaced_custom_object',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'version',
                    'namespace',
                    'plural',
                    'name',
                    'grace_period_seconds',
                    'orphan_dependents',
                    'propagation_policy',
                    'dry_run',
                    'body',
                ],
                'required': [
                    'group',
                    'version',
                    'namespace',
                    'plural',
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'version':
                        (str,),
                    'namespace':
                        (str,),
                    'plural':
                        (str,),
                    'name':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'dry_run':
                        (str,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'group': 'group',
                    'version': 'version',
                    'namespace': 'namespace',
                    'plural': 'plural',
                    'name': 'name',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                    'dry_run': 'dryRun',
                },
                'location_map': {
                    'group': 'path',
                    'version': 'path',
                    'namespace': 'path',
                    'plural': 'path',
                    'name': 'path',
                    'grace_period_seconds': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'dry_run': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__delete_namespaced_custom_object
        )

        def __get_cluster_custom_object(
            self,
            group,
            version,
            plural,
            name,
            **kwargs
        ):
            """get_cluster_custom_object  # noqa: E501

            Returns a cluster scoped custom object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_cluster_custom_object(group, version, plural, name, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): the custom resource's group
                version (str): the custom resource's version
                plural (str): the custom object's plural name. For TPRs this would be lowercase plural kind.
                name (str): the custom object's name

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['version'] = \
                version
            kwargs['plural'] = \
                plural
            kwargs['name'] = \
                name
            return self.call_with_http_info(**kwargs)

        self.get_cluster_custom_object = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/{group}/{version}/{plural}/{name}',
                'operation_id': 'get_cluster_custom_object',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'version',
                    'plural',
                    'name',
                ],
                'required': [
                    'group',
                    'version',
                    'plural',
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'version':
                        (str,),
                    'plural':
                        (str,),
                    'name':
                        (str,),
                },
                'attribute_map': {
                    'group': 'group',
                    'version': 'version',
                    'plural': 'plural',
                    'name': 'name',
                },
                'location_map': {
                    'group': 'path',
                    'version': 'path',
                    'plural': 'path',
                    'name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_cluster_custom_object
        )

        def __get_cluster_custom_object_scale(
            self,
            group,
            version,
            plural,
            name,
            **kwargs
        ):
            """get_cluster_custom_object_scale  # noqa: E501

            read scale of the specified custom object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_cluster_custom_object_scale(group, version, plural, name, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): the custom resource's group
                version (str): the custom resource's version
                plural (str): the custom resource's plural name. For TPRs this would be lowercase plural kind.
                name (str): the custom object's name

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['version'] = \
                version
            kwargs['plural'] = \
                plural
            kwargs['name'] = \
                name
            return self.call_with_http_info(**kwargs)

        self.get_cluster_custom_object_scale = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/{group}/{version}/{plural}/{name}/scale',
                'operation_id': 'get_cluster_custom_object_scale',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'version',
                    'plural',
                    'name',
                ],
                'required': [
                    'group',
                    'version',
                    'plural',
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'version':
                        (str,),
                    'plural':
                        (str,),
                    'name':
                        (str,),
                },
                'attribute_map': {
                    'group': 'group',
                    'version': 'version',
                    'plural': 'plural',
                    'name': 'name',
                },
                'location_map': {
                    'group': 'path',
                    'version': 'path',
                    'plural': 'path',
                    'name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_cluster_custom_object_scale
        )

        def __get_cluster_custom_object_status(
            self,
            group,
            version,
            plural,
            name,
            **kwargs
        ):
            """get_cluster_custom_object_status  # noqa: E501

            read status of the specified cluster scoped custom object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_cluster_custom_object_status(group, version, plural, name, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): the custom resource's group
                version (str): the custom resource's version
                plural (str): the custom resource's plural name. For TPRs this would be lowercase plural kind.
                name (str): the custom object's name

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['version'] = \
                version
            kwargs['plural'] = \
                plural
            kwargs['name'] = \
                name
            return self.call_with_http_info(**kwargs)

        self.get_cluster_custom_object_status = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/{group}/{version}/{plural}/{name}/status',
                'operation_id': 'get_cluster_custom_object_status',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'version',
                    'plural',
                    'name',
                ],
                'required': [
                    'group',
                    'version',
                    'plural',
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'version':
                        (str,),
                    'plural':
                        (str,),
                    'name':
                        (str,),
                },
                'attribute_map': {
                    'group': 'group',
                    'version': 'version',
                    'plural': 'plural',
                    'name': 'name',
                },
                'location_map': {
                    'group': 'path',
                    'version': 'path',
                    'plural': 'path',
                    'name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_cluster_custom_object_status
        )

        def __get_namespaced_custom_object(
            self,
            group,
            version,
            namespace,
            plural,
            name,
            **kwargs
        ):
            """get_namespaced_custom_object  # noqa: E501

            Returns a namespace scoped custom object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_namespaced_custom_object(group, version, namespace, plural, name, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): the custom resource's group
                version (str): the custom resource's version
                namespace (str): The custom resource's namespace
                plural (str): the custom resource's plural name. For TPRs this would be lowercase plural kind.
                name (str): the custom object's name

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['version'] = \
                version
            kwargs['namespace'] = \
                namespace
            kwargs['plural'] = \
                plural
            kwargs['name'] = \
                name
            return self.call_with_http_info(**kwargs)

        self.get_namespaced_custom_object = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}',
                'operation_id': 'get_namespaced_custom_object',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'version',
                    'namespace',
                    'plural',
                    'name',
                ],
                'required': [
                    'group',
                    'version',
                    'namespace',
                    'plural',
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'version':
                        (str,),
                    'namespace':
                        (str,),
                    'plural':
                        (str,),
                    'name':
                        (str,),
                },
                'attribute_map': {
                    'group': 'group',
                    'version': 'version',
                    'namespace': 'namespace',
                    'plural': 'plural',
                    'name': 'name',
                },
                'location_map': {
                    'group': 'path',
                    'version': 'path',
                    'namespace': 'path',
                    'plural': 'path',
                    'name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_namespaced_custom_object
        )

        def __get_namespaced_custom_object_scale(
            self,
            group,
            version,
            namespace,
            plural,
            name,
            **kwargs
        ):
            """get_namespaced_custom_object_scale  # noqa: E501

            read scale of the specified namespace scoped custom object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_namespaced_custom_object_scale(group, version, namespace, plural, name, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): the custom resource's group
                version (str): the custom resource's version
                namespace (str): The custom resource's namespace
                plural (str): the custom resource's plural name. For TPRs this would be lowercase plural kind.
                name (str): the custom object's name

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['version'] = \
                version
            kwargs['namespace'] = \
                namespace
            kwargs['plural'] = \
                plural
            kwargs['name'] = \
                name
            return self.call_with_http_info(**kwargs)

        self.get_namespaced_custom_object_scale = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/scale',
                'operation_id': 'get_namespaced_custom_object_scale',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'version',
                    'namespace',
                    'plural',
                    'name',
                ],
                'required': [
                    'group',
                    'version',
                    'namespace',
                    'plural',
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'version':
                        (str,),
                    'namespace':
                        (str,),
                    'plural':
                        (str,),
                    'name':
                        (str,),
                },
                'attribute_map': {
                    'group': 'group',
                    'version': 'version',
                    'namespace': 'namespace',
                    'plural': 'plural',
                    'name': 'name',
                },
                'location_map': {
                    'group': 'path',
                    'version': 'path',
                    'namespace': 'path',
                    'plural': 'path',
                    'name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_namespaced_custom_object_scale
        )

        def __get_namespaced_custom_object_status(
            self,
            group,
            version,
            namespace,
            plural,
            name,
            **kwargs
        ):
            """get_namespaced_custom_object_status  # noqa: E501

            read status of the specified namespace scoped custom object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_namespaced_custom_object_status(group, version, namespace, plural, name, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): the custom resource's group
                version (str): the custom resource's version
                namespace (str): The custom resource's namespace
                plural (str): the custom resource's plural name. For TPRs this would be lowercase plural kind.
                name (str): the custom object's name

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['version'] = \
                version
            kwargs['namespace'] = \
                namespace
            kwargs['plural'] = \
                plural
            kwargs['name'] = \
                name
            return self.call_with_http_info(**kwargs)

        self.get_namespaced_custom_object_status = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/status',
                'operation_id': 'get_namespaced_custom_object_status',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'version',
                    'namespace',
                    'plural',
                    'name',
                ],
                'required': [
                    'group',
                    'version',
                    'namespace',
                    'plural',
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'version':
                        (str,),
                    'namespace':
                        (str,),
                    'plural':
                        (str,),
                    'name':
                        (str,),
                },
                'attribute_map': {
                    'group': 'group',
                    'version': 'version',
                    'namespace': 'namespace',
                    'plural': 'plural',
                    'name': 'name',
                },
                'location_map': {
                    'group': 'path',
                    'version': 'path',
                    'namespace': 'path',
                    'plural': 'path',
                    'name': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_namespaced_custom_object_status
        )

        def __list_cluster_custom_object(
            self,
            group,
            version,
            plural,
            **kwargs
        ):
            """list_cluster_custom_object  # noqa: E501

            list or watch cluster scoped custom objects  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_cluster_custom_object(group, version, plural, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): The custom resource's group name
                version (str): The custom resource's version
                plural (str): The custom resource's plural name. For TPRs this would be lowercase plural kind.

            Keyword Args:
                pretty (str): If 'true', then the output is pretty printed.. [optional]
                allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.. [optional]
                _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
                field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
                label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
                limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
                resource_version (str): When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.. [optional]
                resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
                timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
                watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['version'] = \
                version
            kwargs['plural'] = \
                plural
            return self.call_with_http_info(**kwargs)

        self.list_cluster_custom_object = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/{group}/{version}/{plural}',
                'operation_id': 'list_cluster_custom_object',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'version',
                    'plural',
                    'pretty',
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [
                    'group',
                    'version',
                    'plural',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'version':
                        (str,),
                    'plural':
                        (str,),
                    'pretty':
                        (str,),
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'group': 'group',
                    'version': 'version',
                    'plural': 'plural',
                    'pretty': 'pretty',
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'group': 'path',
                    'version': 'path',
                    'plural': 'path',
                    'pretty': 'query',
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_cluster_custom_object
        )

        def __list_namespaced_custom_object(
            self,
            group,
            version,
            namespace,
            plural,
            **kwargs
        ):
            """list_namespaced_custom_object  # noqa: E501

            list or watch namespace scoped custom objects  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.list_namespaced_custom_object(group, version, namespace, plural, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): The custom resource's group name
                version (str): The custom resource's version
                namespace (str): The custom resource's namespace
                plural (str): The custom resource's plural name. For TPRs this would be lowercase plural kind.

            Keyword Args:
                pretty (str): If 'true', then the output is pretty printed.. [optional]
                allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored. If the feature gate WatchBookmarks is not enabled in apiserver, this field is ignored.. [optional]
                _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
                field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
                label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
                limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
                resource_version (str): When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.. [optional]
                resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
                timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
                watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['version'] = \
                version
            kwargs['namespace'] = \
                namespace
            kwargs['plural'] = \
                plural
            return self.call_with_http_info(**kwargs)

        self.list_namespaced_custom_object = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/{group}/{version}/namespaces/{namespace}/{plural}',
                'operation_id': 'list_namespaced_custom_object',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'version',
                    'namespace',
                    'plural',
                    'pretty',
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [
                    'group',
                    'version',
                    'namespace',
                    'plural',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'version':
                        (str,),
                    'namespace':
                        (str,),
                    'plural':
                        (str,),
                    'pretty':
                        (str,),
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'group': 'group',
                    'version': 'version',
                    'namespace': 'namespace',
                    'plural': 'plural',
                    'pretty': 'pretty',
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'group': 'path',
                    'version': 'path',
                    'namespace': 'path',
                    'plural': 'path',
                    'pretty': 'query',
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__list_namespaced_custom_object
        )

        def __patch_cluster_custom_object(
            self,
            group,
            version,
            plural,
            name,
            body,
            **kwargs
        ):
            """patch_cluster_custom_object  # noqa: E501

            patch the specified cluster scoped custom object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.patch_cluster_custom_object(group, version, plural, name, body, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): the custom resource's group
                version (str): the custom resource's version
                plural (str): the custom object's plural name. For TPRs this would be lowercase plural kind.
                name (str): the custom object's name
                body ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The JSON schema of the Resource to patch.

            Keyword Args:
                dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
                field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
                force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['version'] = \
                version
            kwargs['plural'] = \
                plural
            kwargs['name'] = \
                name
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.patch_cluster_custom_object = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/{group}/{version}/{plural}/{name}',
                'operation_id': 'patch_cluster_custom_object',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'version',
                    'plural',
                    'name',
                    'body',
                    'dry_run',
                    'field_manager',
                    'force',
                ],
                'required': [
                    'group',
                    'version',
                    'plural',
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'version':
                        (str,),
                    'plural':
                        (str,),
                    'name':
                        (str,),
                    'body':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'group': 'group',
                    'version': 'version',
                    'plural': 'plural',
                    'name': 'name',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'force': 'force',
                },
                'location_map': {
                    'group': 'path',
                    'version': 'path',
                    'plural': 'path',
                    'name': 'path',
                    'body': 'body',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/merge-patch+json'
                ]
            },
            api_client=api_client,
            callable=__patch_cluster_custom_object
        )

        def __patch_cluster_custom_object_scale(
            self,
            group,
            version,
            plural,
            name,
            body,
            **kwargs
        ):
            """patch_cluster_custom_object_scale  # noqa: E501

            partially update scale of the specified cluster scoped custom object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.patch_cluster_custom_object_scale(group, version, plural, name, body, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): the custom resource's group
                version (str): the custom resource's version
                plural (str): the custom resource's plural name. For TPRs this would be lowercase plural kind.
                name (str): the custom object's name
                body ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}):

            Keyword Args:
                dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
                field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
                force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['version'] = \
                version
            kwargs['plural'] = \
                plural
            kwargs['name'] = \
                name
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.patch_cluster_custom_object_scale = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/{group}/{version}/{plural}/{name}/scale',
                'operation_id': 'patch_cluster_custom_object_scale',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'version',
                    'plural',
                    'name',
                    'body',
                    'dry_run',
                    'field_manager',
                    'force',
                ],
                'required': [
                    'group',
                    'version',
                    'plural',
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'version':
                        (str,),
                    'plural':
                        (str,),
                    'name':
                        (str,),
                    'body':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'group': 'group',
                    'version': 'version',
                    'plural': 'plural',
                    'name': 'name',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'force': 'force',
                },
                'location_map': {
                    'group': 'path',
                    'version': 'path',
                    'plural': 'path',
                    'name': 'path',
                    'body': 'body',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/merge-patch+json'
                ]
            },
            api_client=api_client,
            callable=__patch_cluster_custom_object_scale
        )

        def __patch_cluster_custom_object_status(
            self,
            group,
            version,
            plural,
            name,
            body,
            **kwargs
        ):
            """patch_cluster_custom_object_status  # noqa: E501

            partially update status of the specified cluster scoped custom object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.patch_cluster_custom_object_status(group, version, plural, name, body, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): the custom resource's group
                version (str): the custom resource's version
                plural (str): the custom resource's plural name. For TPRs this would be lowercase plural kind.
                name (str): the custom object's name
                body ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}):

            Keyword Args:
                dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
                field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
                force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['version'] = \
                version
            kwargs['plural'] = \
                plural
            kwargs['name'] = \
                name
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.patch_cluster_custom_object_status = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/{group}/{version}/{plural}/{name}/status',
                'operation_id': 'patch_cluster_custom_object_status',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'version',
                    'plural',
                    'name',
                    'body',
                    'dry_run',
                    'field_manager',
                    'force',
                ],
                'required': [
                    'group',
                    'version',
                    'plural',
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'version':
                        (str,),
                    'plural':
                        (str,),
                    'name':
                        (str,),
                    'body':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'group': 'group',
                    'version': 'version',
                    'plural': 'plural',
                    'name': 'name',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'force': 'force',
                },
                'location_map': {
                    'group': 'path',
                    'version': 'path',
                    'plural': 'path',
                    'name': 'path',
                    'body': 'body',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/merge-patch+json'
                ]
            },
            api_client=api_client,
            callable=__patch_cluster_custom_object_status
        )

        def __patch_namespaced_custom_object(
            self,
            group,
            version,
            namespace,
            plural,
            name,
            body,
            **kwargs
        ):
            """patch_namespaced_custom_object  # noqa: E501

            patch the specified namespace scoped custom object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.patch_namespaced_custom_object(group, version, namespace, plural, name, body, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): the custom resource's group
                version (str): the custom resource's version
                namespace (str): The custom resource's namespace
                plural (str): the custom resource's plural name. For TPRs this would be lowercase plural kind.
                name (str): the custom object's name
                body ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The JSON schema of the Resource to patch.

            Keyword Args:
                dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
                field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
                force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['version'] = \
                version
            kwargs['namespace'] = \
                namespace
            kwargs['plural'] = \
                plural
            kwargs['name'] = \
                name
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.patch_namespaced_custom_object = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}',
                'operation_id': 'patch_namespaced_custom_object',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'version',
                    'namespace',
                    'plural',
                    'name',
                    'body',
                    'dry_run',
                    'field_manager',
                    'force',
                ],
                'required': [
                    'group',
                    'version',
                    'namespace',
                    'plural',
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'version':
                        (str,),
                    'namespace':
                        (str,),
                    'plural':
                        (str,),
                    'name':
                        (str,),
                    'body':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'group': 'group',
                    'version': 'version',
                    'namespace': 'namespace',
                    'plural': 'plural',
                    'name': 'name',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'force': 'force',
                },
                'location_map': {
                    'group': 'path',
                    'version': 'path',
                    'namespace': 'path',
                    'plural': 'path',
                    'name': 'path',
                    'body': 'body',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/merge-patch+json'
                ]
            },
            api_client=api_client,
            callable=__patch_namespaced_custom_object
        )

        def __patch_namespaced_custom_object_scale(
            self,
            group,
            version,
            namespace,
            plural,
            name,
            body,
            **kwargs
        ):
            """patch_namespaced_custom_object_scale  # noqa: E501

            partially update scale of the specified namespace scoped custom object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.patch_namespaced_custom_object_scale(group, version, namespace, plural, name, body, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): the custom resource's group
                version (str): the custom resource's version
                namespace (str): The custom resource's namespace
                plural (str): the custom resource's plural name. For TPRs this would be lowercase plural kind.
                name (str): the custom object's name
                body ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}):

            Keyword Args:
                dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
                field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
                force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['version'] = \
                version
            kwargs['namespace'] = \
                namespace
            kwargs['plural'] = \
                plural
            kwargs['name'] = \
                name
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.patch_namespaced_custom_object_scale = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/scale',
                'operation_id': 'patch_namespaced_custom_object_scale',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'version',
                    'namespace',
                    'plural',
                    'name',
                    'body',
                    'dry_run',
                    'field_manager',
                    'force',
                ],
                'required': [
                    'group',
                    'version',
                    'namespace',
                    'plural',
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'version':
                        (str,),
                    'namespace':
                        (str,),
                    'plural':
                        (str,),
                    'name':
                        (str,),
                    'body':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'group': 'group',
                    'version': 'version',
                    'namespace': 'namespace',
                    'plural': 'plural',
                    'name': 'name',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'force': 'force',
                },
                'location_map': {
                    'group': 'path',
                    'version': 'path',
                    'namespace': 'path',
                    'plural': 'path',
                    'name': 'path',
                    'body': 'body',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client,
            callable=__patch_namespaced_custom_object_scale
        )

        def __patch_namespaced_custom_object_status(
            self,
            group,
            version,
            namespace,
            plural,
            name,
            body,
            **kwargs
        ):
            """patch_namespaced_custom_object_status  # noqa: E501

            partially update status of the specified namespace scoped custom object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.patch_namespaced_custom_object_status(group, version, namespace, plural, name, body, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): the custom resource's group
                version (str): the custom resource's version
                namespace (str): The custom resource's namespace
                plural (str): the custom resource's plural name. For TPRs this would be lowercase plural kind.
                name (str): the custom object's name
                body ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}):

            Keyword Args:
                dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
                field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
                force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['version'] = \
                version
            kwargs['namespace'] = \
                namespace
            kwargs['plural'] = \
                plural
            kwargs['name'] = \
                name
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.patch_namespaced_custom_object_status = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/status',
                'operation_id': 'patch_namespaced_custom_object_status',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'version',
                    'namespace',
                    'plural',
                    'name',
                    'body',
                    'dry_run',
                    'field_manager',
                    'force',
                ],
                'required': [
                    'group',
                    'version',
                    'namespace',
                    'plural',
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'version':
                        (str,),
                    'namespace':
                        (str,),
                    'plural':
                        (str,),
                    'name':
                        (str,),
                    'body':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'group': 'group',
                    'version': 'version',
                    'namespace': 'namespace',
                    'plural': 'plural',
                    'name': 'name',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'force': 'force',
                },
                'location_map': {
                    'group': 'path',
                    'version': 'path',
                    'namespace': 'path',
                    'plural': 'path',
                    'name': 'path',
                    'body': 'body',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client,
            callable=__patch_namespaced_custom_object_status
        )

        def __replace_cluster_custom_object(
            self,
            group,
            version,
            plural,
            name,
            body,
            **kwargs
        ):
            """replace_cluster_custom_object  # noqa: E501

            replace the specified cluster scoped custom object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.replace_cluster_custom_object(group, version, plural, name, body, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): the custom resource's group
                version (str): the custom resource's version
                plural (str): the custom object's plural name. For TPRs this would be lowercase plural kind.
                name (str): the custom object's name
                body ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The JSON schema of the Resource to replace.

            Keyword Args:
                dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
                field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['version'] = \
                version
            kwargs['plural'] = \
                plural
            kwargs['name'] = \
                name
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.replace_cluster_custom_object = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/{group}/{version}/{plural}/{name}',
                'operation_id': 'replace_cluster_custom_object',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'version',
                    'plural',
                    'name',
                    'body',
                    'dry_run',
                    'field_manager',
                ],
                'required': [
                    'group',
                    'version',
                    'plural',
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'version':
                        (str,),
                    'plural':
                        (str,),
                    'name':
                        (str,),
                    'body':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                },
                'attribute_map': {
                    'group': 'group',
                    'version': 'version',
                    'plural': 'plural',
                    'name': 'name',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                },
                'location_map': {
                    'group': 'path',
                    'version': 'path',
                    'plural': 'path',
                    'name': 'path',
                    'body': 'body',
                    'dry_run': 'query',
                    'field_manager': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__replace_cluster_custom_object
        )

        def __replace_cluster_custom_object_scale(
            self,
            group,
            version,
            plural,
            name,
            body,
            **kwargs
        ):
            """replace_cluster_custom_object_scale  # noqa: E501

            replace scale of the specified cluster scoped custom object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.replace_cluster_custom_object_scale(group, version, plural, name, body, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): the custom resource's group
                version (str): the custom resource's version
                plural (str): the custom resource's plural name. For TPRs this would be lowercase plural kind.
                name (str): the custom object's name
                body ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}):

            Keyword Args:
                dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
                field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['version'] = \
                version
            kwargs['plural'] = \
                plural
            kwargs['name'] = \
                name
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.replace_cluster_custom_object_scale = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/{group}/{version}/{plural}/{name}/scale',
                'operation_id': 'replace_cluster_custom_object_scale',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'version',
                    'plural',
                    'name',
                    'body',
                    'dry_run',
                    'field_manager',
                ],
                'required': [
                    'group',
                    'version',
                    'plural',
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'version':
                        (str,),
                    'plural':
                        (str,),
                    'name':
                        (str,),
                    'body':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                },
                'attribute_map': {
                    'group': 'group',
                    'version': 'version',
                    'plural': 'plural',
                    'name': 'name',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                },
                'location_map': {
                    'group': 'path',
                    'version': 'path',
                    'plural': 'path',
                    'name': 'path',
                    'body': 'body',
                    'dry_run': 'query',
                    'field_manager': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__replace_cluster_custom_object_scale
        )

        def __replace_cluster_custom_object_status(
            self,
            group,
            version,
            plural,
            name,
            body,
            **kwargs
        ):
            """replace_cluster_custom_object_status  # noqa: E501

            replace status of the cluster scoped specified custom object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.replace_cluster_custom_object_status(group, version, plural, name, body, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): the custom resource's group
                version (str): the custom resource's version
                plural (str): the custom resource's plural name. For TPRs this would be lowercase plural kind.
                name (str): the custom object's name
                body ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}):

            Keyword Args:
                dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
                field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['version'] = \
                version
            kwargs['plural'] = \
                plural
            kwargs['name'] = \
                name
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.replace_cluster_custom_object_status = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/{group}/{version}/{plural}/{name}/status',
                'operation_id': 'replace_cluster_custom_object_status',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'version',
                    'plural',
                    'name',
                    'body',
                    'dry_run',
                    'field_manager',
                ],
                'required': [
                    'group',
                    'version',
                    'plural',
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'version':
                        (str,),
                    'plural':
                        (str,),
                    'name':
                        (str,),
                    'body':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                },
                'attribute_map': {
                    'group': 'group',
                    'version': 'version',
                    'plural': 'plural',
                    'name': 'name',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                },
                'location_map': {
                    'group': 'path',
                    'version': 'path',
                    'plural': 'path',
                    'name': 'path',
                    'body': 'body',
                    'dry_run': 'query',
                    'field_manager': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__replace_cluster_custom_object_status
        )

        def __replace_namespaced_custom_object(
            self,
            group,
            version,
            namespace,
            plural,
            name,
            body,
            **kwargs
        ):
            """replace_namespaced_custom_object  # noqa: E501

            replace the specified namespace scoped custom object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.replace_namespaced_custom_object(group, version, namespace, plural, name, body, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): the custom resource's group
                version (str): the custom resource's version
                namespace (str): The custom resource's namespace
                plural (str): the custom resource's plural name. For TPRs this would be lowercase plural kind.
                name (str): the custom object's name
                body ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}): The JSON schema of the Resource to replace.

            Keyword Args:
                dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
                field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['version'] = \
                version
            kwargs['namespace'] = \
                namespace
            kwargs['plural'] = \
                plural
            kwargs['name'] = \
                name
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.replace_namespaced_custom_object = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}',
                'operation_id': 'replace_namespaced_custom_object',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'version',
                    'namespace',
                    'plural',
                    'name',
                    'body',
                    'dry_run',
                    'field_manager',
                ],
                'required': [
                    'group',
                    'version',
                    'namespace',
                    'plural',
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'version':
                        (str,),
                    'namespace':
                        (str,),
                    'plural':
                        (str,),
                    'name':
                        (str,),
                    'body':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                },
                'attribute_map': {
                    'group': 'group',
                    'version': 'version',
                    'namespace': 'namespace',
                    'plural': 'plural',
                    'name': 'name',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                },
                'location_map': {
                    'group': 'path',
                    'version': 'path',
                    'namespace': 'path',
                    'plural': 'path',
                    'name': 'path',
                    'body': 'body',
                    'dry_run': 'query',
                    'field_manager': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__replace_namespaced_custom_object
        )

        def __replace_namespaced_custom_object_scale(
            self,
            group,
            version,
            namespace,
            plural,
            name,
            body,
            **kwargs
        ):
            """replace_namespaced_custom_object_scale  # noqa: E501

            replace scale of the specified namespace scoped custom object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.replace_namespaced_custom_object_scale(group, version, namespace, plural, name, body, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): the custom resource's group
                version (str): the custom resource's version
                namespace (str): The custom resource's namespace
                plural (str): the custom resource's plural name. For TPRs this would be lowercase plural kind.
                name (str): the custom object's name
                body ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}):

            Keyword Args:
                dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
                field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['version'] = \
                version
            kwargs['namespace'] = \
                namespace
            kwargs['plural'] = \
                plural
            kwargs['name'] = \
                name
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.replace_namespaced_custom_object_scale = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/scale',
                'operation_id': 'replace_namespaced_custom_object_scale',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'version',
                    'namespace',
                    'plural',
                    'name',
                    'body',
                    'dry_run',
                    'field_manager',
                ],
                'required': [
                    'group',
                    'version',
                    'namespace',
                    'plural',
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'version':
                        (str,),
                    'namespace':
                        (str,),
                    'plural':
                        (str,),
                    'name':
                        (str,),
                    'body':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                },
                'attribute_map': {
                    'group': 'group',
                    'version': 'version',
                    'namespace': 'namespace',
                    'plural': 'plural',
                    'name': 'name',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                },
                'location_map': {
                    'group': 'path',
                    'version': 'path',
                    'namespace': 'path',
                    'plural': 'path',
                    'name': 'path',
                    'body': 'body',
                    'dry_run': 'query',
                    'field_manager': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__replace_namespaced_custom_object_scale
        )

        def __replace_namespaced_custom_object_status(
            self,
            group,
            version,
            namespace,
            plural,
            name,
            body,
            **kwargs
        ):
            """replace_namespaced_custom_object_status  # noqa: E501

            replace status of the specified namespace scoped custom object  # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.replace_namespaced_custom_object_status(group, version, namespace, plural, name, body, async_req=True)
            >>> result = thread.get()

            Args:
                group (str): the custom resource's group
                version (str): the custom resource's version
                namespace (str): The custom resource's namespace
                plural (str): the custom resource's plural name. For TPRs this would be lowercase plural kind.
                name (str): the custom object's name
                body ({str: (bool, date, datetime, dict, float, int, list, str, none_type)}):

            Keyword Args:
                dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
                field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['group'] = \
                group
            kwargs['version'] = \
                version
            kwargs['namespace'] = \
                namespace
            kwargs['plural'] = \
                plural
            kwargs['name'] = \
                name
            kwargs['body'] = \
                body
            return self.call_with_http_info(**kwargs)

        self.replace_namespaced_custom_object_status = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/apis/{group}/{version}/namespaces/{namespace}/{plural}/{name}/status',
                'operation_id': 'replace_namespaced_custom_object_status',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'group',
                    'version',
                    'namespace',
                    'plural',
                    'name',
                    'body',
                    'dry_run',
                    'field_manager',
                ],
                'required': [
                    'group',
                    'version',
                    'namespace',
                    'plural',
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'group':
                        (str,),
                    'version':
                        (str,),
                    'namespace':
                        (str,),
                    'plural':
                        (str,),
                    'name':
                        (str,),
                    'body':
                        ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                },
                'attribute_map': {
                    'group': 'group',
                    'version': 'version',
                    'namespace': 'namespace',
                    'plural': 'plural',
                    'name': 'name',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                },
                'location_map': {
                    'group': 'path',
                    'version': 'path',
                    'namespace': 'path',
                    'plural': 'path',
                    'name': 'path',
                    'body': 'body',
                    'dry_run': 'query',
                    'field_manager': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__replace_namespaced_custom_object_status
        )
