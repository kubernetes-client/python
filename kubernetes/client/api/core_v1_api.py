"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.23
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from kubernetes.client.api_client import ApiClient, Endpoint as _Endpoint
from kubernetes.client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from kubernetes.client.model.authentication_v1_token_request import AuthenticationV1TokenRequest
from kubernetes.client.model.core_v1_event import CoreV1Event
from kubernetes.client.model.core_v1_event_list import CoreV1EventList
from kubernetes.client.model.v1_api_resource_list import V1APIResourceList
from kubernetes.client.model.v1_binding import V1Binding
from kubernetes.client.model.v1_component_status import V1ComponentStatus
from kubernetes.client.model.v1_component_status_list import V1ComponentStatusList
from kubernetes.client.model.v1_config_map import V1ConfigMap
from kubernetes.client.model.v1_config_map_list import V1ConfigMapList
from kubernetes.client.model.v1_delete_options import V1DeleteOptions
from kubernetes.client.model.v1_endpoints import V1Endpoints
from kubernetes.client.model.v1_endpoints_list import V1EndpointsList
from kubernetes.client.model.v1_eviction import V1Eviction
from kubernetes.client.model.v1_limit_range import V1LimitRange
from kubernetes.client.model.v1_limit_range_list import V1LimitRangeList
from kubernetes.client.model.v1_namespace import V1Namespace
from kubernetes.client.model.v1_namespace_list import V1NamespaceList
from kubernetes.client.model.v1_node import V1Node
from kubernetes.client.model.v1_node_list import V1NodeList
from kubernetes.client.model.v1_persistent_volume import V1PersistentVolume
from kubernetes.client.model.v1_persistent_volume_claim import V1PersistentVolumeClaim
from kubernetes.client.model.v1_persistent_volume_claim_list import V1PersistentVolumeClaimList
from kubernetes.client.model.v1_persistent_volume_list import V1PersistentVolumeList
from kubernetes.client.model.v1_pod import V1Pod
from kubernetes.client.model.v1_pod_list import V1PodList
from kubernetes.client.model.v1_pod_template import V1PodTemplate
from kubernetes.client.model.v1_pod_template_list import V1PodTemplateList
from kubernetes.client.model.v1_replication_controller import V1ReplicationController
from kubernetes.client.model.v1_replication_controller_list import V1ReplicationControllerList
from kubernetes.client.model.v1_resource_quota import V1ResourceQuota
from kubernetes.client.model.v1_resource_quota_list import V1ResourceQuotaList
from kubernetes.client.model.v1_scale import V1Scale
from kubernetes.client.model.v1_secret import V1Secret
from kubernetes.client.model.v1_secret_list import V1SecretList
from kubernetes.client.model.v1_service import V1Service
from kubernetes.client.model.v1_service_account import V1ServiceAccount
from kubernetes.client.model.v1_service_account_list import V1ServiceAccountList
from kubernetes.client.model.v1_service_list import V1ServiceList
from kubernetes.client.model.v1_status import V1Status


class CoreV1Api(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.connect_delete_namespaced_pod_proxy_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/proxy',
                'operation_id': 'connect_delete_namespaced_pod_proxy',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'path',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'path': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_delete_namespaced_pod_proxy_with_path_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}',
                'operation_id': 'connect_delete_namespaced_pod_proxy_with_path',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'path',
                    'path2',
                ],
                'required': [
                    'name',
                    'namespace',
                    'path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'path':
                        (str,),
                    'path2':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'path': 'path',
                    'path2': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'path': 'path',
                    'path2': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_delete_namespaced_service_proxy_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/services/{name}/proxy',
                'operation_id': 'connect_delete_namespaced_service_proxy',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'path',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'path': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_delete_namespaced_service_proxy_with_path_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}',
                'operation_id': 'connect_delete_namespaced_service_proxy_with_path',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'path',
                    'path2',
                ],
                'required': [
                    'name',
                    'namespace',
                    'path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'path':
                        (str,),
                    'path2':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'path': 'path',
                    'path2': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'path': 'path',
                    'path2': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_delete_node_proxy_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/nodes/{name}/proxy',
                'operation_id': 'connect_delete_node_proxy',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'path',
                ],
                'required': [
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'path': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_delete_node_proxy_with_path_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/nodes/{name}/proxy/{path}',
                'operation_id': 'connect_delete_node_proxy_with_path',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'path',
                    'path2',
                ],
                'required': [
                    'name',
                    'path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'path':
                        (str,),
                    'path2':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'path': 'path',
                    'path2': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'path': 'path',
                    'path2': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_get_namespaced_pod_attach_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/attach',
                'operation_id': 'connect_get_namespaced_pod_attach',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'container',
                    'stderr',
                    'stdin',
                    'stdout',
                    'tty',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'container':
                        (str,),
                    'stderr':
                        (bool,),
                    'stdin':
                        (bool,),
                    'stdout':
                        (bool,),
                    'tty':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'container': 'container',
                    'stderr': 'stderr',
                    'stdin': 'stdin',
                    'stdout': 'stdout',
                    'tty': 'tty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'container': 'query',
                    'stderr': 'query',
                    'stdin': 'query',
                    'stdout': 'query',
                    'tty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_get_namespaced_pod_exec_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/exec',
                'operation_id': 'connect_get_namespaced_pod_exec',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'command',
                    'container',
                    'stderr',
                    'stdin',
                    'stdout',
                    'tty',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'command':
                        (str,),
                    'container':
                        (str,),
                    'stderr':
                        (bool,),
                    'stdin':
                        (bool,),
                    'stdout':
                        (bool,),
                    'tty':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'command': 'command',
                    'container': 'container',
                    'stderr': 'stderr',
                    'stdin': 'stdin',
                    'stdout': 'stdout',
                    'tty': 'tty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'command': 'query',
                    'container': 'query',
                    'stderr': 'query',
                    'stdin': 'query',
                    'stdout': 'query',
                    'tty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_get_namespaced_pod_portforward_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/portforward',
                'operation_id': 'connect_get_namespaced_pod_portforward',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'ports',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'ports':
                        (int,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'ports': 'ports',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'ports': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_get_namespaced_pod_proxy_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/proxy',
                'operation_id': 'connect_get_namespaced_pod_proxy',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'path',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'path': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_get_namespaced_pod_proxy_with_path_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}',
                'operation_id': 'connect_get_namespaced_pod_proxy_with_path',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'path',
                    'path2',
                ],
                'required': [
                    'name',
                    'namespace',
                    'path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'path':
                        (str,),
                    'path2':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'path': 'path',
                    'path2': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'path': 'path',
                    'path2': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_get_namespaced_service_proxy_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/services/{name}/proxy',
                'operation_id': 'connect_get_namespaced_service_proxy',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'path',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'path': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_get_namespaced_service_proxy_with_path_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}',
                'operation_id': 'connect_get_namespaced_service_proxy_with_path',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'path',
                    'path2',
                ],
                'required': [
                    'name',
                    'namespace',
                    'path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'path':
                        (str,),
                    'path2':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'path': 'path',
                    'path2': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'path': 'path',
                    'path2': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_get_node_proxy_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/nodes/{name}/proxy',
                'operation_id': 'connect_get_node_proxy',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'path',
                ],
                'required': [
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'path': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_get_node_proxy_with_path_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/nodes/{name}/proxy/{path}',
                'operation_id': 'connect_get_node_proxy_with_path',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'path',
                    'path2',
                ],
                'required': [
                    'name',
                    'path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'path':
                        (str,),
                    'path2':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'path': 'path',
                    'path2': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'path': 'path',
                    'path2': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_head_namespaced_pod_proxy_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/proxy',
                'operation_id': 'connect_head_namespaced_pod_proxy',
                'http_method': 'HEAD',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'path',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'path': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_head_namespaced_pod_proxy_with_path_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}',
                'operation_id': 'connect_head_namespaced_pod_proxy_with_path',
                'http_method': 'HEAD',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'path',
                    'path2',
                ],
                'required': [
                    'name',
                    'namespace',
                    'path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'path':
                        (str,),
                    'path2':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'path': 'path',
                    'path2': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'path': 'path',
                    'path2': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_head_namespaced_service_proxy_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/services/{name}/proxy',
                'operation_id': 'connect_head_namespaced_service_proxy',
                'http_method': 'HEAD',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'path',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'path': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_head_namespaced_service_proxy_with_path_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}',
                'operation_id': 'connect_head_namespaced_service_proxy_with_path',
                'http_method': 'HEAD',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'path',
                    'path2',
                ],
                'required': [
                    'name',
                    'namespace',
                    'path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'path':
                        (str,),
                    'path2':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'path': 'path',
                    'path2': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'path': 'path',
                    'path2': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_head_node_proxy_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/nodes/{name}/proxy',
                'operation_id': 'connect_head_node_proxy',
                'http_method': 'HEAD',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'path',
                ],
                'required': [
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'path': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_head_node_proxy_with_path_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/nodes/{name}/proxy/{path}',
                'operation_id': 'connect_head_node_proxy_with_path',
                'http_method': 'HEAD',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'path',
                    'path2',
                ],
                'required': [
                    'name',
                    'path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'path':
                        (str,),
                    'path2':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'path': 'path',
                    'path2': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'path': 'path',
                    'path2': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_options_namespaced_pod_proxy_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/proxy',
                'operation_id': 'connect_options_namespaced_pod_proxy',
                'http_method': 'OPTIONS',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'path',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'path': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_options_namespaced_pod_proxy_with_path_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}',
                'operation_id': 'connect_options_namespaced_pod_proxy_with_path',
                'http_method': 'OPTIONS',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'path',
                    'path2',
                ],
                'required': [
                    'name',
                    'namespace',
                    'path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'path':
                        (str,),
                    'path2':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'path': 'path',
                    'path2': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'path': 'path',
                    'path2': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_options_namespaced_service_proxy_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/services/{name}/proxy',
                'operation_id': 'connect_options_namespaced_service_proxy',
                'http_method': 'OPTIONS',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'path',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'path': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_options_namespaced_service_proxy_with_path_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}',
                'operation_id': 'connect_options_namespaced_service_proxy_with_path',
                'http_method': 'OPTIONS',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'path',
                    'path2',
                ],
                'required': [
                    'name',
                    'namespace',
                    'path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'path':
                        (str,),
                    'path2':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'path': 'path',
                    'path2': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'path': 'path',
                    'path2': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_options_node_proxy_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/nodes/{name}/proxy',
                'operation_id': 'connect_options_node_proxy',
                'http_method': 'OPTIONS',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'path',
                ],
                'required': [
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'path': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_options_node_proxy_with_path_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/nodes/{name}/proxy/{path}',
                'operation_id': 'connect_options_node_proxy_with_path',
                'http_method': 'OPTIONS',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'path',
                    'path2',
                ],
                'required': [
                    'name',
                    'path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'path':
                        (str,),
                    'path2':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'path': 'path',
                    'path2': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'path': 'path',
                    'path2': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_patch_namespaced_pod_proxy_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/proxy',
                'operation_id': 'connect_patch_namespaced_pod_proxy',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'path',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'path': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_patch_namespaced_pod_proxy_with_path_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}',
                'operation_id': 'connect_patch_namespaced_pod_proxy_with_path',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'path',
                    'path2',
                ],
                'required': [
                    'name',
                    'namespace',
                    'path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'path':
                        (str,),
                    'path2':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'path': 'path',
                    'path2': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'path': 'path',
                    'path2': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_patch_namespaced_service_proxy_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/services/{name}/proxy',
                'operation_id': 'connect_patch_namespaced_service_proxy',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'path',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'path': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_patch_namespaced_service_proxy_with_path_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}',
                'operation_id': 'connect_patch_namespaced_service_proxy_with_path',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'path',
                    'path2',
                ],
                'required': [
                    'name',
                    'namespace',
                    'path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'path':
                        (str,),
                    'path2':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'path': 'path',
                    'path2': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'path': 'path',
                    'path2': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_patch_node_proxy_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/nodes/{name}/proxy',
                'operation_id': 'connect_patch_node_proxy',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'path',
                ],
                'required': [
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'path': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_patch_node_proxy_with_path_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/nodes/{name}/proxy/{path}',
                'operation_id': 'connect_patch_node_proxy_with_path',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'path',
                    'path2',
                ],
                'required': [
                    'name',
                    'path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'path':
                        (str,),
                    'path2':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'path': 'path',
                    'path2': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'path': 'path',
                    'path2': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_post_namespaced_pod_attach_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/attach',
                'operation_id': 'connect_post_namespaced_pod_attach',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'container',
                    'stderr',
                    'stdin',
                    'stdout',
                    'tty',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'container':
                        (str,),
                    'stderr':
                        (bool,),
                    'stdin':
                        (bool,),
                    'stdout':
                        (bool,),
                    'tty':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'container': 'container',
                    'stderr': 'stderr',
                    'stdin': 'stdin',
                    'stdout': 'stdout',
                    'tty': 'tty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'container': 'query',
                    'stderr': 'query',
                    'stdin': 'query',
                    'stdout': 'query',
                    'tty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_post_namespaced_pod_exec_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/exec',
                'operation_id': 'connect_post_namespaced_pod_exec',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'command',
                    'container',
                    'stderr',
                    'stdin',
                    'stdout',
                    'tty',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'command':
                        (str,),
                    'container':
                        (str,),
                    'stderr':
                        (bool,),
                    'stdin':
                        (bool,),
                    'stdout':
                        (bool,),
                    'tty':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'command': 'command',
                    'container': 'container',
                    'stderr': 'stderr',
                    'stdin': 'stdin',
                    'stdout': 'stdout',
                    'tty': 'tty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'command': 'query',
                    'container': 'query',
                    'stderr': 'query',
                    'stdin': 'query',
                    'stdout': 'query',
                    'tty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_post_namespaced_pod_portforward_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/portforward',
                'operation_id': 'connect_post_namespaced_pod_portforward',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'ports',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'ports':
                        (int,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'ports': 'ports',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'ports': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_post_namespaced_pod_proxy_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/proxy',
                'operation_id': 'connect_post_namespaced_pod_proxy',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'path',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'path': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_post_namespaced_pod_proxy_with_path_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}',
                'operation_id': 'connect_post_namespaced_pod_proxy_with_path',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'path',
                    'path2',
                ],
                'required': [
                    'name',
                    'namespace',
                    'path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'path':
                        (str,),
                    'path2':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'path': 'path',
                    'path2': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'path': 'path',
                    'path2': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_post_namespaced_service_proxy_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/services/{name}/proxy',
                'operation_id': 'connect_post_namespaced_service_proxy',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'path',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'path': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_post_namespaced_service_proxy_with_path_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}',
                'operation_id': 'connect_post_namespaced_service_proxy_with_path',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'path',
                    'path2',
                ],
                'required': [
                    'name',
                    'namespace',
                    'path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'path':
                        (str,),
                    'path2':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'path': 'path',
                    'path2': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'path': 'path',
                    'path2': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_post_node_proxy_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/nodes/{name}/proxy',
                'operation_id': 'connect_post_node_proxy',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'path',
                ],
                'required': [
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'path': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_post_node_proxy_with_path_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/nodes/{name}/proxy/{path}',
                'operation_id': 'connect_post_node_proxy_with_path',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'path',
                    'path2',
                ],
                'required': [
                    'name',
                    'path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'path':
                        (str,),
                    'path2':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'path': 'path',
                    'path2': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'path': 'path',
                    'path2': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_put_namespaced_pod_proxy_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/proxy',
                'operation_id': 'connect_put_namespaced_pod_proxy',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'path',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'path': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_put_namespaced_pod_proxy_with_path_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}',
                'operation_id': 'connect_put_namespaced_pod_proxy_with_path',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'path',
                    'path2',
                ],
                'required': [
                    'name',
                    'namespace',
                    'path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'path':
                        (str,),
                    'path2':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'path': 'path',
                    'path2': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'path': 'path',
                    'path2': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_put_namespaced_service_proxy_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/services/{name}/proxy',
                'operation_id': 'connect_put_namespaced_service_proxy',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'path',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'path': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_put_namespaced_service_proxy_with_path_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}',
                'operation_id': 'connect_put_namespaced_service_proxy_with_path',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'path',
                    'path2',
                ],
                'required': [
                    'name',
                    'namespace',
                    'path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'path':
                        (str,),
                    'path2':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'path': 'path',
                    'path2': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'path': 'path',
                    'path2': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_put_node_proxy_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/nodes/{name}/proxy',
                'operation_id': 'connect_put_node_proxy',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'path',
                ],
                'required': [
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'path':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'path': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.connect_put_node_proxy_with_path_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/nodes/{name}/proxy/{path}',
                'operation_id': 'connect_put_node_proxy_with_path',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'path',
                    'path2',
                ],
                'required': [
                    'name',
                    'path',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'path':
                        (str,),
                    'path2':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'path': 'path',
                    'path2': 'path',
                },
                'location_map': {
                    'name': 'path',
                    'path': 'path',
                    'path2': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    '*/*'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_namespace_endpoint = _Endpoint(
            settings={
                'response_type': (V1Namespace,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces',
                'operation_id': 'create_namespace',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (V1Namespace,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_namespaced_binding_endpoint = _Endpoint(
            settings={
                'response_type': (V1Binding,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/bindings',
                'operation_id': 'create_namespaced_binding',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'body',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'pretty',
                ],
                'required': [
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'body':
                        (V1Binding,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'namespace': 'path',
                    'body': 'body',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_namespaced_config_map_endpoint = _Endpoint(
            settings={
                'response_type': (V1ConfigMap,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/configmaps',
                'operation_id': 'create_namespaced_config_map',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'body':
                        (V1ConfigMap,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_namespaced_endpoints_endpoint = _Endpoint(
            settings={
                'response_type': (V1Endpoints,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/endpoints',
                'operation_id': 'create_namespaced_endpoints',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'body':
                        (V1Endpoints,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_namespaced_event_endpoint = _Endpoint(
            settings={
                'response_type': (CoreV1Event,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/events',
                'operation_id': 'create_namespaced_event',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'body':
                        (CoreV1Event,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_namespaced_limit_range_endpoint = _Endpoint(
            settings={
                'response_type': (V1LimitRange,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/limitranges',
                'operation_id': 'create_namespaced_limit_range',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'body':
                        (V1LimitRange,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_namespaced_persistent_volume_claim_endpoint = _Endpoint(
            settings={
                'response_type': (V1PersistentVolumeClaim,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/persistentvolumeclaims',
                'operation_id': 'create_namespaced_persistent_volume_claim',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'body':
                        (V1PersistentVolumeClaim,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_namespaced_pod_endpoint = _Endpoint(
            settings={
                'response_type': (V1Pod,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods',
                'operation_id': 'create_namespaced_pod',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'body':
                        (V1Pod,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_namespaced_pod_binding_endpoint = _Endpoint(
            settings={
                'response_type': (V1Binding,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/binding',
                'operation_id': 'create_namespaced_pod_binding',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'pretty',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (V1Binding,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_namespaced_pod_eviction_endpoint = _Endpoint(
            settings={
                'response_type': (V1Eviction,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/eviction',
                'operation_id': 'create_namespaced_pod_eviction',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'pretty',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (V1Eviction,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_namespaced_pod_template_endpoint = _Endpoint(
            settings={
                'response_type': (V1PodTemplate,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/podtemplates',
                'operation_id': 'create_namespaced_pod_template',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'body':
                        (V1PodTemplate,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_namespaced_replication_controller_endpoint = _Endpoint(
            settings={
                'response_type': (V1ReplicationController,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/replicationcontrollers',
                'operation_id': 'create_namespaced_replication_controller',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'body':
                        (V1ReplicationController,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_namespaced_resource_quota_endpoint = _Endpoint(
            settings={
                'response_type': (V1ResourceQuota,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/resourcequotas',
                'operation_id': 'create_namespaced_resource_quota',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'body':
                        (V1ResourceQuota,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_namespaced_secret_endpoint = _Endpoint(
            settings={
                'response_type': (V1Secret,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/secrets',
                'operation_id': 'create_namespaced_secret',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'body':
                        (V1Secret,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_namespaced_service_endpoint = _Endpoint(
            settings={
                'response_type': (V1Service,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/services',
                'operation_id': 'create_namespaced_service',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'body':
                        (V1Service,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_namespaced_service_account_endpoint = _Endpoint(
            settings={
                'response_type': (V1ServiceAccount,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/serviceaccounts',
                'operation_id': 'create_namespaced_service_account',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'body':
                        (V1ServiceAccount,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_namespaced_service_account_token_endpoint = _Endpoint(
            settings={
                'response_type': (AuthenticationV1TokenRequest,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/serviceaccounts/{name}/token',
                'operation_id': 'create_namespaced_service_account_token',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'pretty',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (AuthenticationV1TokenRequest,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_node_endpoint = _Endpoint(
            settings={
                'response_type': (V1Node,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/nodes',
                'operation_id': 'create_node',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (V1Node,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.create_persistent_volume_endpoint = _Endpoint(
            settings={
                'response_type': (V1PersistentVolume,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/persistentvolumes',
                'operation_id': 'create_persistent_volume',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'body':
                        (V1PersistentVolume,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_collection_namespaced_config_map_endpoint = _Endpoint(
            settings={
                'response_type': (V1Status,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/configmaps',
                'operation_id': 'delete_collection_namespaced_config_map',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'pretty',
                    '_continue',
                    'dry_run',
                    'field_selector',
                    'grace_period_seconds',
                    'label_selector',
                    'limit',
                    'orphan_dependents',
                    'propagation_policy',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'body',
                ],
                'required': [
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    '_continue':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_selector':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    '_continue': 'continue',
                    'dry_run': 'dryRun',
                    'field_selector': 'fieldSelector',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                },
                'location_map': {
                    'namespace': 'path',
                    'pretty': 'query',
                    '_continue': 'query',
                    'dry_run': 'query',
                    'field_selector': 'query',
                    'grace_period_seconds': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_collection_namespaced_endpoints_endpoint = _Endpoint(
            settings={
                'response_type': (V1Status,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/endpoints',
                'operation_id': 'delete_collection_namespaced_endpoints',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'pretty',
                    '_continue',
                    'dry_run',
                    'field_selector',
                    'grace_period_seconds',
                    'label_selector',
                    'limit',
                    'orphan_dependents',
                    'propagation_policy',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'body',
                ],
                'required': [
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    '_continue':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_selector':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    '_continue': 'continue',
                    'dry_run': 'dryRun',
                    'field_selector': 'fieldSelector',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                },
                'location_map': {
                    'namespace': 'path',
                    'pretty': 'query',
                    '_continue': 'query',
                    'dry_run': 'query',
                    'field_selector': 'query',
                    'grace_period_seconds': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_collection_namespaced_event_endpoint = _Endpoint(
            settings={
                'response_type': (V1Status,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/events',
                'operation_id': 'delete_collection_namespaced_event',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'pretty',
                    '_continue',
                    'dry_run',
                    'field_selector',
                    'grace_period_seconds',
                    'label_selector',
                    'limit',
                    'orphan_dependents',
                    'propagation_policy',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'body',
                ],
                'required': [
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    '_continue':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_selector':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    '_continue': 'continue',
                    'dry_run': 'dryRun',
                    'field_selector': 'fieldSelector',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                },
                'location_map': {
                    'namespace': 'path',
                    'pretty': 'query',
                    '_continue': 'query',
                    'dry_run': 'query',
                    'field_selector': 'query',
                    'grace_period_seconds': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_collection_namespaced_limit_range_endpoint = _Endpoint(
            settings={
                'response_type': (V1Status,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/limitranges',
                'operation_id': 'delete_collection_namespaced_limit_range',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'pretty',
                    '_continue',
                    'dry_run',
                    'field_selector',
                    'grace_period_seconds',
                    'label_selector',
                    'limit',
                    'orphan_dependents',
                    'propagation_policy',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'body',
                ],
                'required': [
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    '_continue':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_selector':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    '_continue': 'continue',
                    'dry_run': 'dryRun',
                    'field_selector': 'fieldSelector',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                },
                'location_map': {
                    'namespace': 'path',
                    'pretty': 'query',
                    '_continue': 'query',
                    'dry_run': 'query',
                    'field_selector': 'query',
                    'grace_period_seconds': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_collection_namespaced_persistent_volume_claim_endpoint = _Endpoint(
            settings={
                'response_type': (V1Status,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/persistentvolumeclaims',
                'operation_id': 'delete_collection_namespaced_persistent_volume_claim',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'pretty',
                    '_continue',
                    'dry_run',
                    'field_selector',
                    'grace_period_seconds',
                    'label_selector',
                    'limit',
                    'orphan_dependents',
                    'propagation_policy',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'body',
                ],
                'required': [
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    '_continue':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_selector':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    '_continue': 'continue',
                    'dry_run': 'dryRun',
                    'field_selector': 'fieldSelector',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                },
                'location_map': {
                    'namespace': 'path',
                    'pretty': 'query',
                    '_continue': 'query',
                    'dry_run': 'query',
                    'field_selector': 'query',
                    'grace_period_seconds': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_collection_namespaced_pod_endpoint = _Endpoint(
            settings={
                'response_type': (V1Status,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods',
                'operation_id': 'delete_collection_namespaced_pod',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'pretty',
                    '_continue',
                    'dry_run',
                    'field_selector',
                    'grace_period_seconds',
                    'label_selector',
                    'limit',
                    'orphan_dependents',
                    'propagation_policy',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'body',
                ],
                'required': [
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    '_continue':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_selector':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    '_continue': 'continue',
                    'dry_run': 'dryRun',
                    'field_selector': 'fieldSelector',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                },
                'location_map': {
                    'namespace': 'path',
                    'pretty': 'query',
                    '_continue': 'query',
                    'dry_run': 'query',
                    'field_selector': 'query',
                    'grace_period_seconds': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_collection_namespaced_pod_template_endpoint = _Endpoint(
            settings={
                'response_type': (V1Status,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/podtemplates',
                'operation_id': 'delete_collection_namespaced_pod_template',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'pretty',
                    '_continue',
                    'dry_run',
                    'field_selector',
                    'grace_period_seconds',
                    'label_selector',
                    'limit',
                    'orphan_dependents',
                    'propagation_policy',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'body',
                ],
                'required': [
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    '_continue':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_selector':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    '_continue': 'continue',
                    'dry_run': 'dryRun',
                    'field_selector': 'fieldSelector',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                },
                'location_map': {
                    'namespace': 'path',
                    'pretty': 'query',
                    '_continue': 'query',
                    'dry_run': 'query',
                    'field_selector': 'query',
                    'grace_period_seconds': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_collection_namespaced_replication_controller_endpoint = _Endpoint(
            settings={
                'response_type': (V1Status,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/replicationcontrollers',
                'operation_id': 'delete_collection_namespaced_replication_controller',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'pretty',
                    '_continue',
                    'dry_run',
                    'field_selector',
                    'grace_period_seconds',
                    'label_selector',
                    'limit',
                    'orphan_dependents',
                    'propagation_policy',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'body',
                ],
                'required': [
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    '_continue':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_selector':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    '_continue': 'continue',
                    'dry_run': 'dryRun',
                    'field_selector': 'fieldSelector',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                },
                'location_map': {
                    'namespace': 'path',
                    'pretty': 'query',
                    '_continue': 'query',
                    'dry_run': 'query',
                    'field_selector': 'query',
                    'grace_period_seconds': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_collection_namespaced_resource_quota_endpoint = _Endpoint(
            settings={
                'response_type': (V1Status,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/resourcequotas',
                'operation_id': 'delete_collection_namespaced_resource_quota',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'pretty',
                    '_continue',
                    'dry_run',
                    'field_selector',
                    'grace_period_seconds',
                    'label_selector',
                    'limit',
                    'orphan_dependents',
                    'propagation_policy',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'body',
                ],
                'required': [
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    '_continue':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_selector':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    '_continue': 'continue',
                    'dry_run': 'dryRun',
                    'field_selector': 'fieldSelector',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                },
                'location_map': {
                    'namespace': 'path',
                    'pretty': 'query',
                    '_continue': 'query',
                    'dry_run': 'query',
                    'field_selector': 'query',
                    'grace_period_seconds': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_collection_namespaced_secret_endpoint = _Endpoint(
            settings={
                'response_type': (V1Status,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/secrets',
                'operation_id': 'delete_collection_namespaced_secret',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'pretty',
                    '_continue',
                    'dry_run',
                    'field_selector',
                    'grace_period_seconds',
                    'label_selector',
                    'limit',
                    'orphan_dependents',
                    'propagation_policy',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'body',
                ],
                'required': [
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    '_continue':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_selector':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    '_continue': 'continue',
                    'dry_run': 'dryRun',
                    'field_selector': 'fieldSelector',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                },
                'location_map': {
                    'namespace': 'path',
                    'pretty': 'query',
                    '_continue': 'query',
                    'dry_run': 'query',
                    'field_selector': 'query',
                    'grace_period_seconds': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_collection_namespaced_service_endpoint = _Endpoint(
            settings={
                'response_type': (V1Status,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/services',
                'operation_id': 'delete_collection_namespaced_service',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'pretty',
                    '_continue',
                    'dry_run',
                    'field_selector',
                    'grace_period_seconds',
                    'label_selector',
                    'limit',
                    'orphan_dependents',
                    'propagation_policy',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'body',
                ],
                'required': [
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    '_continue':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_selector':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    '_continue': 'continue',
                    'dry_run': 'dryRun',
                    'field_selector': 'fieldSelector',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                },
                'location_map': {
                    'namespace': 'path',
                    'pretty': 'query',
                    '_continue': 'query',
                    'dry_run': 'query',
                    'field_selector': 'query',
                    'grace_period_seconds': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_collection_namespaced_service_account_endpoint = _Endpoint(
            settings={
                'response_type': (V1Status,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/serviceaccounts',
                'operation_id': 'delete_collection_namespaced_service_account',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'pretty',
                    '_continue',
                    'dry_run',
                    'field_selector',
                    'grace_period_seconds',
                    'label_selector',
                    'limit',
                    'orphan_dependents',
                    'propagation_policy',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'body',
                ],
                'required': [
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    '_continue':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_selector':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    '_continue': 'continue',
                    'dry_run': 'dryRun',
                    'field_selector': 'fieldSelector',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                },
                'location_map': {
                    'namespace': 'path',
                    'pretty': 'query',
                    '_continue': 'query',
                    'dry_run': 'query',
                    'field_selector': 'query',
                    'grace_period_seconds': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_collection_node_endpoint = _Endpoint(
            settings={
                'response_type': (V1Status,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/nodes',
                'operation_id': 'delete_collection_node',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'pretty',
                    '_continue',
                    'dry_run',
                    'field_selector',
                    'grace_period_seconds',
                    'label_selector',
                    'limit',
                    'orphan_dependents',
                    'propagation_policy',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pretty':
                        (str,),
                    '_continue':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_selector':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'pretty': 'pretty',
                    '_continue': 'continue',
                    'dry_run': 'dryRun',
                    'field_selector': 'fieldSelector',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                },
                'location_map': {
                    'pretty': 'query',
                    '_continue': 'query',
                    'dry_run': 'query',
                    'field_selector': 'query',
                    'grace_period_seconds': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_collection_persistent_volume_endpoint = _Endpoint(
            settings={
                'response_type': (V1Status,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/persistentvolumes',
                'operation_id': 'delete_collection_persistent_volume',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'pretty',
                    '_continue',
                    'dry_run',
                    'field_selector',
                    'grace_period_seconds',
                    'label_selector',
                    'limit',
                    'orphan_dependents',
                    'propagation_policy',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'body',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pretty':
                        (str,),
                    '_continue':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_selector':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'pretty': 'pretty',
                    '_continue': 'continue',
                    'dry_run': 'dryRun',
                    'field_selector': 'fieldSelector',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                },
                'location_map': {
                    'pretty': 'query',
                    '_continue': 'query',
                    'dry_run': 'query',
                    'field_selector': 'query',
                    'grace_period_seconds': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_namespace_endpoint = _Endpoint(
            settings={
                'response_type': (V1Status,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{name}',
                'operation_id': 'delete_namespace',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'pretty',
                    'dry_run',
                    'grace_period_seconds',
                    'orphan_dependents',
                    'propagation_policy',
                    'body',
                ],
                'required': [
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'name': 'name',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                },
                'location_map': {
                    'name': 'path',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'grace_period_seconds': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_namespaced_config_map_endpoint = _Endpoint(
            settings={
                'response_type': (V1Status,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/configmaps/{name}',
                'operation_id': 'delete_namespaced_config_map',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                    'dry_run',
                    'grace_period_seconds',
                    'orphan_dependents',
                    'propagation_policy',
                    'body',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'grace_period_seconds': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_namespaced_endpoints_endpoint = _Endpoint(
            settings={
                'response_type': (V1Status,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/endpoints/{name}',
                'operation_id': 'delete_namespaced_endpoints',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                    'dry_run',
                    'grace_period_seconds',
                    'orphan_dependents',
                    'propagation_policy',
                    'body',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'grace_period_seconds': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_namespaced_event_endpoint = _Endpoint(
            settings={
                'response_type': (V1Status,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/events/{name}',
                'operation_id': 'delete_namespaced_event',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                    'dry_run',
                    'grace_period_seconds',
                    'orphan_dependents',
                    'propagation_policy',
                    'body',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'grace_period_seconds': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_namespaced_limit_range_endpoint = _Endpoint(
            settings={
                'response_type': (V1Status,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/limitranges/{name}',
                'operation_id': 'delete_namespaced_limit_range',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                    'dry_run',
                    'grace_period_seconds',
                    'orphan_dependents',
                    'propagation_policy',
                    'body',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'grace_period_seconds': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_namespaced_persistent_volume_claim_endpoint = _Endpoint(
            settings={
                'response_type': (V1PersistentVolumeClaim,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}',
                'operation_id': 'delete_namespaced_persistent_volume_claim',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                    'dry_run',
                    'grace_period_seconds',
                    'orphan_dependents',
                    'propagation_policy',
                    'body',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'grace_period_seconds': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_namespaced_pod_endpoint = _Endpoint(
            settings={
                'response_type': (V1Pod,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}',
                'operation_id': 'delete_namespaced_pod',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                    'dry_run',
                    'grace_period_seconds',
                    'orphan_dependents',
                    'propagation_policy',
                    'body',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'grace_period_seconds': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_namespaced_pod_template_endpoint = _Endpoint(
            settings={
                'response_type': (V1PodTemplate,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/podtemplates/{name}',
                'operation_id': 'delete_namespaced_pod_template',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                    'dry_run',
                    'grace_period_seconds',
                    'orphan_dependents',
                    'propagation_policy',
                    'body',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'grace_period_seconds': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_namespaced_replication_controller_endpoint = _Endpoint(
            settings={
                'response_type': (V1Status,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}',
                'operation_id': 'delete_namespaced_replication_controller',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                    'dry_run',
                    'grace_period_seconds',
                    'orphan_dependents',
                    'propagation_policy',
                    'body',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'grace_period_seconds': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_namespaced_resource_quota_endpoint = _Endpoint(
            settings={
                'response_type': (V1ResourceQuota,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/resourcequotas/{name}',
                'operation_id': 'delete_namespaced_resource_quota',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                    'dry_run',
                    'grace_period_seconds',
                    'orphan_dependents',
                    'propagation_policy',
                    'body',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'grace_period_seconds': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_namespaced_secret_endpoint = _Endpoint(
            settings={
                'response_type': (V1Status,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/secrets/{name}',
                'operation_id': 'delete_namespaced_secret',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                    'dry_run',
                    'grace_period_seconds',
                    'orphan_dependents',
                    'propagation_policy',
                    'body',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'grace_period_seconds': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_namespaced_service_endpoint = _Endpoint(
            settings={
                'response_type': (V1Service,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/services/{name}',
                'operation_id': 'delete_namespaced_service',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                    'dry_run',
                    'grace_period_seconds',
                    'orphan_dependents',
                    'propagation_policy',
                    'body',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'grace_period_seconds': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_namespaced_service_account_endpoint = _Endpoint(
            settings={
                'response_type': (V1ServiceAccount,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/serviceaccounts/{name}',
                'operation_id': 'delete_namespaced_service_account',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                    'dry_run',
                    'grace_period_seconds',
                    'orphan_dependents',
                    'propagation_policy',
                    'body',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'grace_period_seconds': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_node_endpoint = _Endpoint(
            settings={
                'response_type': (V1Status,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/nodes/{name}',
                'operation_id': 'delete_node',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'pretty',
                    'dry_run',
                    'grace_period_seconds',
                    'orphan_dependents',
                    'propagation_policy',
                    'body',
                ],
                'required': [
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'name': 'name',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                },
                'location_map': {
                    'name': 'path',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'grace_period_seconds': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_persistent_volume_endpoint = _Endpoint(
            settings={
                'response_type': (V1PersistentVolume,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/persistentvolumes/{name}',
                'operation_id': 'delete_persistent_volume',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'pretty',
                    'dry_run',
                    'grace_period_seconds',
                    'orphan_dependents',
                    'propagation_policy',
                    'body',
                ],
                'required': [
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'grace_period_seconds':
                        (int,),
                    'orphan_dependents':
                        (bool,),
                    'propagation_policy':
                        (str,),
                    'body':
                        (V1DeleteOptions,),
                },
                'attribute_map': {
                    'name': 'name',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'grace_period_seconds': 'gracePeriodSeconds',
                    'orphan_dependents': 'orphanDependents',
                    'propagation_policy': 'propagationPolicy',
                },
                'location_map': {
                    'name': 'path',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'grace_period_seconds': 'query',
                    'orphan_dependents': 'query',
                    'propagation_policy': 'query',
                    'body': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_api_resources_endpoint = _Endpoint(
            settings={
                'response_type': (V1APIResourceList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/',
                'operation_id': 'get_api_resources',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_component_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1ComponentStatusList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/componentstatuses',
                'operation_id': 'list_component_status',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'pretty',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'pretty':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'pretty': 'pretty',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'pretty': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_config_map_for_all_namespaces_endpoint = _Endpoint(
            settings={
                'response_type': (V1ConfigMapList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/configmaps',
                'operation_id': 'list_config_map_for_all_namespaces',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'pretty',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'pretty':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'pretty': 'pretty',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'pretty': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_endpoints_for_all_namespaces_endpoint = _Endpoint(
            settings={
                'response_type': (V1EndpointsList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/endpoints',
                'operation_id': 'list_endpoints_for_all_namespaces',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'pretty',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'pretty':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'pretty': 'pretty',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'pretty': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_event_for_all_namespaces_endpoint = _Endpoint(
            settings={
                'response_type': (CoreV1EventList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/events',
                'operation_id': 'list_event_for_all_namespaces',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'pretty',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'pretty':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'pretty': 'pretty',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'pretty': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_limit_range_for_all_namespaces_endpoint = _Endpoint(
            settings={
                'response_type': (V1LimitRangeList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/limitranges',
                'operation_id': 'list_limit_range_for_all_namespaces',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'pretty',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'pretty':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'pretty': 'pretty',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'pretty': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_namespace_endpoint = _Endpoint(
            settings={
                'response_type': (V1NamespaceList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces',
                'operation_id': 'list_namespace',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'pretty',
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pretty':
                        (str,),
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'pretty': 'pretty',
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'pretty': 'query',
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_namespaced_config_map_endpoint = _Endpoint(
            settings={
                'response_type': (V1ConfigMapList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/configmaps',
                'operation_id': 'list_namespaced_config_map',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'pretty',
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'namespace': 'path',
                    'pretty': 'query',
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_namespaced_endpoints_endpoint = _Endpoint(
            settings={
                'response_type': (V1EndpointsList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/endpoints',
                'operation_id': 'list_namespaced_endpoints',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'pretty',
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'namespace': 'path',
                    'pretty': 'query',
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_namespaced_event_endpoint = _Endpoint(
            settings={
                'response_type': (CoreV1EventList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/events',
                'operation_id': 'list_namespaced_event',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'pretty',
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'namespace': 'path',
                    'pretty': 'query',
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_namespaced_limit_range_endpoint = _Endpoint(
            settings={
                'response_type': (V1LimitRangeList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/limitranges',
                'operation_id': 'list_namespaced_limit_range',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'pretty',
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'namespace': 'path',
                    'pretty': 'query',
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_namespaced_persistent_volume_claim_endpoint = _Endpoint(
            settings={
                'response_type': (V1PersistentVolumeClaimList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/persistentvolumeclaims',
                'operation_id': 'list_namespaced_persistent_volume_claim',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'pretty',
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'namespace': 'path',
                    'pretty': 'query',
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_namespaced_pod_endpoint = _Endpoint(
            settings={
                'response_type': (V1PodList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods',
                'operation_id': 'list_namespaced_pod',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'pretty',
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'namespace': 'path',
                    'pretty': 'query',
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_namespaced_pod_template_endpoint = _Endpoint(
            settings={
                'response_type': (V1PodTemplateList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/podtemplates',
                'operation_id': 'list_namespaced_pod_template',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'pretty',
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'namespace': 'path',
                    'pretty': 'query',
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_namespaced_replication_controller_endpoint = _Endpoint(
            settings={
                'response_type': (V1ReplicationControllerList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/replicationcontrollers',
                'operation_id': 'list_namespaced_replication_controller',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'pretty',
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'namespace': 'path',
                    'pretty': 'query',
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_namespaced_resource_quota_endpoint = _Endpoint(
            settings={
                'response_type': (V1ResourceQuotaList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/resourcequotas',
                'operation_id': 'list_namespaced_resource_quota',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'pretty',
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'namespace': 'path',
                    'pretty': 'query',
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_namespaced_secret_endpoint = _Endpoint(
            settings={
                'response_type': (V1SecretList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/secrets',
                'operation_id': 'list_namespaced_secret',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'pretty',
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'namespace': 'path',
                    'pretty': 'query',
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_namespaced_service_endpoint = _Endpoint(
            settings={
                'response_type': (V1ServiceList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/services',
                'operation_id': 'list_namespaced_service',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'pretty',
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'namespace': 'path',
                    'pretty': 'query',
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_namespaced_service_account_endpoint = _Endpoint(
            settings={
                'response_type': (V1ServiceAccountList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/serviceaccounts',
                'operation_id': 'list_namespaced_service_account',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'namespace',
                    'pretty',
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'namespace': 'path',
                    'pretty': 'query',
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_node_endpoint = _Endpoint(
            settings={
                'response_type': (V1NodeList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/nodes',
                'operation_id': 'list_node',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'pretty',
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pretty':
                        (str,),
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'pretty': 'pretty',
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'pretty': 'query',
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_persistent_volume_endpoint = _Endpoint(
            settings={
                'response_type': (V1PersistentVolumeList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/persistentvolumes',
                'operation_id': 'list_persistent_volume',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'pretty',
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pretty':
                        (str,),
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'pretty': 'pretty',
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'pretty': 'query',
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_persistent_volume_claim_for_all_namespaces_endpoint = _Endpoint(
            settings={
                'response_type': (V1PersistentVolumeClaimList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/persistentvolumeclaims',
                'operation_id': 'list_persistent_volume_claim_for_all_namespaces',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'pretty',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'pretty':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'pretty': 'pretty',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'pretty': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_pod_for_all_namespaces_endpoint = _Endpoint(
            settings={
                'response_type': (V1PodList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/pods',
                'operation_id': 'list_pod_for_all_namespaces',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'pretty',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'pretty':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'pretty': 'pretty',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'pretty': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_pod_template_for_all_namespaces_endpoint = _Endpoint(
            settings={
                'response_type': (V1PodTemplateList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/podtemplates',
                'operation_id': 'list_pod_template_for_all_namespaces',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'pretty',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'pretty':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'pretty': 'pretty',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'pretty': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_replication_controller_for_all_namespaces_endpoint = _Endpoint(
            settings={
                'response_type': (V1ReplicationControllerList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/replicationcontrollers',
                'operation_id': 'list_replication_controller_for_all_namespaces',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'pretty',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'pretty':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'pretty': 'pretty',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'pretty': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_resource_quota_for_all_namespaces_endpoint = _Endpoint(
            settings={
                'response_type': (V1ResourceQuotaList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/resourcequotas',
                'operation_id': 'list_resource_quota_for_all_namespaces',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'pretty',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'pretty':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'pretty': 'pretty',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'pretty': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_secret_for_all_namespaces_endpoint = _Endpoint(
            settings={
                'response_type': (V1SecretList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/secrets',
                'operation_id': 'list_secret_for_all_namespaces',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'pretty',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'pretty':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'pretty': 'pretty',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'pretty': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_service_account_for_all_namespaces_endpoint = _Endpoint(
            settings={
                'response_type': (V1ServiceAccountList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/serviceaccounts',
                'operation_id': 'list_service_account_for_all_namespaces',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'pretty',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'pretty':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'pretty': 'pretty',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'pretty': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.list_service_for_all_namespaces_endpoint = _Endpoint(
            settings={
                'response_type': (V1ServiceList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/services',
                'operation_id': 'list_service_for_all_namespaces',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'allow_watch_bookmarks',
                    '_continue',
                    'field_selector',
                    'label_selector',
                    'limit',
                    'pretty',
                    'resource_version',
                    'resource_version_match',
                    'timeout_seconds',
                    'watch',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'allow_watch_bookmarks':
                        (bool,),
                    '_continue':
                        (str,),
                    'field_selector':
                        (str,),
                    'label_selector':
                        (str,),
                    'limit':
                        (int,),
                    'pretty':
                        (str,),
                    'resource_version':
                        (str,),
                    'resource_version_match':
                        (str,),
                    'timeout_seconds':
                        (int,),
                    'watch':
                        (bool,),
                },
                'attribute_map': {
                    'allow_watch_bookmarks': 'allowWatchBookmarks',
                    '_continue': 'continue',
                    'field_selector': 'fieldSelector',
                    'label_selector': 'labelSelector',
                    'limit': 'limit',
                    'pretty': 'pretty',
                    'resource_version': 'resourceVersion',
                    'resource_version_match': 'resourceVersionMatch',
                    'timeout_seconds': 'timeoutSeconds',
                    'watch': 'watch',
                },
                'location_map': {
                    'allow_watch_bookmarks': 'query',
                    '_continue': 'query',
                    'field_selector': 'query',
                    'label_selector': 'query',
                    'limit': 'query',
                    'pretty': 'query',
                    'resource_version': 'query',
                    'resource_version_match': 'query',
                    'timeout_seconds': 'query',
                    'watch': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf',
                    'application/json;stream=watch',
                    'application/vnd.kubernetes.protobuf;stream=watch'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.patch_namespace_endpoint = _Endpoint(
            settings={
                'response_type': (V1Namespace,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{name}',
                'operation_id': 'patch_namespace',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.patch_namespace_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1Namespace,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{name}/status',
                'operation_id': 'patch_namespace_status',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.patch_namespaced_config_map_endpoint = _Endpoint(
            settings={
                'response_type': (V1ConfigMap,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/configmaps/{name}',
                'operation_id': 'patch_namespaced_config_map',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.patch_namespaced_endpoints_endpoint = _Endpoint(
            settings={
                'response_type': (V1Endpoints,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/endpoints/{name}',
                'operation_id': 'patch_namespaced_endpoints',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.patch_namespaced_event_endpoint = _Endpoint(
            settings={
                'response_type': (CoreV1Event,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/events/{name}',
                'operation_id': 'patch_namespaced_event',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.patch_namespaced_limit_range_endpoint = _Endpoint(
            settings={
                'response_type': (V1LimitRange,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/limitranges/{name}',
                'operation_id': 'patch_namespaced_limit_range',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.patch_namespaced_persistent_volume_claim_endpoint = _Endpoint(
            settings={
                'response_type': (V1PersistentVolumeClaim,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}',
                'operation_id': 'patch_namespaced_persistent_volume_claim',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.patch_namespaced_persistent_volume_claim_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1PersistentVolumeClaim,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status',
                'operation_id': 'patch_namespaced_persistent_volume_claim_status',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.patch_namespaced_pod_endpoint = _Endpoint(
            settings={
                'response_type': (V1Pod,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}',
                'operation_id': 'patch_namespaced_pod',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.patch_namespaced_pod_ephemeralcontainers_endpoint = _Endpoint(
            settings={
                'response_type': (V1Pod,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers',
                'operation_id': 'patch_namespaced_pod_ephemeralcontainers',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.patch_namespaced_pod_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1Pod,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/status',
                'operation_id': 'patch_namespaced_pod_status',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.patch_namespaced_pod_template_endpoint = _Endpoint(
            settings={
                'response_type': (V1PodTemplate,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/podtemplates/{name}',
                'operation_id': 'patch_namespaced_pod_template',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.patch_namespaced_replication_controller_endpoint = _Endpoint(
            settings={
                'response_type': (V1ReplicationController,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}',
                'operation_id': 'patch_namespaced_replication_controller',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.patch_namespaced_replication_controller_scale_endpoint = _Endpoint(
            settings={
                'response_type': (V1Scale,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale',
                'operation_id': 'patch_namespaced_replication_controller_scale',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.patch_namespaced_replication_controller_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1ReplicationController,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status',
                'operation_id': 'patch_namespaced_replication_controller_status',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.patch_namespaced_resource_quota_endpoint = _Endpoint(
            settings={
                'response_type': (V1ResourceQuota,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/resourcequotas/{name}',
                'operation_id': 'patch_namespaced_resource_quota',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.patch_namespaced_resource_quota_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1ResourceQuota,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/resourcequotas/{name}/status',
                'operation_id': 'patch_namespaced_resource_quota_status',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.patch_namespaced_secret_endpoint = _Endpoint(
            settings={
                'response_type': (V1Secret,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/secrets/{name}',
                'operation_id': 'patch_namespaced_secret',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.patch_namespaced_service_endpoint = _Endpoint(
            settings={
                'response_type': (V1Service,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/services/{name}',
                'operation_id': 'patch_namespaced_service',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.patch_namespaced_service_account_endpoint = _Endpoint(
            settings={
                'response_type': (V1ServiceAccount,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/serviceaccounts/{name}',
                'operation_id': 'patch_namespaced_service_account',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.patch_namespaced_service_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1Service,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/services/{name}/status',
                'operation_id': 'patch_namespaced_service_status',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.patch_node_endpoint = _Endpoint(
            settings={
                'response_type': (V1Node,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/nodes/{name}',
                'operation_id': 'patch_node',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.patch_node_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1Node,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/nodes/{name}/status',
                'operation_id': 'patch_node_status',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.patch_persistent_volume_endpoint = _Endpoint(
            settings={
                'response_type': (V1PersistentVolume,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/persistentvolumes/{name}',
                'operation_id': 'patch_persistent_volume',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.patch_persistent_volume_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1PersistentVolume,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/persistentvolumes/{name}/status',
                'operation_id': 'patch_persistent_volume_status',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'force',
                ],
                'required': [
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'body':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'force':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'force': 'force',
                },
                'location_map': {
                    'name': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'force': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [
                    'application/json-patch+json',
                    'application/merge-patch+json',
                    'application/strategic-merge-patch+json',
                    'application/apply-patch+yaml'
                ]
            },
            api_client=api_client
        )
        self.read_component_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1ComponentStatus,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/componentstatuses/{name}',
                'operation_id': 'read_component_status',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'pretty',
                ],
                'required': [
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_namespace_endpoint = _Endpoint(
            settings={
                'response_type': (V1Namespace,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{name}',
                'operation_id': 'read_namespace',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'pretty',
                ],
                'required': [
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_namespace_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1Namespace,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{name}/status',
                'operation_id': 'read_namespace_status',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'pretty',
                ],
                'required': [
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_namespaced_config_map_endpoint = _Endpoint(
            settings={
                'response_type': (V1ConfigMap,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/configmaps/{name}',
                'operation_id': 'read_namespaced_config_map',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_namespaced_endpoints_endpoint = _Endpoint(
            settings={
                'response_type': (V1Endpoints,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/endpoints/{name}',
                'operation_id': 'read_namespaced_endpoints',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_namespaced_event_endpoint = _Endpoint(
            settings={
                'response_type': (CoreV1Event,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/events/{name}',
                'operation_id': 'read_namespaced_event',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_namespaced_limit_range_endpoint = _Endpoint(
            settings={
                'response_type': (V1LimitRange,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/limitranges/{name}',
                'operation_id': 'read_namespaced_limit_range',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_namespaced_persistent_volume_claim_endpoint = _Endpoint(
            settings={
                'response_type': (V1PersistentVolumeClaim,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}',
                'operation_id': 'read_namespaced_persistent_volume_claim',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_namespaced_persistent_volume_claim_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1PersistentVolumeClaim,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status',
                'operation_id': 'read_namespaced_persistent_volume_claim_status',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_namespaced_pod_endpoint = _Endpoint(
            settings={
                'response_type': (V1Pod,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}',
                'operation_id': 'read_namespaced_pod',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_namespaced_pod_ephemeralcontainers_endpoint = _Endpoint(
            settings={
                'response_type': (V1Pod,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers',
                'operation_id': 'read_namespaced_pod_ephemeralcontainers',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_namespaced_pod_log_endpoint = _Endpoint(
            settings={
                'response_type': (str,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/log',
                'operation_id': 'read_namespaced_pod_log',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'container',
                    'follow',
                    'insecure_skip_tls_verify_backend',
                    'limit_bytes',
                    'pretty',
                    'previous',
                    'since_seconds',
                    'tail_lines',
                    'timestamps',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'container':
                        (str,),
                    'follow':
                        (bool,),
                    'insecure_skip_tls_verify_backend':
                        (bool,),
                    'limit_bytes':
                        (int,),
                    'pretty':
                        (str,),
                    'previous':
                        (bool,),
                    'since_seconds':
                        (int,),
                    'tail_lines':
                        (int,),
                    'timestamps':
                        (bool,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'container': 'container',
                    'follow': 'follow',
                    'insecure_skip_tls_verify_backend': 'insecureSkipTLSVerifyBackend',
                    'limit_bytes': 'limitBytes',
                    'pretty': 'pretty',
                    'previous': 'previous',
                    'since_seconds': 'sinceSeconds',
                    'tail_lines': 'tailLines',
                    'timestamps': 'timestamps',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'container': 'query',
                    'follow': 'query',
                    'insecure_skip_tls_verify_backend': 'query',
                    'limit_bytes': 'query',
                    'pretty': 'query',
                    'previous': 'query',
                    'since_seconds': 'query',
                    'tail_lines': 'query',
                    'timestamps': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'text/plain',
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_namespaced_pod_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1Pod,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/status',
                'operation_id': 'read_namespaced_pod_status',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_namespaced_pod_template_endpoint = _Endpoint(
            settings={
                'response_type': (V1PodTemplate,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/podtemplates/{name}',
                'operation_id': 'read_namespaced_pod_template',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_namespaced_replication_controller_endpoint = _Endpoint(
            settings={
                'response_type': (V1ReplicationController,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}',
                'operation_id': 'read_namespaced_replication_controller',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_namespaced_replication_controller_scale_endpoint = _Endpoint(
            settings={
                'response_type': (V1Scale,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale',
                'operation_id': 'read_namespaced_replication_controller_scale',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_namespaced_replication_controller_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1ReplicationController,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status',
                'operation_id': 'read_namespaced_replication_controller_status',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_namespaced_resource_quota_endpoint = _Endpoint(
            settings={
                'response_type': (V1ResourceQuota,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/resourcequotas/{name}',
                'operation_id': 'read_namespaced_resource_quota',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_namespaced_resource_quota_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1ResourceQuota,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/resourcequotas/{name}/status',
                'operation_id': 'read_namespaced_resource_quota_status',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_namespaced_secret_endpoint = _Endpoint(
            settings={
                'response_type': (V1Secret,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/secrets/{name}',
                'operation_id': 'read_namespaced_secret',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_namespaced_service_endpoint = _Endpoint(
            settings={
                'response_type': (V1Service,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/services/{name}',
                'operation_id': 'read_namespaced_service',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_namespaced_service_account_endpoint = _Endpoint(
            settings={
                'response_type': (V1ServiceAccount,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/serviceaccounts/{name}',
                'operation_id': 'read_namespaced_service_account',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_namespaced_service_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1Service,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/services/{name}/status',
                'operation_id': 'read_namespaced_service_status',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'pretty',
                ],
                'required': [
                    'name',
                    'namespace',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_node_endpoint = _Endpoint(
            settings={
                'response_type': (V1Node,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/nodes/{name}',
                'operation_id': 'read_node',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'pretty',
                ],
                'required': [
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_node_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1Node,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/nodes/{name}/status',
                'operation_id': 'read_node_status',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'pretty',
                ],
                'required': [
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_persistent_volume_endpoint = _Endpoint(
            settings={
                'response_type': (V1PersistentVolume,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/persistentvolumes/{name}',
                'operation_id': 'read_persistent_volume',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'pretty',
                ],
                'required': [
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.read_persistent_volume_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1PersistentVolume,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/persistentvolumes/{name}/status',
                'operation_id': 'read_persistent_volume_status',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'pretty',
                ],
                'required': [
                    'name',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_namespace_endpoint = _Endpoint(
            settings={
                'response_type': (V1Namespace,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{name}',
                'operation_id': 'replace_namespace',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'body':
                        (V1Namespace,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_namespace_finalize_endpoint = _Endpoint(
            settings={
                'response_type': (V1Namespace,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{name}/finalize',
                'operation_id': 'replace_namespace_finalize',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'body',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                    'pretty',
                ],
                'required': [
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'body':
                        (V1Namespace,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                    'pretty':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                    'pretty': 'pretty',
                },
                'location_map': {
                    'name': 'path',
                    'body': 'body',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                    'pretty': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_namespace_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1Namespace,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{name}/status',
                'operation_id': 'replace_namespace_status',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'body':
                        (V1Namespace,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_namespaced_config_map_endpoint = _Endpoint(
            settings={
                'response_type': (V1ConfigMap,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/configmaps/{name}',
                'operation_id': 'replace_namespaced_config_map',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (V1ConfigMap,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_namespaced_endpoints_endpoint = _Endpoint(
            settings={
                'response_type': (V1Endpoints,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/endpoints/{name}',
                'operation_id': 'replace_namespaced_endpoints',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (V1Endpoints,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_namespaced_event_endpoint = _Endpoint(
            settings={
                'response_type': (CoreV1Event,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/events/{name}',
                'operation_id': 'replace_namespaced_event',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (CoreV1Event,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_namespaced_limit_range_endpoint = _Endpoint(
            settings={
                'response_type': (V1LimitRange,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/limitranges/{name}',
                'operation_id': 'replace_namespaced_limit_range',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (V1LimitRange,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_namespaced_persistent_volume_claim_endpoint = _Endpoint(
            settings={
                'response_type': (V1PersistentVolumeClaim,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}',
                'operation_id': 'replace_namespaced_persistent_volume_claim',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (V1PersistentVolumeClaim,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_namespaced_persistent_volume_claim_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1PersistentVolumeClaim,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status',
                'operation_id': 'replace_namespaced_persistent_volume_claim_status',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (V1PersistentVolumeClaim,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_namespaced_pod_endpoint = _Endpoint(
            settings={
                'response_type': (V1Pod,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}',
                'operation_id': 'replace_namespaced_pod',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (V1Pod,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_namespaced_pod_ephemeralcontainers_endpoint = _Endpoint(
            settings={
                'response_type': (V1Pod,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers',
                'operation_id': 'replace_namespaced_pod_ephemeralcontainers',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (V1Pod,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_namespaced_pod_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1Pod,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/pods/{name}/status',
                'operation_id': 'replace_namespaced_pod_status',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (V1Pod,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_namespaced_pod_template_endpoint = _Endpoint(
            settings={
                'response_type': (V1PodTemplate,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/podtemplates/{name}',
                'operation_id': 'replace_namespaced_pod_template',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (V1PodTemplate,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_namespaced_replication_controller_endpoint = _Endpoint(
            settings={
                'response_type': (V1ReplicationController,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}',
                'operation_id': 'replace_namespaced_replication_controller',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (V1ReplicationController,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_namespaced_replication_controller_scale_endpoint = _Endpoint(
            settings={
                'response_type': (V1Scale,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale',
                'operation_id': 'replace_namespaced_replication_controller_scale',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (V1Scale,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_namespaced_replication_controller_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1ReplicationController,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status',
                'operation_id': 'replace_namespaced_replication_controller_status',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (V1ReplicationController,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_namespaced_resource_quota_endpoint = _Endpoint(
            settings={
                'response_type': (V1ResourceQuota,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/resourcequotas/{name}',
                'operation_id': 'replace_namespaced_resource_quota',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (V1ResourceQuota,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_namespaced_resource_quota_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1ResourceQuota,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/resourcequotas/{name}/status',
                'operation_id': 'replace_namespaced_resource_quota_status',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (V1ResourceQuota,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_namespaced_secret_endpoint = _Endpoint(
            settings={
                'response_type': (V1Secret,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/secrets/{name}',
                'operation_id': 'replace_namespaced_secret',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (V1Secret,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_namespaced_service_endpoint = _Endpoint(
            settings={
                'response_type': (V1Service,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/services/{name}',
                'operation_id': 'replace_namespaced_service',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (V1Service,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_namespaced_service_account_endpoint = _Endpoint(
            settings={
                'response_type': (V1ServiceAccount,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/serviceaccounts/{name}',
                'operation_id': 'replace_namespaced_service_account',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (V1ServiceAccount,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_namespaced_service_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1Service,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/namespaces/{namespace}/services/{name}/status',
                'operation_id': 'replace_namespaced_service_status',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'namespace',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'namespace',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'namespace':
                        (str,),
                    'body':
                        (V1Service,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'namespace': 'namespace',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'namespace': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_node_endpoint = _Endpoint(
            settings={
                'response_type': (V1Node,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/nodes/{name}',
                'operation_id': 'replace_node',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'body':
                        (V1Node,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_node_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1Node,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/nodes/{name}/status',
                'operation_id': 'replace_node_status',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'body':
                        (V1Node,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_persistent_volume_endpoint = _Endpoint(
            settings={
                'response_type': (V1PersistentVolume,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/persistentvolumes/{name}',
                'operation_id': 'replace_persistent_volume',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'body':
                        (V1PersistentVolume,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.replace_persistent_volume_status_endpoint = _Endpoint(
            settings={
                'response_type': (V1PersistentVolume,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/api/v1/persistentvolumes/{name}/status',
                'operation_id': 'replace_persistent_volume_status',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'name',
                    'body',
                    'pretty',
                    'dry_run',
                    'field_manager',
                    'field_validation',
                ],
                'required': [
                    'name',
                    'body',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'name':
                        (str,),
                    'body':
                        (V1PersistentVolume,),
                    'pretty':
                        (str,),
                    'dry_run':
                        (str,),
                    'field_manager':
                        (str,),
                    'field_validation':
                        (str,),
                },
                'attribute_map': {
                    'name': 'name',
                    'pretty': 'pretty',
                    'dry_run': 'dryRun',
                    'field_manager': 'fieldManager',
                    'field_validation': 'fieldValidation',
                },
                'location_map': {
                    'name': 'path',
                    'body': 'body',
                    'pretty': 'query',
                    'dry_run': 'query',
                    'field_manager': 'query',
                    'field_validation': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/yaml',
                    'application/vnd.kubernetes.protobuf'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def connect_delete_namespaced_pod_proxy(
        self,
        name,
        namespace,
        **kwargs
    ):
        """connect_delete_namespaced_pod_proxy  # noqa: E501

        connect DELETE requests to proxy of Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_delete_namespaced_pod_proxy(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PodProxyOptions
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            path (str): Path is the URL path to use for the current proxy request to pod.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.connect_delete_namespaced_pod_proxy_endpoint.call_with_http_info(**kwargs)

    def connect_delete_namespaced_pod_proxy_with_path(
        self,
        name,
        namespace,
        path,
        **kwargs
    ):
        """connect_delete_namespaced_pod_proxy_with_path  # noqa: E501

        connect DELETE requests to proxy of Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_delete_namespaced_pod_proxy_with_path(name, namespace, path, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PodProxyOptions
            namespace (str): object name and auth scope, such as for teams and projects
            path (str): path to the resource

        Keyword Args:
            path2 (str): Path is the URL path to use for the current proxy request to pod.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['path'] = \
            path
        return self.connect_delete_namespaced_pod_proxy_with_path_endpoint.call_with_http_info(**kwargs)

    def connect_delete_namespaced_service_proxy(
        self,
        name,
        namespace,
        **kwargs
    ):
        """connect_delete_namespaced_service_proxy  # noqa: E501

        connect DELETE requests to proxy of Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_delete_namespaced_service_proxy(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ServiceProxyOptions
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            path (str): Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.connect_delete_namespaced_service_proxy_endpoint.call_with_http_info(**kwargs)

    def connect_delete_namespaced_service_proxy_with_path(
        self,
        name,
        namespace,
        path,
        **kwargs
    ):
        """connect_delete_namespaced_service_proxy_with_path  # noqa: E501

        connect DELETE requests to proxy of Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_delete_namespaced_service_proxy_with_path(name, namespace, path, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ServiceProxyOptions
            namespace (str): object name and auth scope, such as for teams and projects
            path (str): path to the resource

        Keyword Args:
            path2 (str): Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['path'] = \
            path
        return self.connect_delete_namespaced_service_proxy_with_path_endpoint.call_with_http_info(**kwargs)

    def connect_delete_node_proxy(
        self,
        name,
        **kwargs
    ):
        """connect_delete_node_proxy  # noqa: E501

        connect DELETE requests to proxy of Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_delete_node_proxy(name, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the NodeProxyOptions

        Keyword Args:
            path (str): Path is the URL path to use for the current proxy request to node.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        return self.connect_delete_node_proxy_endpoint.call_with_http_info(**kwargs)

    def connect_delete_node_proxy_with_path(
        self,
        name,
        path,
        **kwargs
    ):
        """connect_delete_node_proxy_with_path  # noqa: E501

        connect DELETE requests to proxy of Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_delete_node_proxy_with_path(name, path, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the NodeProxyOptions
            path (str): path to the resource

        Keyword Args:
            path2 (str): Path is the URL path to use for the current proxy request to node.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['path'] = \
            path
        return self.connect_delete_node_proxy_with_path_endpoint.call_with_http_info(**kwargs)

    def connect_get_namespaced_pod_attach(
        self,
        name,
        namespace,
        **kwargs
    ):
        """connect_get_namespaced_pod_attach  # noqa: E501

        connect GET requests to attach of Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_get_namespaced_pod_attach(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PodAttachOptions
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            container (str): The container in which to execute the command. Defaults to only container if there is only one container in the pod.. [optional]
            stderr (bool): Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.. [optional]
            stdin (bool): Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.. [optional]
            stdout (bool): Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.. [optional]
            tty (bool): TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.connect_get_namespaced_pod_attach_endpoint.call_with_http_info(**kwargs)

    def connect_get_namespaced_pod_exec(
        self,
        name,
        namespace,
        **kwargs
    ):
        """connect_get_namespaced_pod_exec  # noqa: E501

        connect GET requests to exec of Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_get_namespaced_pod_exec(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PodExecOptions
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            command (str): Command is the remote command to execute. argv array. Not executed within a shell.. [optional]
            container (str): Container in which to execute the command. Defaults to only container if there is only one container in the pod.. [optional]
            stderr (bool): Redirect the standard error stream of the pod for this call.. [optional]
            stdin (bool): Redirect the standard input stream of the pod for this call. Defaults to false.. [optional]
            stdout (bool): Redirect the standard output stream of the pod for this call.. [optional]
            tty (bool): TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.connect_get_namespaced_pod_exec_endpoint.call_with_http_info(**kwargs)

    def connect_get_namespaced_pod_portforward(
        self,
        name,
        namespace,
        **kwargs
    ):
        """connect_get_namespaced_pod_portforward  # noqa: E501

        connect GET requests to portforward of Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_get_namespaced_pod_portforward(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PodPortForwardOptions
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            ports (int): List of ports to forward Required when using WebSockets. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.connect_get_namespaced_pod_portforward_endpoint.call_with_http_info(**kwargs)

    def connect_get_namespaced_pod_proxy(
        self,
        name,
        namespace,
        **kwargs
    ):
        """connect_get_namespaced_pod_proxy  # noqa: E501

        connect GET requests to proxy of Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_get_namespaced_pod_proxy(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PodProxyOptions
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            path (str): Path is the URL path to use for the current proxy request to pod.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.connect_get_namespaced_pod_proxy_endpoint.call_with_http_info(**kwargs)

    def connect_get_namespaced_pod_proxy_with_path(
        self,
        name,
        namespace,
        path,
        **kwargs
    ):
        """connect_get_namespaced_pod_proxy_with_path  # noqa: E501

        connect GET requests to proxy of Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_get_namespaced_pod_proxy_with_path(name, namespace, path, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PodProxyOptions
            namespace (str): object name and auth scope, such as for teams and projects
            path (str): path to the resource

        Keyword Args:
            path2 (str): Path is the URL path to use for the current proxy request to pod.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['path'] = \
            path
        return self.connect_get_namespaced_pod_proxy_with_path_endpoint.call_with_http_info(**kwargs)

    def connect_get_namespaced_service_proxy(
        self,
        name,
        namespace,
        **kwargs
    ):
        """connect_get_namespaced_service_proxy  # noqa: E501

        connect GET requests to proxy of Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_get_namespaced_service_proxy(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ServiceProxyOptions
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            path (str): Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.connect_get_namespaced_service_proxy_endpoint.call_with_http_info(**kwargs)

    def connect_get_namespaced_service_proxy_with_path(
        self,
        name,
        namespace,
        path,
        **kwargs
    ):
        """connect_get_namespaced_service_proxy_with_path  # noqa: E501

        connect GET requests to proxy of Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_get_namespaced_service_proxy_with_path(name, namespace, path, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ServiceProxyOptions
            namespace (str): object name and auth scope, such as for teams and projects
            path (str): path to the resource

        Keyword Args:
            path2 (str): Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['path'] = \
            path
        return self.connect_get_namespaced_service_proxy_with_path_endpoint.call_with_http_info(**kwargs)

    def connect_get_node_proxy(
        self,
        name,
        **kwargs
    ):
        """connect_get_node_proxy  # noqa: E501

        connect GET requests to proxy of Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_get_node_proxy(name, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the NodeProxyOptions

        Keyword Args:
            path (str): Path is the URL path to use for the current proxy request to node.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        return self.connect_get_node_proxy_endpoint.call_with_http_info(**kwargs)

    def connect_get_node_proxy_with_path(
        self,
        name,
        path,
        **kwargs
    ):
        """connect_get_node_proxy_with_path  # noqa: E501

        connect GET requests to proxy of Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_get_node_proxy_with_path(name, path, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the NodeProxyOptions
            path (str): path to the resource

        Keyword Args:
            path2 (str): Path is the URL path to use for the current proxy request to node.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['path'] = \
            path
        return self.connect_get_node_proxy_with_path_endpoint.call_with_http_info(**kwargs)

    def connect_head_namespaced_pod_proxy(
        self,
        name,
        namespace,
        **kwargs
    ):
        """connect_head_namespaced_pod_proxy  # noqa: E501

        connect HEAD requests to proxy of Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_head_namespaced_pod_proxy(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PodProxyOptions
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            path (str): Path is the URL path to use for the current proxy request to pod.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.connect_head_namespaced_pod_proxy_endpoint.call_with_http_info(**kwargs)

    def connect_head_namespaced_pod_proxy_with_path(
        self,
        name,
        namespace,
        path,
        **kwargs
    ):
        """connect_head_namespaced_pod_proxy_with_path  # noqa: E501

        connect HEAD requests to proxy of Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_head_namespaced_pod_proxy_with_path(name, namespace, path, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PodProxyOptions
            namespace (str): object name and auth scope, such as for teams and projects
            path (str): path to the resource

        Keyword Args:
            path2 (str): Path is the URL path to use for the current proxy request to pod.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['path'] = \
            path
        return self.connect_head_namespaced_pod_proxy_with_path_endpoint.call_with_http_info(**kwargs)

    def connect_head_namespaced_service_proxy(
        self,
        name,
        namespace,
        **kwargs
    ):
        """connect_head_namespaced_service_proxy  # noqa: E501

        connect HEAD requests to proxy of Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_head_namespaced_service_proxy(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ServiceProxyOptions
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            path (str): Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.connect_head_namespaced_service_proxy_endpoint.call_with_http_info(**kwargs)

    def connect_head_namespaced_service_proxy_with_path(
        self,
        name,
        namespace,
        path,
        **kwargs
    ):
        """connect_head_namespaced_service_proxy_with_path  # noqa: E501

        connect HEAD requests to proxy of Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_head_namespaced_service_proxy_with_path(name, namespace, path, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ServiceProxyOptions
            namespace (str): object name and auth scope, such as for teams and projects
            path (str): path to the resource

        Keyword Args:
            path2 (str): Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['path'] = \
            path
        return self.connect_head_namespaced_service_proxy_with_path_endpoint.call_with_http_info(**kwargs)

    def connect_head_node_proxy(
        self,
        name,
        **kwargs
    ):
        """connect_head_node_proxy  # noqa: E501

        connect HEAD requests to proxy of Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_head_node_proxy(name, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the NodeProxyOptions

        Keyword Args:
            path (str): Path is the URL path to use for the current proxy request to node.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        return self.connect_head_node_proxy_endpoint.call_with_http_info(**kwargs)

    def connect_head_node_proxy_with_path(
        self,
        name,
        path,
        **kwargs
    ):
        """connect_head_node_proxy_with_path  # noqa: E501

        connect HEAD requests to proxy of Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_head_node_proxy_with_path(name, path, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the NodeProxyOptions
            path (str): path to the resource

        Keyword Args:
            path2 (str): Path is the URL path to use for the current proxy request to node.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['path'] = \
            path
        return self.connect_head_node_proxy_with_path_endpoint.call_with_http_info(**kwargs)

    def connect_options_namespaced_pod_proxy(
        self,
        name,
        namespace,
        **kwargs
    ):
        """connect_options_namespaced_pod_proxy  # noqa: E501

        connect OPTIONS requests to proxy of Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_options_namespaced_pod_proxy(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PodProxyOptions
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            path (str): Path is the URL path to use for the current proxy request to pod.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.connect_options_namespaced_pod_proxy_endpoint.call_with_http_info(**kwargs)

    def connect_options_namespaced_pod_proxy_with_path(
        self,
        name,
        namespace,
        path,
        **kwargs
    ):
        """connect_options_namespaced_pod_proxy_with_path  # noqa: E501

        connect OPTIONS requests to proxy of Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_options_namespaced_pod_proxy_with_path(name, namespace, path, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PodProxyOptions
            namespace (str): object name and auth scope, such as for teams and projects
            path (str): path to the resource

        Keyword Args:
            path2 (str): Path is the URL path to use for the current proxy request to pod.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['path'] = \
            path
        return self.connect_options_namespaced_pod_proxy_with_path_endpoint.call_with_http_info(**kwargs)

    def connect_options_namespaced_service_proxy(
        self,
        name,
        namespace,
        **kwargs
    ):
        """connect_options_namespaced_service_proxy  # noqa: E501

        connect OPTIONS requests to proxy of Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_options_namespaced_service_proxy(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ServiceProxyOptions
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            path (str): Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.connect_options_namespaced_service_proxy_endpoint.call_with_http_info(**kwargs)

    def connect_options_namespaced_service_proxy_with_path(
        self,
        name,
        namespace,
        path,
        **kwargs
    ):
        """connect_options_namespaced_service_proxy_with_path  # noqa: E501

        connect OPTIONS requests to proxy of Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_options_namespaced_service_proxy_with_path(name, namespace, path, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ServiceProxyOptions
            namespace (str): object name and auth scope, such as for teams and projects
            path (str): path to the resource

        Keyword Args:
            path2 (str): Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['path'] = \
            path
        return self.connect_options_namespaced_service_proxy_with_path_endpoint.call_with_http_info(**kwargs)

    def connect_options_node_proxy(
        self,
        name,
        **kwargs
    ):
        """connect_options_node_proxy  # noqa: E501

        connect OPTIONS requests to proxy of Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_options_node_proxy(name, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the NodeProxyOptions

        Keyword Args:
            path (str): Path is the URL path to use for the current proxy request to node.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        return self.connect_options_node_proxy_endpoint.call_with_http_info(**kwargs)

    def connect_options_node_proxy_with_path(
        self,
        name,
        path,
        **kwargs
    ):
        """connect_options_node_proxy_with_path  # noqa: E501

        connect OPTIONS requests to proxy of Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_options_node_proxy_with_path(name, path, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the NodeProxyOptions
            path (str): path to the resource

        Keyword Args:
            path2 (str): Path is the URL path to use for the current proxy request to node.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['path'] = \
            path
        return self.connect_options_node_proxy_with_path_endpoint.call_with_http_info(**kwargs)

    def connect_patch_namespaced_pod_proxy(
        self,
        name,
        namespace,
        **kwargs
    ):
        """connect_patch_namespaced_pod_proxy  # noqa: E501

        connect PATCH requests to proxy of Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_patch_namespaced_pod_proxy(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PodProxyOptions
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            path (str): Path is the URL path to use for the current proxy request to pod.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.connect_patch_namespaced_pod_proxy_endpoint.call_with_http_info(**kwargs)

    def connect_patch_namespaced_pod_proxy_with_path(
        self,
        name,
        namespace,
        path,
        **kwargs
    ):
        """connect_patch_namespaced_pod_proxy_with_path  # noqa: E501

        connect PATCH requests to proxy of Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_patch_namespaced_pod_proxy_with_path(name, namespace, path, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PodProxyOptions
            namespace (str): object name and auth scope, such as for teams and projects
            path (str): path to the resource

        Keyword Args:
            path2 (str): Path is the URL path to use for the current proxy request to pod.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['path'] = \
            path
        return self.connect_patch_namespaced_pod_proxy_with_path_endpoint.call_with_http_info(**kwargs)

    def connect_patch_namespaced_service_proxy(
        self,
        name,
        namespace,
        **kwargs
    ):
        """connect_patch_namespaced_service_proxy  # noqa: E501

        connect PATCH requests to proxy of Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_patch_namespaced_service_proxy(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ServiceProxyOptions
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            path (str): Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.connect_patch_namespaced_service_proxy_endpoint.call_with_http_info(**kwargs)

    def connect_patch_namespaced_service_proxy_with_path(
        self,
        name,
        namespace,
        path,
        **kwargs
    ):
        """connect_patch_namespaced_service_proxy_with_path  # noqa: E501

        connect PATCH requests to proxy of Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_patch_namespaced_service_proxy_with_path(name, namespace, path, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ServiceProxyOptions
            namespace (str): object name and auth scope, such as for teams and projects
            path (str): path to the resource

        Keyword Args:
            path2 (str): Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['path'] = \
            path
        return self.connect_patch_namespaced_service_proxy_with_path_endpoint.call_with_http_info(**kwargs)

    def connect_patch_node_proxy(
        self,
        name,
        **kwargs
    ):
        """connect_patch_node_proxy  # noqa: E501

        connect PATCH requests to proxy of Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_patch_node_proxy(name, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the NodeProxyOptions

        Keyword Args:
            path (str): Path is the URL path to use for the current proxy request to node.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        return self.connect_patch_node_proxy_endpoint.call_with_http_info(**kwargs)

    def connect_patch_node_proxy_with_path(
        self,
        name,
        path,
        **kwargs
    ):
        """connect_patch_node_proxy_with_path  # noqa: E501

        connect PATCH requests to proxy of Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_patch_node_proxy_with_path(name, path, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the NodeProxyOptions
            path (str): path to the resource

        Keyword Args:
            path2 (str): Path is the URL path to use for the current proxy request to node.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['path'] = \
            path
        return self.connect_patch_node_proxy_with_path_endpoint.call_with_http_info(**kwargs)

    def connect_post_namespaced_pod_attach(
        self,
        name,
        namespace,
        **kwargs
    ):
        """connect_post_namespaced_pod_attach  # noqa: E501

        connect POST requests to attach of Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_post_namespaced_pod_attach(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PodAttachOptions
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            container (str): The container in which to execute the command. Defaults to only container if there is only one container in the pod.. [optional]
            stderr (bool): Stderr if true indicates that stderr is to be redirected for the attach call. Defaults to true.. [optional]
            stdin (bool): Stdin if true, redirects the standard input stream of the pod for this call. Defaults to false.. [optional]
            stdout (bool): Stdout if true indicates that stdout is to be redirected for the attach call. Defaults to true.. [optional]
            tty (bool): TTY if true indicates that a tty will be allocated for the attach call. This is passed through the container runtime so the tty is allocated on the worker node by the container runtime. Defaults to false.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.connect_post_namespaced_pod_attach_endpoint.call_with_http_info(**kwargs)

    def connect_post_namespaced_pod_exec(
        self,
        name,
        namespace,
        **kwargs
    ):
        """connect_post_namespaced_pod_exec  # noqa: E501

        connect POST requests to exec of Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_post_namespaced_pod_exec(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PodExecOptions
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            command (str): Command is the remote command to execute. argv array. Not executed within a shell.. [optional]
            container (str): Container in which to execute the command. Defaults to only container if there is only one container in the pod.. [optional]
            stderr (bool): Redirect the standard error stream of the pod for this call.. [optional]
            stdin (bool): Redirect the standard input stream of the pod for this call. Defaults to false.. [optional]
            stdout (bool): Redirect the standard output stream of the pod for this call.. [optional]
            tty (bool): TTY if true indicates that a tty will be allocated for the exec call. Defaults to false.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.connect_post_namespaced_pod_exec_endpoint.call_with_http_info(**kwargs)

    def connect_post_namespaced_pod_portforward(
        self,
        name,
        namespace,
        **kwargs
    ):
        """connect_post_namespaced_pod_portforward  # noqa: E501

        connect POST requests to portforward of Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_post_namespaced_pod_portforward(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PodPortForwardOptions
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            ports (int): List of ports to forward Required when using WebSockets. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.connect_post_namespaced_pod_portforward_endpoint.call_with_http_info(**kwargs)

    def connect_post_namespaced_pod_proxy(
        self,
        name,
        namespace,
        **kwargs
    ):
        """connect_post_namespaced_pod_proxy  # noqa: E501

        connect POST requests to proxy of Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_post_namespaced_pod_proxy(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PodProxyOptions
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            path (str): Path is the URL path to use for the current proxy request to pod.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.connect_post_namespaced_pod_proxy_endpoint.call_with_http_info(**kwargs)

    def connect_post_namespaced_pod_proxy_with_path(
        self,
        name,
        namespace,
        path,
        **kwargs
    ):
        """connect_post_namespaced_pod_proxy_with_path  # noqa: E501

        connect POST requests to proxy of Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_post_namespaced_pod_proxy_with_path(name, namespace, path, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PodProxyOptions
            namespace (str): object name and auth scope, such as for teams and projects
            path (str): path to the resource

        Keyword Args:
            path2 (str): Path is the URL path to use for the current proxy request to pod.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['path'] = \
            path
        return self.connect_post_namespaced_pod_proxy_with_path_endpoint.call_with_http_info(**kwargs)

    def connect_post_namespaced_service_proxy(
        self,
        name,
        namespace,
        **kwargs
    ):
        """connect_post_namespaced_service_proxy  # noqa: E501

        connect POST requests to proxy of Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_post_namespaced_service_proxy(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ServiceProxyOptions
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            path (str): Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.connect_post_namespaced_service_proxy_endpoint.call_with_http_info(**kwargs)

    def connect_post_namespaced_service_proxy_with_path(
        self,
        name,
        namespace,
        path,
        **kwargs
    ):
        """connect_post_namespaced_service_proxy_with_path  # noqa: E501

        connect POST requests to proxy of Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_post_namespaced_service_proxy_with_path(name, namespace, path, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ServiceProxyOptions
            namespace (str): object name and auth scope, such as for teams and projects
            path (str): path to the resource

        Keyword Args:
            path2 (str): Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['path'] = \
            path
        return self.connect_post_namespaced_service_proxy_with_path_endpoint.call_with_http_info(**kwargs)

    def connect_post_node_proxy(
        self,
        name,
        **kwargs
    ):
        """connect_post_node_proxy  # noqa: E501

        connect POST requests to proxy of Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_post_node_proxy(name, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the NodeProxyOptions

        Keyword Args:
            path (str): Path is the URL path to use for the current proxy request to node.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        return self.connect_post_node_proxy_endpoint.call_with_http_info(**kwargs)

    def connect_post_node_proxy_with_path(
        self,
        name,
        path,
        **kwargs
    ):
        """connect_post_node_proxy_with_path  # noqa: E501

        connect POST requests to proxy of Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_post_node_proxy_with_path(name, path, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the NodeProxyOptions
            path (str): path to the resource

        Keyword Args:
            path2 (str): Path is the URL path to use for the current proxy request to node.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['path'] = \
            path
        return self.connect_post_node_proxy_with_path_endpoint.call_with_http_info(**kwargs)

    def connect_put_namespaced_pod_proxy(
        self,
        name,
        namespace,
        **kwargs
    ):
        """connect_put_namespaced_pod_proxy  # noqa: E501

        connect PUT requests to proxy of Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_put_namespaced_pod_proxy(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PodProxyOptions
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            path (str): Path is the URL path to use for the current proxy request to pod.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.connect_put_namespaced_pod_proxy_endpoint.call_with_http_info(**kwargs)

    def connect_put_namespaced_pod_proxy_with_path(
        self,
        name,
        namespace,
        path,
        **kwargs
    ):
        """connect_put_namespaced_pod_proxy_with_path  # noqa: E501

        connect PUT requests to proxy of Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_put_namespaced_pod_proxy_with_path(name, namespace, path, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PodProxyOptions
            namespace (str): object name and auth scope, such as for teams and projects
            path (str): path to the resource

        Keyword Args:
            path2 (str): Path is the URL path to use for the current proxy request to pod.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['path'] = \
            path
        return self.connect_put_namespaced_pod_proxy_with_path_endpoint.call_with_http_info(**kwargs)

    def connect_put_namespaced_service_proxy(
        self,
        name,
        namespace,
        **kwargs
    ):
        """connect_put_namespaced_service_proxy  # noqa: E501

        connect PUT requests to proxy of Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_put_namespaced_service_proxy(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ServiceProxyOptions
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            path (str): Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.connect_put_namespaced_service_proxy_endpoint.call_with_http_info(**kwargs)

    def connect_put_namespaced_service_proxy_with_path(
        self,
        name,
        namespace,
        path,
        **kwargs
    ):
        """connect_put_namespaced_service_proxy_with_path  # noqa: E501

        connect PUT requests to proxy of Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_put_namespaced_service_proxy_with_path(name, namespace, path, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ServiceProxyOptions
            namespace (str): object name and auth scope, such as for teams and projects
            path (str): path to the resource

        Keyword Args:
            path2 (str): Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy. Path is _search?q=user:kimchy.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['path'] = \
            path
        return self.connect_put_namespaced_service_proxy_with_path_endpoint.call_with_http_info(**kwargs)

    def connect_put_node_proxy(
        self,
        name,
        **kwargs
    ):
        """connect_put_node_proxy  # noqa: E501

        connect PUT requests to proxy of Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_put_node_proxy(name, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the NodeProxyOptions

        Keyword Args:
            path (str): Path is the URL path to use for the current proxy request to node.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        return self.connect_put_node_proxy_endpoint.call_with_http_info(**kwargs)

    def connect_put_node_proxy_with_path(
        self,
        name,
        path,
        **kwargs
    ):
        """connect_put_node_proxy_with_path  # noqa: E501

        connect PUT requests to proxy of Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.connect_put_node_proxy_with_path(name, path, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the NodeProxyOptions
            path (str): path to the resource

        Keyword Args:
            path2 (str): Path is the URL path to use for the current proxy request to node.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['path'] = \
            path
        return self.connect_put_node_proxy_with_path_endpoint.call_with_http_info(**kwargs)

    def create_namespace(
        self,
        body,
        **kwargs
    ):
        """create_namespace  # noqa: E501

        create a Namespace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_namespace(body, async_req=True)
        >>> result = thread.get()

        Args:
            body (V1Namespace):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Namespace
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['body'] = \
            body
        return self.create_namespace_endpoint.call_with_http_info(**kwargs)

    def create_namespaced_binding(
        self,
        namespace,
        body,
        **kwargs
    ):
        """create_namespaced_binding  # noqa: E501

        create a Binding  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_namespaced_binding(namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1Binding):

        Keyword Args:
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Binding
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.create_namespaced_binding_endpoint.call_with_http_info(**kwargs)

    def create_namespaced_config_map(
        self,
        namespace,
        body,
        **kwargs
    ):
        """create_namespaced_config_map  # noqa: E501

        create a ConfigMap  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_namespaced_config_map(namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1ConfigMap):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ConfigMap
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.create_namespaced_config_map_endpoint.call_with_http_info(**kwargs)

    def create_namespaced_endpoints(
        self,
        namespace,
        body,
        **kwargs
    ):
        """create_namespaced_endpoints  # noqa: E501

        create Endpoints  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_namespaced_endpoints(namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1Endpoints):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Endpoints
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.create_namespaced_endpoints_endpoint.call_with_http_info(**kwargs)

    def create_namespaced_event(
        self,
        namespace,
        body,
        **kwargs
    ):
        """create_namespaced_event  # noqa: E501

        create an Event  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_namespaced_event(namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects
            body (CoreV1Event):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CoreV1Event
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.create_namespaced_event_endpoint.call_with_http_info(**kwargs)

    def create_namespaced_limit_range(
        self,
        namespace,
        body,
        **kwargs
    ):
        """create_namespaced_limit_range  # noqa: E501

        create a LimitRange  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_namespaced_limit_range(namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1LimitRange):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1LimitRange
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.create_namespaced_limit_range_endpoint.call_with_http_info(**kwargs)

    def create_namespaced_persistent_volume_claim(
        self,
        namespace,
        body,
        **kwargs
    ):
        """create_namespaced_persistent_volume_claim  # noqa: E501

        create a PersistentVolumeClaim  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_namespaced_persistent_volume_claim(namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1PersistentVolumeClaim):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1PersistentVolumeClaim
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.create_namespaced_persistent_volume_claim_endpoint.call_with_http_info(**kwargs)

    def create_namespaced_pod(
        self,
        namespace,
        body,
        **kwargs
    ):
        """create_namespaced_pod  # noqa: E501

        create a Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_namespaced_pod(namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1Pod):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Pod
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.create_namespaced_pod_endpoint.call_with_http_info(**kwargs)

    def create_namespaced_pod_binding(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """create_namespaced_pod_binding  # noqa: E501

        create binding of a Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_namespaced_pod_binding(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Binding
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1Binding):

        Keyword Args:
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Binding
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.create_namespaced_pod_binding_endpoint.call_with_http_info(**kwargs)

    def create_namespaced_pod_eviction(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """create_namespaced_pod_eviction  # noqa: E501

        create eviction of a Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_namespaced_pod_eviction(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Eviction
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1Eviction):

        Keyword Args:
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Eviction
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.create_namespaced_pod_eviction_endpoint.call_with_http_info(**kwargs)

    def create_namespaced_pod_template(
        self,
        namespace,
        body,
        **kwargs
    ):
        """create_namespaced_pod_template  # noqa: E501

        create a PodTemplate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_namespaced_pod_template(namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1PodTemplate):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1PodTemplate
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.create_namespaced_pod_template_endpoint.call_with_http_info(**kwargs)

    def create_namespaced_replication_controller(
        self,
        namespace,
        body,
        **kwargs
    ):
        """create_namespaced_replication_controller  # noqa: E501

        create a ReplicationController  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_namespaced_replication_controller(namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1ReplicationController):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ReplicationController
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.create_namespaced_replication_controller_endpoint.call_with_http_info(**kwargs)

    def create_namespaced_resource_quota(
        self,
        namespace,
        body,
        **kwargs
    ):
        """create_namespaced_resource_quota  # noqa: E501

        create a ResourceQuota  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_namespaced_resource_quota(namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1ResourceQuota):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ResourceQuota
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.create_namespaced_resource_quota_endpoint.call_with_http_info(**kwargs)

    def create_namespaced_secret(
        self,
        namespace,
        body,
        **kwargs
    ):
        """create_namespaced_secret  # noqa: E501

        create a Secret  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_namespaced_secret(namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1Secret):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Secret
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.create_namespaced_secret_endpoint.call_with_http_info(**kwargs)

    def create_namespaced_service(
        self,
        namespace,
        body,
        **kwargs
    ):
        """create_namespaced_service  # noqa: E501

        create a Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_namespaced_service(namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1Service):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Service
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.create_namespaced_service_endpoint.call_with_http_info(**kwargs)

    def create_namespaced_service_account(
        self,
        namespace,
        body,
        **kwargs
    ):
        """create_namespaced_service_account  # noqa: E501

        create a ServiceAccount  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_namespaced_service_account(namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1ServiceAccount):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ServiceAccount
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.create_namespaced_service_account_endpoint.call_with_http_info(**kwargs)

    def create_namespaced_service_account_token(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """create_namespaced_service_account_token  # noqa: E501

        create token of a ServiceAccount  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_namespaced_service_account_token(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the TokenRequest
            namespace (str): object name and auth scope, such as for teams and projects
            body (AuthenticationV1TokenRequest):

        Keyword Args:
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            AuthenticationV1TokenRequest
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.create_namespaced_service_account_token_endpoint.call_with_http_info(**kwargs)

    def create_node(
        self,
        body,
        **kwargs
    ):
        """create_node  # noqa: E501

        create a Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_node(body, async_req=True)
        >>> result = thread.get()

        Args:
            body (V1Node):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Node
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['body'] = \
            body
        return self.create_node_endpoint.call_with_http_info(**kwargs)

    def create_persistent_volume(
        self,
        body,
        **kwargs
    ):
        """create_persistent_volume  # noqa: E501

        create a PersistentVolume  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_persistent_volume(body, async_req=True)
        >>> result = thread.get()

        Args:
            body (V1PersistentVolume):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1PersistentVolume
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['body'] = \
            body
        return self.create_persistent_volume_endpoint.call_with_http_info(**kwargs)

    def delete_collection_namespaced_config_map(
        self,
        namespace,
        **kwargs
    ):
        """delete_collection_namespaced_config_map  # noqa: E501

        delete collection of ConfigMap  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_collection_namespaced_config_map(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Status
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        return self.delete_collection_namespaced_config_map_endpoint.call_with_http_info(**kwargs)

    def delete_collection_namespaced_endpoints(
        self,
        namespace,
        **kwargs
    ):
        """delete_collection_namespaced_endpoints  # noqa: E501

        delete collection of Endpoints  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_collection_namespaced_endpoints(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Status
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        return self.delete_collection_namespaced_endpoints_endpoint.call_with_http_info(**kwargs)

    def delete_collection_namespaced_event(
        self,
        namespace,
        **kwargs
    ):
        """delete_collection_namespaced_event  # noqa: E501

        delete collection of Event  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_collection_namespaced_event(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Status
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        return self.delete_collection_namespaced_event_endpoint.call_with_http_info(**kwargs)

    def delete_collection_namespaced_limit_range(
        self,
        namespace,
        **kwargs
    ):
        """delete_collection_namespaced_limit_range  # noqa: E501

        delete collection of LimitRange  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_collection_namespaced_limit_range(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Status
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        return self.delete_collection_namespaced_limit_range_endpoint.call_with_http_info(**kwargs)

    def delete_collection_namespaced_persistent_volume_claim(
        self,
        namespace,
        **kwargs
    ):
        """delete_collection_namespaced_persistent_volume_claim  # noqa: E501

        delete collection of PersistentVolumeClaim  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_collection_namespaced_persistent_volume_claim(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Status
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        return self.delete_collection_namespaced_persistent_volume_claim_endpoint.call_with_http_info(**kwargs)

    def delete_collection_namespaced_pod(
        self,
        namespace,
        **kwargs
    ):
        """delete_collection_namespaced_pod  # noqa: E501

        delete collection of Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_collection_namespaced_pod(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Status
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        return self.delete_collection_namespaced_pod_endpoint.call_with_http_info(**kwargs)

    def delete_collection_namespaced_pod_template(
        self,
        namespace,
        **kwargs
    ):
        """delete_collection_namespaced_pod_template  # noqa: E501

        delete collection of PodTemplate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_collection_namespaced_pod_template(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Status
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        return self.delete_collection_namespaced_pod_template_endpoint.call_with_http_info(**kwargs)

    def delete_collection_namespaced_replication_controller(
        self,
        namespace,
        **kwargs
    ):
        """delete_collection_namespaced_replication_controller  # noqa: E501

        delete collection of ReplicationController  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_collection_namespaced_replication_controller(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Status
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        return self.delete_collection_namespaced_replication_controller_endpoint.call_with_http_info(**kwargs)

    def delete_collection_namespaced_resource_quota(
        self,
        namespace,
        **kwargs
    ):
        """delete_collection_namespaced_resource_quota  # noqa: E501

        delete collection of ResourceQuota  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_collection_namespaced_resource_quota(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Status
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        return self.delete_collection_namespaced_resource_quota_endpoint.call_with_http_info(**kwargs)

    def delete_collection_namespaced_secret(
        self,
        namespace,
        **kwargs
    ):
        """delete_collection_namespaced_secret  # noqa: E501

        delete collection of Secret  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_collection_namespaced_secret(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Status
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        return self.delete_collection_namespaced_secret_endpoint.call_with_http_info(**kwargs)

    def delete_collection_namespaced_service(
        self,
        namespace,
        **kwargs
    ):
        """delete_collection_namespaced_service  # noqa: E501

        delete collection of Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_collection_namespaced_service(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Status
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        return self.delete_collection_namespaced_service_endpoint.call_with_http_info(**kwargs)

    def delete_collection_namespaced_service_account(
        self,
        namespace,
        **kwargs
    ):
        """delete_collection_namespaced_service_account  # noqa: E501

        delete collection of ServiceAccount  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_collection_namespaced_service_account(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Status
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        return self.delete_collection_namespaced_service_account_endpoint.call_with_http_info(**kwargs)

    def delete_collection_node(
        self,
        **kwargs
    ):
        """delete_collection_node  # noqa: E501

        delete collection of Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_collection_node(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Status
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.delete_collection_node_endpoint.call_with_http_info(**kwargs)

    def delete_collection_persistent_volume(
        self,
        **kwargs
    ):
        """delete_collection_persistent_volume  # noqa: E501

        delete collection of PersistentVolume  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_collection_persistent_volume(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Status
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.delete_collection_persistent_volume_endpoint.call_with_http_info(**kwargs)

    def delete_namespace(
        self,
        name,
        **kwargs
    ):
        """delete_namespace  # noqa: E501

        delete a Namespace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_namespace(name, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Namespace

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Status
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        return self.delete_namespace_endpoint.call_with_http_info(**kwargs)

    def delete_namespaced_config_map(
        self,
        name,
        namespace,
        **kwargs
    ):
        """delete_namespaced_config_map  # noqa: E501

        delete a ConfigMap  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_namespaced_config_map(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ConfigMap
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Status
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.delete_namespaced_config_map_endpoint.call_with_http_info(**kwargs)

    def delete_namespaced_endpoints(
        self,
        name,
        namespace,
        **kwargs
    ):
        """delete_namespaced_endpoints  # noqa: E501

        delete Endpoints  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_namespaced_endpoints(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Endpoints
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Status
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.delete_namespaced_endpoints_endpoint.call_with_http_info(**kwargs)

    def delete_namespaced_event(
        self,
        name,
        namespace,
        **kwargs
    ):
        """delete_namespaced_event  # noqa: E501

        delete an Event  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_namespaced_event(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Event
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Status
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.delete_namespaced_event_endpoint.call_with_http_info(**kwargs)

    def delete_namespaced_limit_range(
        self,
        name,
        namespace,
        **kwargs
    ):
        """delete_namespaced_limit_range  # noqa: E501

        delete a LimitRange  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_namespaced_limit_range(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the LimitRange
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Status
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.delete_namespaced_limit_range_endpoint.call_with_http_info(**kwargs)

    def delete_namespaced_persistent_volume_claim(
        self,
        name,
        namespace,
        **kwargs
    ):
        """delete_namespaced_persistent_volume_claim  # noqa: E501

        delete a PersistentVolumeClaim  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_namespaced_persistent_volume_claim(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PersistentVolumeClaim
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1PersistentVolumeClaim
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.delete_namespaced_persistent_volume_claim_endpoint.call_with_http_info(**kwargs)

    def delete_namespaced_pod(
        self,
        name,
        namespace,
        **kwargs
    ):
        """delete_namespaced_pod  # noqa: E501

        delete a Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_namespaced_pod(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Pod
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Pod
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.delete_namespaced_pod_endpoint.call_with_http_info(**kwargs)

    def delete_namespaced_pod_template(
        self,
        name,
        namespace,
        **kwargs
    ):
        """delete_namespaced_pod_template  # noqa: E501

        delete a PodTemplate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_namespaced_pod_template(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PodTemplate
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1PodTemplate
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.delete_namespaced_pod_template_endpoint.call_with_http_info(**kwargs)

    def delete_namespaced_replication_controller(
        self,
        name,
        namespace,
        **kwargs
    ):
        """delete_namespaced_replication_controller  # noqa: E501

        delete a ReplicationController  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_namespaced_replication_controller(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ReplicationController
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Status
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.delete_namespaced_replication_controller_endpoint.call_with_http_info(**kwargs)

    def delete_namespaced_resource_quota(
        self,
        name,
        namespace,
        **kwargs
    ):
        """delete_namespaced_resource_quota  # noqa: E501

        delete a ResourceQuota  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_namespaced_resource_quota(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ResourceQuota
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ResourceQuota
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.delete_namespaced_resource_quota_endpoint.call_with_http_info(**kwargs)

    def delete_namespaced_secret(
        self,
        name,
        namespace,
        **kwargs
    ):
        """delete_namespaced_secret  # noqa: E501

        delete a Secret  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_namespaced_secret(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Secret
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Status
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.delete_namespaced_secret_endpoint.call_with_http_info(**kwargs)

    def delete_namespaced_service(
        self,
        name,
        namespace,
        **kwargs
    ):
        """delete_namespaced_service  # noqa: E501

        delete a Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_namespaced_service(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Service
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Service
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.delete_namespaced_service_endpoint.call_with_http_info(**kwargs)

    def delete_namespaced_service_account(
        self,
        name,
        namespace,
        **kwargs
    ):
        """delete_namespaced_service_account  # noqa: E501

        delete a ServiceAccount  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_namespaced_service_account(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ServiceAccount
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ServiceAccount
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.delete_namespaced_service_account_endpoint.call_with_http_info(**kwargs)

    def delete_node(
        self,
        name,
        **kwargs
    ):
        """delete_node  # noqa: E501

        delete a Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_node(name, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Node

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Status
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        return self.delete_node_endpoint.call_with_http_info(**kwargs)

    def delete_persistent_volume(
        self,
        name,
        **kwargs
    ):
        """delete_persistent_volume  # noqa: E501

        delete a PersistentVolume  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_persistent_volume(name, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PersistentVolume

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            grace_period_seconds (int): The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.. [optional]
            orphan_dependents (bool): Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.. [optional]
            propagation_policy (str): Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.. [optional]
            body (V1DeleteOptions): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1PersistentVolume
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        return self.delete_persistent_volume_endpoint.call_with_http_info(**kwargs)

    def get_api_resources(
        self,
        **kwargs
    ):
        """get_api_resources  # noqa: E501

        get available resources  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_api_resources(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1APIResourceList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.get_api_resources_endpoint.call_with_http_info(**kwargs)

    def list_component_status(
        self,
        **kwargs
    ):
        """list_component_status  # noqa: E501

        list objects of kind ComponentStatus  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_component_status(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ComponentStatusList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_component_status_endpoint.call_with_http_info(**kwargs)

    def list_config_map_for_all_namespaces(
        self,
        **kwargs
    ):
        """list_config_map_for_all_namespaces  # noqa: E501

        list or watch objects of kind ConfigMap  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_config_map_for_all_namespaces(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ConfigMapList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_config_map_for_all_namespaces_endpoint.call_with_http_info(**kwargs)

    def list_endpoints_for_all_namespaces(
        self,
        **kwargs
    ):
        """list_endpoints_for_all_namespaces  # noqa: E501

        list or watch objects of kind Endpoints  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_endpoints_for_all_namespaces(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1EndpointsList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_endpoints_for_all_namespaces_endpoint.call_with_http_info(**kwargs)

    def list_event_for_all_namespaces(
        self,
        **kwargs
    ):
        """list_event_for_all_namespaces  # noqa: E501

        list or watch objects of kind Event  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_event_for_all_namespaces(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CoreV1EventList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_event_for_all_namespaces_endpoint.call_with_http_info(**kwargs)

    def list_limit_range_for_all_namespaces(
        self,
        **kwargs
    ):
        """list_limit_range_for_all_namespaces  # noqa: E501

        list or watch objects of kind LimitRange  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_limit_range_for_all_namespaces(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1LimitRangeList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_limit_range_for_all_namespaces_endpoint.call_with_http_info(**kwargs)

    def list_namespace(
        self,
        **kwargs
    ):
        """list_namespace  # noqa: E501

        list or watch objects of kind Namespace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_namespace(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1NamespaceList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_namespace_endpoint.call_with_http_info(**kwargs)

    def list_namespaced_config_map(
        self,
        namespace,
        **kwargs
    ):
        """list_namespaced_config_map  # noqa: E501

        list or watch objects of kind ConfigMap  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_namespaced_config_map(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ConfigMapList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        return self.list_namespaced_config_map_endpoint.call_with_http_info(**kwargs)

    def list_namespaced_endpoints(
        self,
        namespace,
        **kwargs
    ):
        """list_namespaced_endpoints  # noqa: E501

        list or watch objects of kind Endpoints  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_namespaced_endpoints(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1EndpointsList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        return self.list_namespaced_endpoints_endpoint.call_with_http_info(**kwargs)

    def list_namespaced_event(
        self,
        namespace,
        **kwargs
    ):
        """list_namespaced_event  # noqa: E501

        list or watch objects of kind Event  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_namespaced_event(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CoreV1EventList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        return self.list_namespaced_event_endpoint.call_with_http_info(**kwargs)

    def list_namespaced_limit_range(
        self,
        namespace,
        **kwargs
    ):
        """list_namespaced_limit_range  # noqa: E501

        list or watch objects of kind LimitRange  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_namespaced_limit_range(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1LimitRangeList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        return self.list_namespaced_limit_range_endpoint.call_with_http_info(**kwargs)

    def list_namespaced_persistent_volume_claim(
        self,
        namespace,
        **kwargs
    ):
        """list_namespaced_persistent_volume_claim  # noqa: E501

        list or watch objects of kind PersistentVolumeClaim  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_namespaced_persistent_volume_claim(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1PersistentVolumeClaimList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        return self.list_namespaced_persistent_volume_claim_endpoint.call_with_http_info(**kwargs)

    def list_namespaced_pod(
        self,
        namespace,
        **kwargs
    ):
        """list_namespaced_pod  # noqa: E501

        list or watch objects of kind Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_namespaced_pod(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1PodList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        return self.list_namespaced_pod_endpoint.call_with_http_info(**kwargs)

    def list_namespaced_pod_template(
        self,
        namespace,
        **kwargs
    ):
        """list_namespaced_pod_template  # noqa: E501

        list or watch objects of kind PodTemplate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_namespaced_pod_template(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1PodTemplateList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        return self.list_namespaced_pod_template_endpoint.call_with_http_info(**kwargs)

    def list_namespaced_replication_controller(
        self,
        namespace,
        **kwargs
    ):
        """list_namespaced_replication_controller  # noqa: E501

        list or watch objects of kind ReplicationController  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_namespaced_replication_controller(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ReplicationControllerList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        return self.list_namespaced_replication_controller_endpoint.call_with_http_info(**kwargs)

    def list_namespaced_resource_quota(
        self,
        namespace,
        **kwargs
    ):
        """list_namespaced_resource_quota  # noqa: E501

        list or watch objects of kind ResourceQuota  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_namespaced_resource_quota(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ResourceQuotaList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        return self.list_namespaced_resource_quota_endpoint.call_with_http_info(**kwargs)

    def list_namespaced_secret(
        self,
        namespace,
        **kwargs
    ):
        """list_namespaced_secret  # noqa: E501

        list or watch objects of kind Secret  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_namespaced_secret(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1SecretList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        return self.list_namespaced_secret_endpoint.call_with_http_info(**kwargs)

    def list_namespaced_service(
        self,
        namespace,
        **kwargs
    ):
        """list_namespaced_service  # noqa: E501

        list or watch objects of kind Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_namespaced_service(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ServiceList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        return self.list_namespaced_service_endpoint.call_with_http_info(**kwargs)

    def list_namespaced_service_account(
        self,
        namespace,
        **kwargs
    ):
        """list_namespaced_service_account  # noqa: E501

        list or watch objects of kind ServiceAccount  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_namespaced_service_account(namespace, async_req=True)
        >>> result = thread.get()

        Args:
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ServiceAccountList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['namespace'] = \
            namespace
        return self.list_namespaced_service_account_endpoint.call_with_http_info(**kwargs)

    def list_node(
        self,
        **kwargs
    ):
        """list_node  # noqa: E501

        list or watch objects of kind Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_node(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1NodeList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_node_endpoint.call_with_http_info(**kwargs)

    def list_persistent_volume(
        self,
        **kwargs
    ):
        """list_persistent_volume  # noqa: E501

        list or watch objects of kind PersistentVolume  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_persistent_volume(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1PersistentVolumeList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_persistent_volume_endpoint.call_with_http_info(**kwargs)

    def list_persistent_volume_claim_for_all_namespaces(
        self,
        **kwargs
    ):
        """list_persistent_volume_claim_for_all_namespaces  # noqa: E501

        list or watch objects of kind PersistentVolumeClaim  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_persistent_volume_claim_for_all_namespaces(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1PersistentVolumeClaimList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_persistent_volume_claim_for_all_namespaces_endpoint.call_with_http_info(**kwargs)

    def list_pod_for_all_namespaces(
        self,
        **kwargs
    ):
        """list_pod_for_all_namespaces  # noqa: E501

        list or watch objects of kind Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_pod_for_all_namespaces(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1PodList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_pod_for_all_namespaces_endpoint.call_with_http_info(**kwargs)

    def list_pod_template_for_all_namespaces(
        self,
        **kwargs
    ):
        """list_pod_template_for_all_namespaces  # noqa: E501

        list or watch objects of kind PodTemplate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_pod_template_for_all_namespaces(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1PodTemplateList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_pod_template_for_all_namespaces_endpoint.call_with_http_info(**kwargs)

    def list_replication_controller_for_all_namespaces(
        self,
        **kwargs
    ):
        """list_replication_controller_for_all_namespaces  # noqa: E501

        list or watch objects of kind ReplicationController  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_replication_controller_for_all_namespaces(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ReplicationControllerList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_replication_controller_for_all_namespaces_endpoint.call_with_http_info(**kwargs)

    def list_resource_quota_for_all_namespaces(
        self,
        **kwargs
    ):
        """list_resource_quota_for_all_namespaces  # noqa: E501

        list or watch objects of kind ResourceQuota  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_resource_quota_for_all_namespaces(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ResourceQuotaList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_resource_quota_for_all_namespaces_endpoint.call_with_http_info(**kwargs)

    def list_secret_for_all_namespaces(
        self,
        **kwargs
    ):
        """list_secret_for_all_namespaces  # noqa: E501

        list or watch objects of kind Secret  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_secret_for_all_namespaces(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1SecretList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_secret_for_all_namespaces_endpoint.call_with_http_info(**kwargs)

    def list_service_account_for_all_namespaces(
        self,
        **kwargs
    ):
        """list_service_account_for_all_namespaces  # noqa: E501

        list or watch objects of kind ServiceAccount  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_service_account_for_all_namespaces(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ServiceAccountList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_service_account_for_all_namespaces_endpoint.call_with_http_info(**kwargs)

    def list_service_for_all_namespaces(
        self,
        **kwargs
    ):
        """list_service_for_all_namespaces  # noqa: E501

        list or watch objects of kind Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_service_for_all_namespaces(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            allow_watch_bookmarks (bool): allowWatchBookmarks requests watch events with type \"BOOKMARK\". Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. If this is not a watch, this field is ignored.. [optional]
            _continue (str): The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".  This field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.. [optional]
            field_selector (str): A selector to restrict the list of returned objects by their fields. Defaults to everything.. [optional]
            label_selector (str): A selector to restrict the list of returned objects by their labels. Defaults to everything.. [optional]
            limit (int): limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.  The server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.. [optional]
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            resource_version (str): resourceVersion sets a constraint on what resource versions a request may be served from. See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            resource_version_match (str): resourceVersionMatch determines how resourceVersion is applied to list calls. It is highly recommended that resourceVersionMatch be set for list calls where resourceVersion is set See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions for details.  Defaults to unset. [optional]
            timeout_seconds (int): Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.. [optional]
            watch (bool): Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ServiceList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.list_service_for_all_namespaces_endpoint.call_with_http_info(**kwargs)

    def patch_namespace(
        self,
        name,
        body,
        **kwargs
    ):
        """patch_namespace  # noqa: E501

        partially update the specified Namespace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_namespace(name, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Namespace
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Namespace
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['body'] = \
            body
        return self.patch_namespace_endpoint.call_with_http_info(**kwargs)

    def patch_namespace_status(
        self,
        name,
        body,
        **kwargs
    ):
        """patch_namespace_status  # noqa: E501

        partially update status of the specified Namespace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_namespace_status(name, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Namespace
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Namespace
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['body'] = \
            body
        return self.patch_namespace_status_endpoint.call_with_http_info(**kwargs)

    def patch_namespaced_config_map(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """patch_namespaced_config_map  # noqa: E501

        partially update the specified ConfigMap  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_namespaced_config_map(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ConfigMap
            namespace (str): object name and auth scope, such as for teams and projects
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ConfigMap
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.patch_namespaced_config_map_endpoint.call_with_http_info(**kwargs)

    def patch_namespaced_endpoints(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """patch_namespaced_endpoints  # noqa: E501

        partially update the specified Endpoints  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_namespaced_endpoints(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Endpoints
            namespace (str): object name and auth scope, such as for teams and projects
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Endpoints
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.patch_namespaced_endpoints_endpoint.call_with_http_info(**kwargs)

    def patch_namespaced_event(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """patch_namespaced_event  # noqa: E501

        partially update the specified Event  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_namespaced_event(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Event
            namespace (str): object name and auth scope, such as for teams and projects
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CoreV1Event
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.patch_namespaced_event_endpoint.call_with_http_info(**kwargs)

    def patch_namespaced_limit_range(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """patch_namespaced_limit_range  # noqa: E501

        partially update the specified LimitRange  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_namespaced_limit_range(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the LimitRange
            namespace (str): object name and auth scope, such as for teams and projects
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1LimitRange
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.patch_namespaced_limit_range_endpoint.call_with_http_info(**kwargs)

    def patch_namespaced_persistent_volume_claim(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """patch_namespaced_persistent_volume_claim  # noqa: E501

        partially update the specified PersistentVolumeClaim  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_namespaced_persistent_volume_claim(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PersistentVolumeClaim
            namespace (str): object name and auth scope, such as for teams and projects
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1PersistentVolumeClaim
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.patch_namespaced_persistent_volume_claim_endpoint.call_with_http_info(**kwargs)

    def patch_namespaced_persistent_volume_claim_status(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """patch_namespaced_persistent_volume_claim_status  # noqa: E501

        partially update status of the specified PersistentVolumeClaim  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_namespaced_persistent_volume_claim_status(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PersistentVolumeClaim
            namespace (str): object name and auth scope, such as for teams and projects
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1PersistentVolumeClaim
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.patch_namespaced_persistent_volume_claim_status_endpoint.call_with_http_info(**kwargs)

    def patch_namespaced_pod(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """patch_namespaced_pod  # noqa: E501

        partially update the specified Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_namespaced_pod(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Pod
            namespace (str): object name and auth scope, such as for teams and projects
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Pod
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.patch_namespaced_pod_endpoint.call_with_http_info(**kwargs)

    def patch_namespaced_pod_ephemeralcontainers(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """patch_namespaced_pod_ephemeralcontainers  # noqa: E501

        partially update ephemeralcontainers of the specified Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_namespaced_pod_ephemeralcontainers(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Pod
            namespace (str): object name and auth scope, such as for teams and projects
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Pod
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.patch_namespaced_pod_ephemeralcontainers_endpoint.call_with_http_info(**kwargs)

    def patch_namespaced_pod_status(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """patch_namespaced_pod_status  # noqa: E501

        partially update status of the specified Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_namespaced_pod_status(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Pod
            namespace (str): object name and auth scope, such as for teams and projects
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Pod
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.patch_namespaced_pod_status_endpoint.call_with_http_info(**kwargs)

    def patch_namespaced_pod_template(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """patch_namespaced_pod_template  # noqa: E501

        partially update the specified PodTemplate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_namespaced_pod_template(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PodTemplate
            namespace (str): object name and auth scope, such as for teams and projects
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1PodTemplate
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.patch_namespaced_pod_template_endpoint.call_with_http_info(**kwargs)

    def patch_namespaced_replication_controller(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """patch_namespaced_replication_controller  # noqa: E501

        partially update the specified ReplicationController  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_namespaced_replication_controller(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ReplicationController
            namespace (str): object name and auth scope, such as for teams and projects
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ReplicationController
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.patch_namespaced_replication_controller_endpoint.call_with_http_info(**kwargs)

    def patch_namespaced_replication_controller_scale(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """patch_namespaced_replication_controller_scale  # noqa: E501

        partially update scale of the specified ReplicationController  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_namespaced_replication_controller_scale(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Scale
            namespace (str): object name and auth scope, such as for teams and projects
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Scale
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.patch_namespaced_replication_controller_scale_endpoint.call_with_http_info(**kwargs)

    def patch_namespaced_replication_controller_status(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """patch_namespaced_replication_controller_status  # noqa: E501

        partially update status of the specified ReplicationController  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_namespaced_replication_controller_status(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ReplicationController
            namespace (str): object name and auth scope, such as for teams and projects
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ReplicationController
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.patch_namespaced_replication_controller_status_endpoint.call_with_http_info(**kwargs)

    def patch_namespaced_resource_quota(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """patch_namespaced_resource_quota  # noqa: E501

        partially update the specified ResourceQuota  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_namespaced_resource_quota(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ResourceQuota
            namespace (str): object name and auth scope, such as for teams and projects
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ResourceQuota
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.patch_namespaced_resource_quota_endpoint.call_with_http_info(**kwargs)

    def patch_namespaced_resource_quota_status(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """patch_namespaced_resource_quota_status  # noqa: E501

        partially update status of the specified ResourceQuota  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_namespaced_resource_quota_status(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ResourceQuota
            namespace (str): object name and auth scope, such as for teams and projects
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ResourceQuota
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.patch_namespaced_resource_quota_status_endpoint.call_with_http_info(**kwargs)

    def patch_namespaced_secret(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """patch_namespaced_secret  # noqa: E501

        partially update the specified Secret  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_namespaced_secret(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Secret
            namespace (str): object name and auth scope, such as for teams and projects
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Secret
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.patch_namespaced_secret_endpoint.call_with_http_info(**kwargs)

    def patch_namespaced_service(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """patch_namespaced_service  # noqa: E501

        partially update the specified Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_namespaced_service(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Service
            namespace (str): object name and auth scope, such as for teams and projects
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Service
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.patch_namespaced_service_endpoint.call_with_http_info(**kwargs)

    def patch_namespaced_service_account(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """patch_namespaced_service_account  # noqa: E501

        partially update the specified ServiceAccount  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_namespaced_service_account(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ServiceAccount
            namespace (str): object name and auth scope, such as for teams and projects
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ServiceAccount
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.patch_namespaced_service_account_endpoint.call_with_http_info(**kwargs)

    def patch_namespaced_service_status(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """patch_namespaced_service_status  # noqa: E501

        partially update status of the specified Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_namespaced_service_status(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Service
            namespace (str): object name and auth scope, such as for teams and projects
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Service
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.patch_namespaced_service_status_endpoint.call_with_http_info(**kwargs)

    def patch_node(
        self,
        name,
        body,
        **kwargs
    ):
        """patch_node  # noqa: E501

        partially update the specified Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_node(name, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Node
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Node
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['body'] = \
            body
        return self.patch_node_endpoint.call_with_http_info(**kwargs)

    def patch_node_status(
        self,
        name,
        body,
        **kwargs
    ):
        """patch_node_status  # noqa: E501

        partially update status of the specified Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_node_status(name, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Node
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Node
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['body'] = \
            body
        return self.patch_node_status_endpoint.call_with_http_info(**kwargs)

    def patch_persistent_volume(
        self,
        name,
        body,
        **kwargs
    ):
        """patch_persistent_volume  # noqa: E501

        partially update the specified PersistentVolume  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_persistent_volume(name, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PersistentVolume
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1PersistentVolume
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['body'] = \
            body
        return self.patch_persistent_volume_endpoint.call_with_http_info(**kwargs)

    def patch_persistent_volume_status(
        self,
        name,
        body,
        **kwargs
    ):
        """patch_persistent_volume_status  # noqa: E501

        partially update status of the specified PersistentVolume  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_persistent_volume_status(name, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PersistentVolume
            body (bool, date, datetime, dict, float, int, list, str, none_type):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint. This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            force (bool): Force is going to \"force\" Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1PersistentVolume
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['body'] = \
            body
        return self.patch_persistent_volume_status_endpoint.call_with_http_info(**kwargs)

    def read_component_status(
        self,
        name,
        **kwargs
    ):
        """read_component_status  # noqa: E501

        read the specified ComponentStatus  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_component_status(name, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ComponentStatus

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ComponentStatus
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        return self.read_component_status_endpoint.call_with_http_info(**kwargs)

    def read_namespace(
        self,
        name,
        **kwargs
    ):
        """read_namespace  # noqa: E501

        read the specified Namespace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_namespace(name, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Namespace

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Namespace
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        return self.read_namespace_endpoint.call_with_http_info(**kwargs)

    def read_namespace_status(
        self,
        name,
        **kwargs
    ):
        """read_namespace_status  # noqa: E501

        read status of the specified Namespace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_namespace_status(name, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Namespace

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Namespace
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        return self.read_namespace_status_endpoint.call_with_http_info(**kwargs)

    def read_namespaced_config_map(
        self,
        name,
        namespace,
        **kwargs
    ):
        """read_namespaced_config_map  # noqa: E501

        read the specified ConfigMap  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_namespaced_config_map(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ConfigMap
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ConfigMap
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.read_namespaced_config_map_endpoint.call_with_http_info(**kwargs)

    def read_namespaced_endpoints(
        self,
        name,
        namespace,
        **kwargs
    ):
        """read_namespaced_endpoints  # noqa: E501

        read the specified Endpoints  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_namespaced_endpoints(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Endpoints
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Endpoints
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.read_namespaced_endpoints_endpoint.call_with_http_info(**kwargs)

    def read_namespaced_event(
        self,
        name,
        namespace,
        **kwargs
    ):
        """read_namespaced_event  # noqa: E501

        read the specified Event  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_namespaced_event(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Event
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CoreV1Event
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.read_namespaced_event_endpoint.call_with_http_info(**kwargs)

    def read_namespaced_limit_range(
        self,
        name,
        namespace,
        **kwargs
    ):
        """read_namespaced_limit_range  # noqa: E501

        read the specified LimitRange  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_namespaced_limit_range(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the LimitRange
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1LimitRange
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.read_namespaced_limit_range_endpoint.call_with_http_info(**kwargs)

    def read_namespaced_persistent_volume_claim(
        self,
        name,
        namespace,
        **kwargs
    ):
        """read_namespaced_persistent_volume_claim  # noqa: E501

        read the specified PersistentVolumeClaim  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_namespaced_persistent_volume_claim(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PersistentVolumeClaim
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1PersistentVolumeClaim
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.read_namespaced_persistent_volume_claim_endpoint.call_with_http_info(**kwargs)

    def read_namespaced_persistent_volume_claim_status(
        self,
        name,
        namespace,
        **kwargs
    ):
        """read_namespaced_persistent_volume_claim_status  # noqa: E501

        read status of the specified PersistentVolumeClaim  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_namespaced_persistent_volume_claim_status(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PersistentVolumeClaim
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1PersistentVolumeClaim
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.read_namespaced_persistent_volume_claim_status_endpoint.call_with_http_info(**kwargs)

    def read_namespaced_pod(
        self,
        name,
        namespace,
        **kwargs
    ):
        """read_namespaced_pod  # noqa: E501

        read the specified Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_namespaced_pod(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Pod
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Pod
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.read_namespaced_pod_endpoint.call_with_http_info(**kwargs)

    def read_namespaced_pod_ephemeralcontainers(
        self,
        name,
        namespace,
        **kwargs
    ):
        """read_namespaced_pod_ephemeralcontainers  # noqa: E501

        read ephemeralcontainers of the specified Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_namespaced_pod_ephemeralcontainers(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Pod
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Pod
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.read_namespaced_pod_ephemeralcontainers_endpoint.call_with_http_info(**kwargs)

    def read_namespaced_pod_log(
        self,
        name,
        namespace,
        **kwargs
    ):
        """read_namespaced_pod_log  # noqa: E501

        read log of the specified Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_namespaced_pod_log(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Pod
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            container (str): The container for which to stream logs. Defaults to only container if there is one container in the pod.. [optional]
            follow (bool): Follow the log stream of the pod. Defaults to false.. [optional]
            insecure_skip_tls_verify_backend (bool): insecureSkipTLSVerifyBackend indicates that the apiserver should not confirm the validity of the serving certificate of the backend it is connecting to.  This will make the HTTPS connection between the apiserver and the backend insecure. This means the apiserver cannot verify the log data it is receiving came from the real kubelet.  If the kubelet is configured to verify the apiserver's TLS credentials, it does not mean the connection to the real kubelet is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real kubelet).. [optional]
            limit_bytes (int): If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.. [optional]
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            previous (bool): Return previous terminated container logs. Defaults to false.. [optional]
            since_seconds (int): A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.. [optional]
            tail_lines (int): If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime. [optional]
            timestamps (bool): If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            str
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.read_namespaced_pod_log_endpoint.call_with_http_info(**kwargs)

    def read_namespaced_pod_status(
        self,
        name,
        namespace,
        **kwargs
    ):
        """read_namespaced_pod_status  # noqa: E501

        read status of the specified Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_namespaced_pod_status(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Pod
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Pod
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.read_namespaced_pod_status_endpoint.call_with_http_info(**kwargs)

    def read_namespaced_pod_template(
        self,
        name,
        namespace,
        **kwargs
    ):
        """read_namespaced_pod_template  # noqa: E501

        read the specified PodTemplate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_namespaced_pod_template(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PodTemplate
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1PodTemplate
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.read_namespaced_pod_template_endpoint.call_with_http_info(**kwargs)

    def read_namespaced_replication_controller(
        self,
        name,
        namespace,
        **kwargs
    ):
        """read_namespaced_replication_controller  # noqa: E501

        read the specified ReplicationController  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_namespaced_replication_controller(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ReplicationController
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ReplicationController
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.read_namespaced_replication_controller_endpoint.call_with_http_info(**kwargs)

    def read_namespaced_replication_controller_scale(
        self,
        name,
        namespace,
        **kwargs
    ):
        """read_namespaced_replication_controller_scale  # noqa: E501

        read scale of the specified ReplicationController  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_namespaced_replication_controller_scale(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Scale
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Scale
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.read_namespaced_replication_controller_scale_endpoint.call_with_http_info(**kwargs)

    def read_namespaced_replication_controller_status(
        self,
        name,
        namespace,
        **kwargs
    ):
        """read_namespaced_replication_controller_status  # noqa: E501

        read status of the specified ReplicationController  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_namespaced_replication_controller_status(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ReplicationController
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ReplicationController
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.read_namespaced_replication_controller_status_endpoint.call_with_http_info(**kwargs)

    def read_namespaced_resource_quota(
        self,
        name,
        namespace,
        **kwargs
    ):
        """read_namespaced_resource_quota  # noqa: E501

        read the specified ResourceQuota  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_namespaced_resource_quota(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ResourceQuota
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ResourceQuota
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.read_namespaced_resource_quota_endpoint.call_with_http_info(**kwargs)

    def read_namespaced_resource_quota_status(
        self,
        name,
        namespace,
        **kwargs
    ):
        """read_namespaced_resource_quota_status  # noqa: E501

        read status of the specified ResourceQuota  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_namespaced_resource_quota_status(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ResourceQuota
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ResourceQuota
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.read_namespaced_resource_quota_status_endpoint.call_with_http_info(**kwargs)

    def read_namespaced_secret(
        self,
        name,
        namespace,
        **kwargs
    ):
        """read_namespaced_secret  # noqa: E501

        read the specified Secret  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_namespaced_secret(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Secret
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Secret
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.read_namespaced_secret_endpoint.call_with_http_info(**kwargs)

    def read_namespaced_service(
        self,
        name,
        namespace,
        **kwargs
    ):
        """read_namespaced_service  # noqa: E501

        read the specified Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_namespaced_service(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Service
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Service
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.read_namespaced_service_endpoint.call_with_http_info(**kwargs)

    def read_namespaced_service_account(
        self,
        name,
        namespace,
        **kwargs
    ):
        """read_namespaced_service_account  # noqa: E501

        read the specified ServiceAccount  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_namespaced_service_account(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ServiceAccount
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ServiceAccount
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.read_namespaced_service_account_endpoint.call_with_http_info(**kwargs)

    def read_namespaced_service_status(
        self,
        name,
        namespace,
        **kwargs
    ):
        """read_namespaced_service_status  # noqa: E501

        read status of the specified Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_namespaced_service_status(name, namespace, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Service
            namespace (str): object name and auth scope, such as for teams and projects

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Service
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        return self.read_namespaced_service_status_endpoint.call_with_http_info(**kwargs)

    def read_node(
        self,
        name,
        **kwargs
    ):
        """read_node  # noqa: E501

        read the specified Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_node(name, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Node

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Node
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        return self.read_node_endpoint.call_with_http_info(**kwargs)

    def read_node_status(
        self,
        name,
        **kwargs
    ):
        """read_node_status  # noqa: E501

        read status of the specified Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_node_status(name, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Node

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Node
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        return self.read_node_status_endpoint.call_with_http_info(**kwargs)

    def read_persistent_volume(
        self,
        name,
        **kwargs
    ):
        """read_persistent_volume  # noqa: E501

        read the specified PersistentVolume  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_persistent_volume(name, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PersistentVolume

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1PersistentVolume
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        return self.read_persistent_volume_endpoint.call_with_http_info(**kwargs)

    def read_persistent_volume_status(
        self,
        name,
        **kwargs
    ):
        """read_persistent_volume_status  # noqa: E501

        read status of the specified PersistentVolume  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.read_persistent_volume_status(name, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PersistentVolume

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1PersistentVolume
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        return self.read_persistent_volume_status_endpoint.call_with_http_info(**kwargs)

    def replace_namespace(
        self,
        name,
        body,
        **kwargs
    ):
        """replace_namespace  # noqa: E501

        replace the specified Namespace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_namespace(name, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Namespace
            body (V1Namespace):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Namespace
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['body'] = \
            body
        return self.replace_namespace_endpoint.call_with_http_info(**kwargs)

    def replace_namespace_finalize(
        self,
        name,
        body,
        **kwargs
    ):
        """replace_namespace_finalize  # noqa: E501

        replace finalize of the specified Namespace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_namespace_finalize(name, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Namespace
            body (V1Namespace):

        Keyword Args:
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Namespace
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['body'] = \
            body
        return self.replace_namespace_finalize_endpoint.call_with_http_info(**kwargs)

    def replace_namespace_status(
        self,
        name,
        body,
        **kwargs
    ):
        """replace_namespace_status  # noqa: E501

        replace status of the specified Namespace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_namespace_status(name, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Namespace
            body (V1Namespace):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Namespace
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['body'] = \
            body
        return self.replace_namespace_status_endpoint.call_with_http_info(**kwargs)

    def replace_namespaced_config_map(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """replace_namespaced_config_map  # noqa: E501

        replace the specified ConfigMap  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_namespaced_config_map(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ConfigMap
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1ConfigMap):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ConfigMap
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.replace_namespaced_config_map_endpoint.call_with_http_info(**kwargs)

    def replace_namespaced_endpoints(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """replace_namespaced_endpoints  # noqa: E501

        replace the specified Endpoints  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_namespaced_endpoints(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Endpoints
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1Endpoints):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Endpoints
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.replace_namespaced_endpoints_endpoint.call_with_http_info(**kwargs)

    def replace_namespaced_event(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """replace_namespaced_event  # noqa: E501

        replace the specified Event  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_namespaced_event(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Event
            namespace (str): object name and auth scope, such as for teams and projects
            body (CoreV1Event):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            CoreV1Event
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.replace_namespaced_event_endpoint.call_with_http_info(**kwargs)

    def replace_namespaced_limit_range(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """replace_namespaced_limit_range  # noqa: E501

        replace the specified LimitRange  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_namespaced_limit_range(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the LimitRange
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1LimitRange):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1LimitRange
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.replace_namespaced_limit_range_endpoint.call_with_http_info(**kwargs)

    def replace_namespaced_persistent_volume_claim(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """replace_namespaced_persistent_volume_claim  # noqa: E501

        replace the specified PersistentVolumeClaim  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_namespaced_persistent_volume_claim(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PersistentVolumeClaim
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1PersistentVolumeClaim):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1PersistentVolumeClaim
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.replace_namespaced_persistent_volume_claim_endpoint.call_with_http_info(**kwargs)

    def replace_namespaced_persistent_volume_claim_status(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """replace_namespaced_persistent_volume_claim_status  # noqa: E501

        replace status of the specified PersistentVolumeClaim  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_namespaced_persistent_volume_claim_status(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PersistentVolumeClaim
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1PersistentVolumeClaim):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1PersistentVolumeClaim
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.replace_namespaced_persistent_volume_claim_status_endpoint.call_with_http_info(**kwargs)

    def replace_namespaced_pod(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """replace_namespaced_pod  # noqa: E501

        replace the specified Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_namespaced_pod(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Pod
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1Pod):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Pod
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.replace_namespaced_pod_endpoint.call_with_http_info(**kwargs)

    def replace_namespaced_pod_ephemeralcontainers(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """replace_namespaced_pod_ephemeralcontainers  # noqa: E501

        replace ephemeralcontainers of the specified Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_namespaced_pod_ephemeralcontainers(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Pod
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1Pod):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Pod
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.replace_namespaced_pod_ephemeralcontainers_endpoint.call_with_http_info(**kwargs)

    def replace_namespaced_pod_status(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """replace_namespaced_pod_status  # noqa: E501

        replace status of the specified Pod  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_namespaced_pod_status(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Pod
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1Pod):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Pod
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.replace_namespaced_pod_status_endpoint.call_with_http_info(**kwargs)

    def replace_namespaced_pod_template(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """replace_namespaced_pod_template  # noqa: E501

        replace the specified PodTemplate  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_namespaced_pod_template(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PodTemplate
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1PodTemplate):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1PodTemplate
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.replace_namespaced_pod_template_endpoint.call_with_http_info(**kwargs)

    def replace_namespaced_replication_controller(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """replace_namespaced_replication_controller  # noqa: E501

        replace the specified ReplicationController  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_namespaced_replication_controller(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ReplicationController
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1ReplicationController):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ReplicationController
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.replace_namespaced_replication_controller_endpoint.call_with_http_info(**kwargs)

    def replace_namespaced_replication_controller_scale(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """replace_namespaced_replication_controller_scale  # noqa: E501

        replace scale of the specified ReplicationController  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_namespaced_replication_controller_scale(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Scale
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1Scale):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Scale
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.replace_namespaced_replication_controller_scale_endpoint.call_with_http_info(**kwargs)

    def replace_namespaced_replication_controller_status(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """replace_namespaced_replication_controller_status  # noqa: E501

        replace status of the specified ReplicationController  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_namespaced_replication_controller_status(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ReplicationController
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1ReplicationController):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ReplicationController
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.replace_namespaced_replication_controller_status_endpoint.call_with_http_info(**kwargs)

    def replace_namespaced_resource_quota(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """replace_namespaced_resource_quota  # noqa: E501

        replace the specified ResourceQuota  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_namespaced_resource_quota(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ResourceQuota
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1ResourceQuota):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ResourceQuota
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.replace_namespaced_resource_quota_endpoint.call_with_http_info(**kwargs)

    def replace_namespaced_resource_quota_status(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """replace_namespaced_resource_quota_status  # noqa: E501

        replace status of the specified ResourceQuota  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_namespaced_resource_quota_status(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ResourceQuota
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1ResourceQuota):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ResourceQuota
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.replace_namespaced_resource_quota_status_endpoint.call_with_http_info(**kwargs)

    def replace_namespaced_secret(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """replace_namespaced_secret  # noqa: E501

        replace the specified Secret  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_namespaced_secret(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Secret
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1Secret):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Secret
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.replace_namespaced_secret_endpoint.call_with_http_info(**kwargs)

    def replace_namespaced_service(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """replace_namespaced_service  # noqa: E501

        replace the specified Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_namespaced_service(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Service
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1Service):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Service
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.replace_namespaced_service_endpoint.call_with_http_info(**kwargs)

    def replace_namespaced_service_account(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """replace_namespaced_service_account  # noqa: E501

        replace the specified ServiceAccount  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_namespaced_service_account(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the ServiceAccount
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1ServiceAccount):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1ServiceAccount
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.replace_namespaced_service_account_endpoint.call_with_http_info(**kwargs)

    def replace_namespaced_service_status(
        self,
        name,
        namespace,
        body,
        **kwargs
    ):
        """replace_namespaced_service_status  # noqa: E501

        replace status of the specified Service  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_namespaced_service_status(name, namespace, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Service
            namespace (str): object name and auth scope, such as for teams and projects
            body (V1Service):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Service
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['namespace'] = \
            namespace
        kwargs['body'] = \
            body
        return self.replace_namespaced_service_status_endpoint.call_with_http_info(**kwargs)

    def replace_node(
        self,
        name,
        body,
        **kwargs
    ):
        """replace_node  # noqa: E501

        replace the specified Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_node(name, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Node
            body (V1Node):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Node
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['body'] = \
            body
        return self.replace_node_endpoint.call_with_http_info(**kwargs)

    def replace_node_status(
        self,
        name,
        body,
        **kwargs
    ):
        """replace_node_status  # noqa: E501

        replace status of the specified Node  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_node_status(name, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the Node
            body (V1Node):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1Node
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['body'] = \
            body
        return self.replace_node_status_endpoint.call_with_http_info(**kwargs)

    def replace_persistent_volume(
        self,
        name,
        body,
        **kwargs
    ):
        """replace_persistent_volume  # noqa: E501

        replace the specified PersistentVolume  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_persistent_volume(name, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PersistentVolume
            body (V1PersistentVolume):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1PersistentVolume
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['body'] = \
            body
        return self.replace_persistent_volume_endpoint.call_with_http_info(**kwargs)

    def replace_persistent_volume_status(
        self,
        name,
        body,
        **kwargs
    ):
        """replace_persistent_volume_status  # noqa: E501

        replace status of the specified PersistentVolume  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.replace_persistent_volume_status(name, body, async_req=True)
        >>> result = thread.get()

        Args:
            name (str): name of the PersistentVolume
            body (V1PersistentVolume):

        Keyword Args:
            pretty (str): If 'true', then the output is pretty printed.. [optional]
            dry_run (str): When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed. [optional]
            field_manager (str): fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.. [optional]
            field_validation (str): fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            V1PersistentVolume
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['name'] = \
            name
        kwargs['body'] = \
            body
        return self.replace_persistent_volume_status_endpoint.call_with_http_info(**kwargs)

