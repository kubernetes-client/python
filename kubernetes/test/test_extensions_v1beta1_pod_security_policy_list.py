# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.17
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.extensions_v1beta1_pod_security_policy_list import ExtensionsV1beta1PodSecurityPolicyList  # noqa: E501
from kubernetes.client.rest import ApiException

class TestExtensionsV1beta1PodSecurityPolicyList(unittest.TestCase):
    """ExtensionsV1beta1PodSecurityPolicyList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ExtensionsV1beta1PodSecurityPolicyList
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.extensions_v1beta1_pod_security_policy_list.ExtensionsV1beta1PodSecurityPolicyList()  # noqa: E501
        if include_optional :
            return ExtensionsV1beta1PodSecurityPolicyList(
                api_version = '0', 
                items = [
                    kubernetes.client.models.extensions/v1beta1/pod_security_policy.extensions.v1beta1.PodSecurityPolicy(
                        api_version = '0', 
                        kind = '0', 
                        metadata = kubernetes.client.models.v1/object_meta.v1.ObjectMeta(
                            annotations = {
                                'key' : '0'
                                }, 
                            cluster_name = '0', 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_grace_period_seconds = 56, 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            finalizers = [
                                '0'
                                ], 
                            generate_name = '0', 
                            generation = 56, 
                            labels = {
                                'key' : '0'
                                }, 
                            managed_fields = [
                                kubernetes.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                                    api_version = '0', 
                                    fields_type = '0', 
                                    fields_v1 = kubernetes.client.models.fields_v1.fieldsV1(), 
                                    manager = '0', 
                                    operation = '0', 
                                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            name = '0', 
                            namespace = '0', 
                            owner_references = [
                                kubernetes.client.models.v1/owner_reference.v1.OwnerReference(
                                    api_version = '0', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '0', 
                                    name = '0', 
                                    uid = '0', )
                                ], 
                            resource_version = '0', 
                            self_link = '0', 
                            uid = '0', ), 
                        spec = kubernetes.client.models.extensions/v1beta1/pod_security_policy_spec.extensions.v1beta1.PodSecurityPolicySpec(
                            allow_privilege_escalation = True, 
                            allowed_csi_drivers = [
                                kubernetes.client.models.extensions/v1beta1/allowed_csi_driver.extensions.v1beta1.AllowedCSIDriver(
                                    name = '0', )
                                ], 
                            allowed_capabilities = [
                                '0'
                                ], 
                            allowed_flex_volumes = [
                                kubernetes.client.models.extensions/v1beta1/allowed_flex_volume.extensions.v1beta1.AllowedFlexVolume(
                                    driver = '0', )
                                ], 
                            allowed_host_paths = [
                                kubernetes.client.models.extensions/v1beta1/allowed_host_path.extensions.v1beta1.AllowedHostPath(
                                    path_prefix = '0', 
                                    read_only = True, )
                                ], 
                            allowed_proc_mount_types = [
                                '0'
                                ], 
                            allowed_unsafe_sysctls = [
                                '0'
                                ], 
                            default_add_capabilities = [
                                '0'
                                ], 
                            default_allow_privilege_escalation = True, 
                            forbidden_sysctls = [
                                '0'
                                ], 
                            fs_group = kubernetes.client.models.extensions/v1beta1/fs_group_strategy_options.extensions.v1beta1.FSGroupStrategyOptions(
                                ranges = [
                                    kubernetes.client.models.extensions/v1beta1/id_range.extensions.v1beta1.IDRange(
                                        max = 56, 
                                        min = 56, )
                                    ], 
                                rule = '0', ), 
                            host_ipc = True, 
                            host_network = True, 
                            host_pid = True, 
                            host_ports = [
                                kubernetes.client.models.extensions/v1beta1/host_port_range.extensions.v1beta1.HostPortRange(
                                    max = 56, 
                                    min = 56, )
                                ], 
                            privileged = True, 
                            read_only_root_filesystem = True, 
                            required_drop_capabilities = [
                                '0'
                                ], 
                            run_as_group = kubernetes.client.models.extensions/v1beta1/run_as_group_strategy_options.extensions.v1beta1.RunAsGroupStrategyOptions(
                                rule = '0', ), 
                            run_as_user = kubernetes.client.models.extensions/v1beta1/run_as_user_strategy_options.extensions.v1beta1.RunAsUserStrategyOptions(
                                rule = '0', ), 
                            runtime_class = kubernetes.client.models.extensions/v1beta1/runtime_class_strategy_options.extensions.v1beta1.RuntimeClassStrategyOptions(
                                allowed_runtime_class_names = [
                                    '0'
                                    ], 
                                default_runtime_class_name = '0', ), 
                            se_linux = kubernetes.client.models.extensions/v1beta1/se_linux_strategy_options.extensions.v1beta1.SELinuxStrategyOptions(
                                rule = '0', 
                                se_linux_options = kubernetes.client.models.v1/se_linux_options.v1.SELinuxOptions(
                                    level = '0', 
                                    role = '0', 
                                    type = '0', 
                                    user = '0', ), ), 
                            supplemental_groups = kubernetes.client.models.extensions/v1beta1/supplemental_groups_strategy_options.extensions.v1beta1.SupplementalGroupsStrategyOptions(
                                rule = '0', ), 
                            volumes = [
                                '0'
                                ], ), )
                    ], 
                kind = '0', 
                metadata = kubernetes.client.models.v1/list_meta.v1.ListMeta(
                    continue = '0', 
                    remaining_item_count = 56, 
                    resource_version = '0', 
                    self_link = '0', )
            )
        else :
            return ExtensionsV1beta1PodSecurityPolicyList(
                items = [
                    kubernetes.client.models.extensions/v1beta1/pod_security_policy.extensions.v1beta1.PodSecurityPolicy(
                        api_version = '0', 
                        kind = '0', 
                        metadata = kubernetes.client.models.v1/object_meta.v1.ObjectMeta(
                            annotations = {
                                'key' : '0'
                                }, 
                            cluster_name = '0', 
                            creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            deletion_grace_period_seconds = 56, 
                            deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            finalizers = [
                                '0'
                                ], 
                            generate_name = '0', 
                            generation = 56, 
                            labels = {
                                'key' : '0'
                                }, 
                            managed_fields = [
                                kubernetes.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                                    api_version = '0', 
                                    fields_type = '0', 
                                    fields_v1 = kubernetes.client.models.fields_v1.fieldsV1(), 
                                    manager = '0', 
                                    operation = '0', 
                                    time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                ], 
                            name = '0', 
                            namespace = '0', 
                            owner_references = [
                                kubernetes.client.models.v1/owner_reference.v1.OwnerReference(
                                    api_version = '0', 
                                    block_owner_deletion = True, 
                                    controller = True, 
                                    kind = '0', 
                                    name = '0', 
                                    uid = '0', )
                                ], 
                            resource_version = '0', 
                            self_link = '0', 
                            uid = '0', ), 
                        spec = kubernetes.client.models.extensions/v1beta1/pod_security_policy_spec.extensions.v1beta1.PodSecurityPolicySpec(
                            allow_privilege_escalation = True, 
                            allowed_csi_drivers = [
                                kubernetes.client.models.extensions/v1beta1/allowed_csi_driver.extensions.v1beta1.AllowedCSIDriver(
                                    name = '0', )
                                ], 
                            allowed_capabilities = [
                                '0'
                                ], 
                            allowed_flex_volumes = [
                                kubernetes.client.models.extensions/v1beta1/allowed_flex_volume.extensions.v1beta1.AllowedFlexVolume(
                                    driver = '0', )
                                ], 
                            allowed_host_paths = [
                                kubernetes.client.models.extensions/v1beta1/allowed_host_path.extensions.v1beta1.AllowedHostPath(
                                    path_prefix = '0', 
                                    read_only = True, )
                                ], 
                            allowed_proc_mount_types = [
                                '0'
                                ], 
                            allowed_unsafe_sysctls = [
                                '0'
                                ], 
                            default_add_capabilities = [
                                '0'
                                ], 
                            default_allow_privilege_escalation = True, 
                            forbidden_sysctls = [
                                '0'
                                ], 
                            fs_group = kubernetes.client.models.extensions/v1beta1/fs_group_strategy_options.extensions.v1beta1.FSGroupStrategyOptions(
                                ranges = [
                                    kubernetes.client.models.extensions/v1beta1/id_range.extensions.v1beta1.IDRange(
                                        max = 56, 
                                        min = 56, )
                                    ], 
                                rule = '0', ), 
                            host_ipc = True, 
                            host_network = True, 
                            host_pid = True, 
                            host_ports = [
                                kubernetes.client.models.extensions/v1beta1/host_port_range.extensions.v1beta1.HostPortRange(
                                    max = 56, 
                                    min = 56, )
                                ], 
                            privileged = True, 
                            read_only_root_filesystem = True, 
                            required_drop_capabilities = [
                                '0'
                                ], 
                            run_as_group = kubernetes.client.models.extensions/v1beta1/run_as_group_strategy_options.extensions.v1beta1.RunAsGroupStrategyOptions(
                                rule = '0', ), 
                            run_as_user = kubernetes.client.models.extensions/v1beta1/run_as_user_strategy_options.extensions.v1beta1.RunAsUserStrategyOptions(
                                rule = '0', ), 
                            runtime_class = kubernetes.client.models.extensions/v1beta1/runtime_class_strategy_options.extensions.v1beta1.RuntimeClassStrategyOptions(
                                allowed_runtime_class_names = [
                                    '0'
                                    ], 
                                default_runtime_class_name = '0', ), 
                            se_linux = kubernetes.client.models.extensions/v1beta1/se_linux_strategy_options.extensions.v1beta1.SELinuxStrategyOptions(
                                rule = '0', 
                                se_linux_options = kubernetes.client.models.v1/se_linux_options.v1.SELinuxOptions(
                                    level = '0', 
                                    role = '0', 
                                    type = '0', 
                                    user = '0', ), ), 
                            supplemental_groups = kubernetes.client.models.extensions/v1beta1/supplemental_groups_strategy_options.extensions.v1beta1.SupplementalGroupsStrategyOptions(
                                rule = '0', ), 
                            volumes = [
                                '0'
                                ], ), )
                    ],
        )

    def testExtensionsV1beta1PodSecurityPolicyList(self):
        """Test ExtensionsV1beta1PodSecurityPolicyList"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
