# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.17
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.v1beta1_cron_job_spec import V1beta1CronJobSpec  # noqa: E501
from kubernetes.client.rest import ApiException

class TestV1beta1CronJobSpec(unittest.TestCase):
    """V1beta1CronJobSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1beta1CronJobSpec
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.v1beta1_cron_job_spec.V1beta1CronJobSpec()  # noqa: E501
        if include_optional :
            return V1beta1CronJobSpec(
                concurrency_policy = '0', 
                failed_jobs_history_limit = 56, 
                job_template = kubernetes.client.models.v1beta1/job_template_spec.v1beta1.JobTemplateSpec(
                    metadata = kubernetes.client.models.v1/object_meta.v1.ObjectMeta(
                        annotations = {
                            'key' : '0'
                            }, 
                        cluster_name = '0', 
                        creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        deletion_grace_period_seconds = 56, 
                        deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        finalizers = [
                            '0'
                            ], 
                        generate_name = '0', 
                        generation = 56, 
                        labels = {
                            'key' : '0'
                            }, 
                        managed_fields = [
                            kubernetes.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                                api_version = '0', 
                                fields_type = '0', 
                                fields_v1 = kubernetes.client.models.fields_v1.fieldsV1(), 
                                manager = '0', 
                                operation = '0', 
                                time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        name = '0', 
                        namespace = '0', 
                        owner_references = [
                            kubernetes.client.models.v1/owner_reference.v1.OwnerReference(
                                api_version = '0', 
                                block_owner_deletion = True, 
                                controller = True, 
                                kind = '0', 
                                name = '0', 
                                uid = '0', )
                            ], 
                        resource_version = '0', 
                        self_link = '0', 
                        uid = '0', ), 
                    spec = kubernetes.client.models.v1/job_spec.v1.JobSpec(
                        active_deadline_seconds = 56, 
                        backoff_limit = 56, 
                        completions = 56, 
                        manual_selector = True, 
                        parallelism = 56, 
                        selector = kubernetes.client.models.v1/label_selector.v1.LabelSelector(
                            match_expressions = [
                                kubernetes.client.models.v1/label_selector_requirement.v1.LabelSelectorRequirement(
                                    key = '0', 
                                    operator = '0', 
                                    values = [
                                        '0'
                                        ], )
                                ], 
                            match_labels = {
                                'key' : '0'
                                }, ), 
                        template = kubernetes.client.models.v1/pod_template_spec.v1.PodTemplateSpec(), 
                        ttl_seconds_after_finished = 56, ), ), 
                schedule = '0', 
                starting_deadline_seconds = 56, 
                successful_jobs_history_limit = 56, 
                suspend = True
            )
        else :
            return V1beta1CronJobSpec(
                job_template = kubernetes.client.models.v1beta1/job_template_spec.v1beta1.JobTemplateSpec(
                    metadata = kubernetes.client.models.v1/object_meta.v1.ObjectMeta(
                        annotations = {
                            'key' : '0'
                            }, 
                        cluster_name = '0', 
                        creation_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        deletion_grace_period_seconds = 56, 
                        deletion_timestamp = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        finalizers = [
                            '0'
                            ], 
                        generate_name = '0', 
                        generation = 56, 
                        labels = {
                            'key' : '0'
                            }, 
                        managed_fields = [
                            kubernetes.client.models.v1/managed_fields_entry.v1.ManagedFieldsEntry(
                                api_version = '0', 
                                fields_type = '0', 
                                fields_v1 = kubernetes.client.models.fields_v1.fieldsV1(), 
                                manager = '0', 
                                operation = '0', 
                                time = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        name = '0', 
                        namespace = '0', 
                        owner_references = [
                            kubernetes.client.models.v1/owner_reference.v1.OwnerReference(
                                api_version = '0', 
                                block_owner_deletion = True, 
                                controller = True, 
                                kind = '0', 
                                name = '0', 
                                uid = '0', )
                            ], 
                        resource_version = '0', 
                        self_link = '0', 
                        uid = '0', ), 
                    spec = kubernetes.client.models.v1/job_spec.v1.JobSpec(
                        active_deadline_seconds = 56, 
                        backoff_limit = 56, 
                        completions = 56, 
                        manual_selector = True, 
                        parallelism = 56, 
                        selector = kubernetes.client.models.v1/label_selector.v1.LabelSelector(
                            match_expressions = [
                                kubernetes.client.models.v1/label_selector_requirement.v1.LabelSelectorRequirement(
                                    key = '0', 
                                    operator = '0', 
                                    values = [
                                        '0'
                                        ], )
                                ], 
                            match_labels = {
                                'key' : '0'
                                }, ), 
                        template = kubernetes.client.models.v1/pod_template_spec.v1.PodTemplateSpec(), 
                        ttl_seconds_after_finished = 56, ), ),
                schedule = '0',
        )

    def testV1beta1CronJobSpec(self):
        """Test V1beta1CronJobSpec"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
