# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: release-1.17
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import kubernetes.client
from kubernetes.client.models.v1alpha1_flow_schema_spec import V1alpha1FlowSchemaSpec  # noqa: E501
from kubernetes.client.rest import ApiException

class TestV1alpha1FlowSchemaSpec(unittest.TestCase):
    """V1alpha1FlowSchemaSpec unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test V1alpha1FlowSchemaSpec
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = kubernetes.client.models.v1alpha1_flow_schema_spec.V1alpha1FlowSchemaSpec()  # noqa: E501
        if include_optional :
            return V1alpha1FlowSchemaSpec(
                distinguisher_method = kubernetes.client.models.v1alpha1/flow_distinguisher_method.v1alpha1.FlowDistinguisherMethod(
                    type = '0', ), 
                matching_precedence = 56, 
                priority_level_configuration = kubernetes.client.models.v1alpha1/priority_level_configuration_reference.v1alpha1.PriorityLevelConfigurationReference(
                    name = '0', ), 
                rules = [
                    kubernetes.client.models.v1alpha1/policy_rules_with_subjects.v1alpha1.PolicyRulesWithSubjects(
                        non_resource_rules = [
                            kubernetes.client.models.v1alpha1/non_resource_policy_rule.v1alpha1.NonResourcePolicyRule(
                                non_resource_ur_ls = [
                                    '0'
                                    ], 
                                verbs = [
                                    '0'
                                    ], )
                            ], 
                        resource_rules = [
                            kubernetes.client.models.v1alpha1/resource_policy_rule.v1alpha1.ResourcePolicyRule(
                                api_groups = [
                                    '0'
                                    ], 
                                cluster_scope = True, 
                                namespaces = [
                                    '0'
                                    ], 
                                resources = [
                                    '0'
                                    ], 
                                verbs = [
                                    '0'
                                    ], )
                            ], 
                        subjects = [
                            kubernetes.client.models.flowcontrol/v1alpha1/subject.flowcontrol.v1alpha1.Subject(
                                group = kubernetes.client.models.v1alpha1/group_subject.v1alpha1.GroupSubject(
                                    name = '0', ), 
                                kind = '0', 
                                service_account = kubernetes.client.models.v1alpha1/service_account_subject.v1alpha1.ServiceAccountSubject(
                                    name = '0', 
                                    namespace = '0', ), 
                                user = kubernetes.client.models.v1alpha1/user_subject.v1alpha1.UserSubject(
                                    name = '0', ), )
                            ], )
                    ]
            )
        else :
            return V1alpha1FlowSchemaSpec(
                priority_level_configuration = kubernetes.client.models.v1alpha1/priority_level_configuration_reference.v1alpha1.PriorityLevelConfigurationReference(
                    name = '0', ),
        )

    def testV1alpha1FlowSchemaSpec(self):
        """Test V1alpha1FlowSchemaSpec"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
